<?xml version="1.0" encoding="UTF-8"?>
<!--
 !
 ! $HeadURL$ $LastChangedRevision$ $LastChangedDate$
 !
 ! Copyright 2004-2011 TIBCO Software Inc. All rights reserved.
 !
 ! BusinessEvents ant build script
 !
 !-->
<project name="be" default="build-all" basedir=".">

	<dirname property="be.basedir" file="${ant.file.be}" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<typedef
    		name="for"
            classname="net.sf.antcontrib.logic.ForTask"
            onerror="ignore" />

	<typedef
           	name="isgreaterthan"
           	classname="net.sf.antcontrib.logic.condition.IsGreaterThan"
           	onerror="ignore" />

	<!-- ##################### -->
	<!-- Environment variables -->
	<!-- ##################### -->

	<property environment="env" />

	<!-- ####################### -->
	<!-- User defined properties -->
	<!-- ####################### -->

	<property file="${be.basedir}/user.properties" />

	<!-- ################## -->
	<!-- Version properties -->
	<!-- ################## -->

	<property file="${be.basedir}/version.properties" />

	<!-- ################# -->
	<!-- Build Config Path -->
	<!-- ################# -->

	<property name="bld.config" value="${be.basedir}/config" />

	<!-- ################# -->
	<!-- verbose deletion flag -->
	<!-- ################# -->

	<property name="p2.gathering" value="true" />
	<property name="p2.director.profile" value="BEProfile" />
	<property name="verbose" value="true" />

	<!-- ########################################## -->
	<!-- Third Party Software (External) dependents -->
	<!-- ########################################## -->

	<!-- ========== -->
	<!-- set-tpsdep -->
	<!-- ========== -->

	<target name="set-tpsdep" depends="set-properties">

		<!-- *********************** -->
		<!-- Antlr Parser class path -->
		<!-- *********************** -->

		<path id="antlr.classpath">
			<!-- [TODO] <pathelement path="${ANTLR_LIB}/antlr-2.7.7.jar"/> Need to verify classpath after BE runtime merge -->
			<pathelement path="${ANTLR_LIB}/antlr.jar" />
			<pathelement path="${ANTLR_LIB}/antlr-${env.ANTLR_VERSION}.jar" />

			<!-- Ant Taskdef -->
			<pathelement path="${ANTLR_LIB}/antlr3.jar" />
			<pathelement path="${ST_LIB}/stringtemplate.jar" />
		</path>

		<!-- ************** -->
		<!-- Apache Commons -->
		<!-- ************** -->

		<path id="apache.commons.classpath">
			<fileset dir="${APACHE_COMMONS_COLLECTIONS_LIB}" includes="**/*.jar" />
			<fileset dir="${APACHE_COMMONS_JEXL_LIB}" includes="**/*.jar" />
			<fileset dir="${APACHE_COMMONS_LANG_LIB}" includes="**/*.jar" />
		</path>

		<!-- ************************** -->
		<!-- Apache HTTPComponents Core -->
		<!-- ************************** -->

		<path id="httpcomponents.classpath">
			<fileset dir="${HTTPCORE_LIB}" includes="**/*.jar" />
			<fileset dir="${HTTPCORE_CLIENT_LIB}" includes="**/*.jar" />
		</path>

		<!-- ************ -->
		<!-- Activespaces -->
		<!-- ************ -->

		<path id="as.classpath">
			<pathelement path="${AS_LIB}/as-common.jar" />
			<pathelement path="${AS_LIB}/as-agent.jar" />
			<pathelement path="${AS_LIB}/as-admin.jar" />
		</path>

		<!-- ************ -->
		<!-- Ftl -->
		<!-- ************ -->

		<path id="ftl.classpath">
			<pathelement path="${env.FTL_LIB}/json_simple-1.1.jar" />
			<pathelement path="${env.FTL_LIB}/tibftl.jar" />
			<pathelement path="${env.FTL_LIB}/tibftlgroup.jar" />
		</path>


		<!-- ******************************** -->
		<!-- Berkeley DB Java Edition (Bdbje) -->
		<!-- ******************************** -->

		<path id="bdbje.classpath">
			<pathelement path="${BDBJE_LIB}/je-${env.BDBJE_VERSION}.jar" />
		</path>

		<!-- *** -->
		<!-- Bnd -->
		<!-- *** -->

		<property name="bnd.jar" value="${BND_LIB}/bnd.jar" />
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${bnd.jar}" />
		<path id="bnd.classpath">
			<pathelement path="${BND_LIB}/bnd-${env.BND_VERSION}.jar" />
		</path>

		<!-- ****** -->
		<!-- Castor -->
		<!-- ****** -->

		<path id="castor.classpath">
			<pathelement path="${CASTOR_LIB}/${CASTOR_LIB_INCLUDES}" />
		</path>

		<!-- ******* -->
		<!-- Eclipse -->
		<!-- ******* -->

		<path id="eclipse.classpath">
			<fileset dir="${env.ECLIPSE_HOME}/plugins">
				<include name="com.ibm.icu*.jar" />
				<include name="org.eclipse.compare*.jar" />
				<include name="org.eclipse.core.*.jar" />
				<include name="org.eclipse.debug.core*.jar" />
				<include name="org.eclipse.debug.ui*.jar" />
				<include name="org.eclipse.equinox.app_*.jar" />
				<include name="org.eclipse.equinox.common_*.jar" />
				<include name="org.eclipse.equinox.preferences_*.jar" />
				<include name="org.eclipse.equinox.registry_*.jar" />
				<include name="org.eclipse.help*.jar" />
				<include name="org.eclipse.jdt.core*.jar" />
				<include name="org.eclipse.jface*.jar" />
				<include name="org.eclipse.ltk.ui.refactoring*.jar" />
				<include name="org.eclipse.ltk.core.refactoring*.jar" />
				<include name="org.eclipse.osgi*.jar" />
				<include name="org.eclipse.search*.jar" />
				<include name="org.eclipse.swt*.jar" />
				<include name="org.eclipse.text*.jar" />
				<include name="org.eclipse.ui.editors*.jar" />
				<include name="org.eclipse.ui.forms*.jar" />
				<include name="org.eclipse.ui.ide*.jar" />
				<include name="org.eclipse.ui.navigator*.jar" />
				<include name="org.eclipse.ui.views*.jar" />
				<include name="org.eclipse.ui.views.properties.tabbed*.jar" />
				<include name="org.eclipse.ui.workbench*.jar" />
				<exclude name="**/*.source.*" />
			</fileset>
			<fileset dir="${env.ECLIPSE_EMF_HOME}/plugins">
				<include name="org.eclipse.emf.ecore*.jar" />
				<include name="org.eclipse.emf.common*.jar" />
				<include name="org.eclipse.emf.edit*.jar" />
			</fileset>
			<fileset dir="${env.ECLIPSE_MDT_HOME}/plugins">
				<include name="org.eclipse.uml2.uml*.jar" />
				<include name="org.eclipse.uml2.types*.jar" />
				<include name="org.eclipse.uml2.common*.jar" />
			</fileset>
			<fileset dir="${env.ECLIPSE_EPF_HOME}/plugins">
				<include name="org.eclipse.epf.common*/**" />
			</fileset>
		</path>

		<!-- *** -->
		<!-- EMF -->
		<!-- *** -->

		<path id="emf.classpath">
			<fileset dir="${env.ECLIPSE_EMF_HOME}/plugins">
				<include name="org.eclipse.emf.ecore*.jar" />
				<include name="org.eclipse.emf.common*.jar" />
				<include name="org.eclipse.emf.edit*.jar" />
			</fileset>
		</path>

		<!-- *** -->
		<!-- EPF -->
		<!-- *** -->

		<path id="epf.classpath">
			<fileset dir="${env.ECLIPSE_EPF_HOME}/plugins">
				<include name="org.eclipse.epf.common*/**" />
			</fileset>
		</path>

		<!-- *** -->
		<!-- GWT -->
		<!-- *** -->

		<path id="gwt.classpath">
			<fileset dir="${env.GWT_HOME}">
				<include name="gwt-*.jar" />
				<include name="validation-api-*.jar" />
			</fileset>
		</path>
		

		<!-- ****** -->
		<!-- Javacc -->
		<!-- ****** -->

		<path id="javacc.classpath">
			<pathelement path="${JAVACC_LIB}/javacc-${env.JAVACC_VERSION}.jar" />
		</path>

		<property name="javacc.main" value="org.javacc.parser.Main" />

		<!-- ********* -->
		<!-- Javassist -->
		<!-- ********* -->

		<path id="javassist.classpath">
			<pathelement path="${JAVASSIST_LIB}/javassist.jar" />
		</path>

		<!-- **** -->
		<!-- JPMML -->
		<!-- **** -->

		<path id="jpmml.classpath">
			<pathelement path="${JPMML_LIB}/commons-math3-3.6.1.jar" />
			<pathelement path="${JPMML_LIB}/pmml-evaluator-1.3.7.jar" />
			<pathelement path="${JPMML_LIB}/pmml-evaluator-extension-1.3.7.jar" />
			<pathelement path="${JPMML_LIB}/pmml-model-1.3.7.jar" />
			<pathelement path="${JPMML_LIB}/pmml-schema-1.3.7.jar" />
			<pathelement path="${env.INTERNAL}/teaclient/${env.TEA_VERSION}/${env.TEA_AGENTLIB_VERSION_TAG}/lib/guava-22.0.jar" />
			<pathelement path="${AWS_JAVA_SDK_THIRD_PARTY_LIB}/joda-time-2.8.1.jar" />
		</path>

		<!-- **** -->
		<!-- JSCH -->
		<!-- **** -->

		<path id="jsch.classpath">
			<pathelement path="${JSCH_LIB}/jsch-${env.JSCH_VERSION}.jar" />
		</path>

		<!-- *** -->
		<!-- Jdk -->
		<!-- *** -->

		<path id="jdk.bin">
			<pathelement path="${env.JAVA_HOME}\bin" />
			<pathelement path="${env.JAVA_HOME}\bin\client" />
		</path>

	<!--	<path id="jdk.classpath">
			<pathelement path="${JDK_LIB}/tools.jar" />
		</path>

		<path id="jre.classpath">
			<pathelement path="${JRE_LIB}/jsse.jar" />
		</path>
	-->

		<path id="jdk.include">
			<pathelement path="${env.JAVA_HOME}\include" />
			<pathelement path="${env.JAVA_HOME}\include\win32" />
		</path>

		<!-- **** -->
		<!-- Jide -->
		<!-- **** -->

		<path id="jide.classpath">
			<pathelement path="${JIDE_LIB}/jide-action.jar" />
			<pathelement path="${JIDE_LIB}/jide-common.jar" />
			<pathelement path="${JIDE_LIB}/jide-components.jar" />
			<pathelement path="${JIDE_LIB}/jide-dialogs.jar" />
			<pathelement path="${JIDE_LIB}/jide-dock.jar" />
			<pathelement path="${JIDE_LIB}/jide-editor.jar" />
			<pathelement path="${JIDE_LIB}/jide-grids.jar" />
			<pathelement path="${JIDE_LIB}/jide-pivot.jar" />
			<pathelement path="${JIDE_LIB}/jide-shortcut.jar" />
		</path>

		<!-- ***** -->
		<!-- Log4j -->
		<!-- ***** -->

		<path id="log4j.classpath">
			<pathelement path="${LOG4J_LIB}/log4j-${env.LOG4J_VERSION}.jar" />
		</path>

		<!-- *** -->
		<!-- Poi -->
		<!-- *** -->

		<path id="poi.classpath">
			<pathelement path="${POI_LIB}/poi-${POI_VERSION_DATE}.jar" />
			<pathelement path="${POI_LIB}/poi-contrib-${POI_VERSION_DATE}.jar" />
			<pathelement path="${POI_LIB}/poi-ooxml-${POI_VERSION_DATE}.jar" />
			<pathelement path="${POI_LIB}/poi-scratchpad-${POI_VERSION_DATE}.jar" />
		</path>

		<!-- ****** -->
		<!-- Oracle -->
		<!-- ****** -->

		<path id="oracle.classpath">
			<pathelement path="${ORACLE_LIB}/ojdbc7.jar" />
			<pathelement path="${ORACLE_LIB}/ucp.jar" />
		</path>

		<!-- ********** -->
		<!-- Retroguard -->
		<!-- ********** -->

		<path id="retro.classpath">
			<pathelement path="${RETRO_LIB}/retroguard.jar" />
		</path>

		<!-- ************** -->
		<!-- StringTemplate -->
		<!-- ************** -->

		<path id="stringtemplate.classpath">
			<pathelement path="${ST_LIB}/stringtemplate.jar" />
		</path>

		<!-- ****** -->
		<!-- SVNKit -->
		<!-- ****** -->

		<path id="svnkit.classpath">
			<pathelement path="${SVNKIT_LIB}/antlr-runtime-3.1.3.jar"/>
			<pathelement path="${SVNKIT_LIB}/sqljet.1.0.4.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit-cli.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit-javahl.jar"/>
			<pathelement path="${SVNKIT_LIB}/trilead.jar"/>
		</path>


		<!-- ********** -->
		<!-- SVNKit.jna -->
		<!-- ********** -->

		<path id="svnkit.jna.classpath">
			<pathelement path="${SVNKIT_LIB}/antlr-runtime-3.1.3.jar"/>
			<pathelement path="${SVNKIT_LIB}/jna.jar"/>
			<pathelement path="${SVNKIT_LIB}/sqljet.1.0.4.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit-cli.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit.jar"/>
			<pathelement path="${SVNKIT_LIB}/svnkit-javahl.jar"/>
			<pathelement path="${SVNKIT_LIB}/trilead.jar"/>
		</path>

		<!-- **** -->
		<!-- TERR -->
		<!-- **** -->

		<path id="terr.classpath">
			<fileset dir="${TERR_LIB}" includes="**/*.jar"/>
		</path>

		<!-- ******** -->
		<!-- Tangosol -->
		<!-- ******** -->

		<path id="tangosol.classpath">
			<pathelement path="${TANGOSOL_LIB}/coherence.jar" />
			<pathelement path="${TANGOSOL_LIB}/tangosol.jar" />
		</path>

		<!-- ****** -->
		<!-- Tomcat -->
		<!-- ****** -->

		<path id="tomcat.classpath">
			<fileset dir="${env.TOMCAT_HOME}/embedded" includes="**/*.jar" />
			<fileset dir="${env.TOMCAT_HOME}/lib" includes="catalina-ha.jar" />
			<fileset dir="${env.TOMCAT_HOME}/lib" includes="catalina-tribes.jar" />
		</path>

		<!-- ********* -->
		<!-- Tomsawyer -->
		<!-- ********* -->

		<path id="tomsawyer.dev.classpath">
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}" includes="**/*dev.jar" />
		</path>

		<path id="tomsawyer.rel.classpath">
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}" includes="**/*dep.jar" />
		</path>

		<path id="tomsawyer.dep.classpath">
			<pathelement path="${TOMSAWYER_PERSPECTIVES_LIB}/../bin/lib/tslicensingdeployer.jar" />
			<pathelement path="${TOMSAWYER_PERSPECTIVES_LIB}/../bin/lib/bcel.jar" />
		</path>

		<path id="tomsawyer.thirdparty.classpath">
			<pathelement path="${TOMSAWYER_PERSPECTIVES_LIB}/thirdparty/jena.jar" />
		</path>

		<!-- ******** -->
		<!-- Velocity -->
		<!-- ******** -->

		<path id="velocity.classpath">
			<pathelement path="${VELOCITY_LIB}/${VELOCITY_LIB_INCLUDES}" />
		</path>

		<!-- ******* -->
		<!-- Xdoclet -->
		<!-- ******* -->

		<path id="xdoclet.classpath">
			<pathelement path="${XDOCLET_LIB}/xdoclet.jar" />
			<pathelement path="${XDOCLET_LIB}/xdoclet-${env.XDOCLET_VERSION}.jar" />
			<pathelement path="${XDOCLET_LIB}/xjavadoc-1.1.jar" />
			<pathelement path="${XDOCLET_LIB}/commons-collections-2.0.jar" />
		</path>

		<!-- ***** -->
		<!-- Jackson -->
		<!-- ***** -->

		<path id="jackson.classpath">
			<pathelement path="${JACKSON_LIB}/jackson-annotations-${env.JACKSON_VERSION}.jar" />
			<pathelement path="${JACKSON_LIB}/jackson-core-${env.JACKSON_VERSION}.jar" />
			<pathelement path="${JACKSON_LIB}/jackson-databind-${env.JACKSON_VERSION}.jar" />
		</path>

		<path id="tea.classpath">
			<fileset dir="${TEA_AGENT_LIB}" includes="**/*.jar" />
		</path>

		<path id="spm.classpath">
			<fileset dir="${SPM_LIB}" includes="**/*.jar" />
		</path>
		
		<!-- ************ -->
		<!-- Activespaces 3x -->
		<!-- ************ -->

		<path id="as3x.classpath">
			<pathelement path="${AS3x_LIB}/tibdg.jar" />
		</path>
		
		
		
		<!-- Java 11 specific changes start -->
		
		<path id="jaxb.classpath">
			<fileset dir="${JAXB_LIB}" includes="jaxb-api-2.3.1.jar" />
		</path>
		
		<path id="javax.activation.classpath">
			<fileset dir="${JAVAX_ACTIVATION_LIB}" includes="javax.activation-1.2.0.jar" />
		</path>
		
		<path id="jaxws.classpath">
			<fileset dir="${JAXWS_LIB}" includes="jakarta.xml.soap-api.jar" />
			<fileset dir="${JAXWS_LIB}" includes="saaj-impl.jar" />
			<fileset dir="${JAXWS_LIB}" includes="stax-ex.jar" />
			<fileset dir="${JAXWS_LIB}" includes="stax2-api.jar" />
		</path>
		
		<!-- Java 11 specific changes end -->
		
		

	</target>

	<!-- #################################### -->
	<!-- Tibco Software (Internal) dependents -->
	<!-- #################################### -->

	<!-- ============ -->
	<!-- set-tibcodep -->
	<!-- ============ -->

	<target name="set-tibcodep" depends="set-properties">

		<!-- ************* -->
		<!-- Administrator -->
		<!-- ************* -->

		<path id="admin.classpath">
			<pathelement path="${ADMIN_LIB}/administrator.jar" />
		</path>

		<!-- ********************************** -->
		<!-- BusinessWorks (BW) - TO BE REMOVED -->
		<!-- ********************************** -->

		<path id="bw.classpath">

			<fileset dir="${BW_LIB}" includes="**/*.jar" />

			<!--<pathelement path="${BW_LIB}/org.genxdm.xslt2.api_1.1.0.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.genxdm.bridge.xinode_1.1.200.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.genxdm.processor.xslt.functions_1.1.0.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.genxdm.processor.xslt.processor_1.1.100.001.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.api_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.bridgekit_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.processor.xpath.v10_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.processor.xpath.v20_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.xpath.v10_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.xpath.v20_1.1.0.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.processor.w3c.xs_1.1.0.jar" />
			<pathelement path="${BW_LIB}/com.tibco.xml.xmodel_1.0.500.004.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.processor.io_1.1.0.jar" />
			<pathelement path="${BW_LIB}/com.tibco.xml.cxf.ootb.runtime_1.3.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.xml.cxf.ootb_1.3.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.xml.cxf.runtime_1.3.100.001.jar" />
			<pathelement path="${BW_LIB}/org.genxdm.processor.wsdl_1.1.1.jar" />
        	<pathelement path="${BW_LIB}/org.genxdm.wsdl.api_1.1.1.jar" /> --><!-- needed for runtime, not build time -->
		</path>

		<!-- **** -->
		<!-- Hawk -->
		<!-- **** -->

		<path id="hawk.classpath">
			<pathelement path="${HAWK_LIB}/ami.jar" />
			<pathelement path="${HAWK_LIB}/console.jar" />
			<pathelement path="${HAWK_LIB}/console_agent_shared.jar" />
			<pathelement path="${HAWK_LIB}/talon.jar" />
			<pathelement path="${HAWK_LIB}/util.jar" />
			<pathelement path="${HAWK_LIB}/publisher.jar" />
		</path>

		<!-- **** -->
		<!-- Jdbc -->
		<!-- **** -->

		<path id="jdbc.classpath">
			<pathelement path="${env.DBDRIVERS_HOME}/TIsqlserver.jar" />
		</path>

		<!-- ********** -->
		<!-- Rendezvous -->
		<!-- ********** -->

		<path id="rv.classpath">
			<pathelement path="${RV_LIB}/tibrvj.jar" />
			<pathelement path="${RV_LIB}/tibrvjsd.jar"/>
		</path>

		<!-- **** -->
		<!-- StreamBase -->
		<!-- **** -->

		<path id="sb.classpath">
			<pathelement path="${SB_LIB}/sbclient.jar" />
			<pathelement path="${SB_LIB}/lv-client.jar" />
			<pathelement path="${SB_LIB}/lv-client-wwwdeps.jar" />
		</path>

		<!-- **** -->
		<!-- Kafka -->
		<!-- **** -->

		<path id="kafka.classpath">
			<fileset dir="${KAFKA_LIB}" includes="**/*.jar" />
		</path>
		
		<!-- **** -->
		<!-- Kinesis -->
		<!-- **** -->

		<path id="kinesis.classpath">
			<fileset dir="${KINESIS_LIB}" includes="**/*.jar" />
			<fileset dir="${PROTOBUF-JAVA_LIB}" includes="**/*.jar" />
			<path refid="jackson.classpath" />
			<pathelement path="${AWS_JAVA_SDK_LIB}/aws-java-sdk-${env.AWS_JAVA_SDK_VERSION}.jar" />
            <fileset dir="${AWS_JAVA_SDK_THIRD_PARTY_LIB}">
				<include name="commons-codec-1.10.jar" />
				<include name="ion-java-1.0.2.jar" />
				<include name="jackson-dataformat-cbor-2.6.7.jar" />
				<include name="joda-time-2.8.1.jar" />
			</fileset>
			<pathelement path="${env.HTTPCORE_CLIENT_HOME}/lib/httpclient-4.5.5.jar" />
			<pathelement path="${env.HTTPCORE_HOME}/lib/httpcore-4.4.9.jar" />
			<pathelement path="${env.TPCL_HOME}/${env.LATEST}/${env.PORT}/lib/commons-logging.jar" />
			<pathelement path="${env.INTERNAL}/teaclient/${env.TEA_VERSION}/${env.TEA_AGENTLIB_VERSION_TAG}/lib/guava-22.0.jar" />		
		</path>

		<!-- **** -->
		<!-- MQTT -->
		<!-- **** -->

		<path id="mqtt.classpath">
			<fileset dir="${ECLIPSE_PAHO_LIB}" includes="**/*.jar" />
		</path>

		<!-- ***** -->
		<!-- slf4j -->
		<!-- ***** -->

		<path id="slf4j.classpath">
			<pathelement path="${env.SLF4J_HOME}/slf4j-api-${env.SLF4J_VERSION}.jar" />
			<pathelement path="${env.SLF4J_HOME}/slf4j-log4j12-${env.SLF4J_VERSION}.jar" />
		</path>

		<!-- **** -->
		<!-- Tpcl -->
		<!-- **** -->

		<path id="tpcl.classpath">
			<pathelement path="${TPCL_LIB}/commons-codec-1.3.jar" />
			<pathelement path="${TPCL_LIB}/commons-logging.jar" />
			<pathelement path="${TPCL_LIB}/log4j-1.2.15.jar"/>
			<pathelement path="${TPCL_LIB}/PerlTools.jar"/>
			<pathelement path="${XALAN_LIB}/xalan.jar" />
			<pathelement path="${TPCL_LIB}/xercesImpl.jar" />
			<pathelement path="${TPCL_LIB}/httpclient_3.0/commons-httpclient.jar" />
			<pathelement path="${TPCL_LIB}/../tomcat/5.5/compatible/lib/jakarta-regexp-1.2.jar" />
			<!-- <pathelement path="${TPCL_LIB}/../ant/1.6/lib/mail.jar" /> -->
			<pathelement path="${TPCL_LIB}/mail.jar" />
			<pathelement path="${TPCL_LIB}/activation.jar" />
			<pathelement path="${TPCL_LIB}/xmlsec.jar" />
		</path>

		<!-- ************************* -->
		<!-- Tibco Runtime Agent (TRA) -->
		<!-- ************************* -->

		<path id="tra.classpath">
			<pathelement path="${TRA_LIB}/TIBCrypt.jar" />
			<pathelement path="${TRA_LIB}/TIBCOrt.jar" />
			<pathelement path="${TRA_LIB}/Deployment.jar" />
			<pathelement path="${TRA_LIB}/TIBCOtsm.jar" />
			<!-- Needed for compilation (importing old designer projects). Not shipped -->
			<pathelement path="${EMS_LIB}/tibjms.jar" />
			<pathelement path="${EMS_LIB}/jms-2.0.jar" />
			<!-- Needed for compilation. Not shipped -->
			<!--<pathelement path="${TRA_LIB}/TIBqd.jar" />
            <pathelement path="${TRA_LIB}/DomainUtility.jar" /> -->
			<!-- <pathelement path="${TXML_LIB}/TIBCOxml.jar" />-->
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.io.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.net.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.util.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.ae2xsd.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.sdk.eclipse_5.60.100.002.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.soap.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.transform.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.ws.wsdl.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.xdata.eclipse_5.60.100.001.jar" />
			<pathelement path="${BW_LIB}/com.tibco.tibcoxml.lex.yap.eclipse_5.60.100.001.jar" />
		</path>

		<!-- ********************* -->
		<!-- BusinessEvents Studio -->
		<!-- ********************* -->

		<path id="studio.classpath">
			<fileset dir="${studio.exp}/studio/eclipse/plugins">
				<include name="com.tibco.cep.*.jar" />
			</fileset>
		</path>

	</target>

	<!-- ############# -->
	<!-- Build targets -->
	<!-- ############# -->

	<!-- ******* -->
	<!-- clean-* -->
	<!-- ******* -->

	<target name="clean-beviews" depends="set-all">
		<ant dir="views" antfile="beviewsbuild.xml" target="clean-all" inheritall="true" inheritrefs="true" />
	</target>

	<target name="clean-admin" depends="set-jar">
		<delete verbose="${verbose}" file="${admin.jar}" quiet="true" />
		<delete verbose="${verbose}" dir="${admin.bld}" quiet="true" />
	</target>

	<target name="clean-api" depends="set-exp">
		<delete verbose="${verbose}" file="${api.exp}" quiet="true" />
	</target>

	<target name="clean-as-channel" depends="set-jar">
		<delete verbose="${verbose}" file="${as-channel.jar}" />
		<delete verbose="${verbose}" dir="${as-channel.bld}" />
	</target>

	<target name="clean-base" depends="set-exp">
		<delete verbose="${verbose}" dir="${base.bld}" />
		<delete verbose="${verbose}" file="${base.jar}" />
	</target>

	<target name="clean-backingstore" depends="set-jar">
		<delete verbose="${verbose}" file="${backingstore.jar}" />
		<delete verbose="${verbose}" dir="${backingstore.bld}" />
	</target>

	<target name="clean-backingstore-bdb" depends="set-jar">
		<delete verbose="${verbose}" file="${backingstore-bdb.jar}" />
		<delete verbose="${verbose}" dir="${backingstore-bdb.bld}" />
	</target>

	<target name="clean-bebw" depends="set-jar">
		<subant target="clean-bebw" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../runtime/modules/bw" includes="build.xml" />
		</subant>
	</target>

	<target name="clean-beq" depends="set-jar">
		<delete verbose="${verbose}" file="${beq.jar}" />
		<delete verbose="${verbose}" dir="${lib.exp}/beq" />
	</target>

	<target name="clean-hawk-channel" depends="set-jar">
		<delete verbose="${verbose}" file="${hawk-channel.jar}" />
		<delete verbose="${verbose}" dir="${hawk-channel.bld}" />
	</target>

	<target name="clean-rms-package" depends="set-all, clean-rms">
		<subant target="clean-rms-package-all" inheritall="true">
			<property file="studio/build.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>
	
	<target name="clean-store" depends="set-jar">
		<delete verbose="${verbose}" file="${store.jar}" />
		<delete verbose="${verbose}" dir="${store.bld}" />
	</target>

	<target name="clean-as3channel" depends="set-jar">
		<delete verbose="${verbose}" file="${as3-channel.jar}" />
		<delete verbose="${verbose}" dir="${as3-channel.bld}" />
	</target>
	
	<target name="clean-mqtt-channel" depends="set-jar">
		<delete verbose="${verbose}" file="${mqtt-channel.jar}" />
		<delete verbose="${verbose}" dir="${mqtt-channel.bld}" />
	</target>

	<target name="clean-liveview" depends="set-jar">
		<delete verbose="${verbose}" file="${liveview.jar}" />
		<delete verbose="${verbose}" dir="${liveview.bld}" />
	</target>

	<target name="clean-studio-rms-common" depends="set-all">
		<subant target="clean-studio-rms-common-all" inheritall="true">
			<property file="studio/build.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="clean-sb-channel" depends="set-jar">
		<delete verbose="${verbose}" file="${sb-channel.jar}" />
		<delete verbose="${verbose}" dir="${sb-channel.bld}" />
	</target>

	<target name="clean-channel-api" depends="set-jar">
		<delete verbose="${verbose}" file="${channel-api.jar}" />
		<delete verbose="${verbose}" dir="${channel-api.bld}" />
	</target>


	<target name="clean-studio-rt-common" depends="set-all">
		<subant target="clean-studio-rt-common" inheritall="true">
			<property file="studio/build.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="clean-engine" depends="set-jar">
		<delete verbose="${verbose}" file="${engine.jar}" />
		<delete verbose="${verbose}" dir="${engine.bld}" />
	</target>

	<target name="clean-common" depends="set-jar">
		<delete verbose="${verbose}" file="${common.jar}" />
		<delete verbose="${verbose}" dir="${common.bld}" />
	</target>

	<target name="clean-container" depends="set-jar">
		<delete verbose="${verbose}" file="${container.jar}" />
		<delete verbose="${verbose}" dir="${container.bld}" />
	</target>

	<target name="clean-datagrid-oracle" depends="set-exp">
		<delete verbose="${verbose}" dir="${datagrid-oracle.bld}" />
		<delete verbose="${verbose}" file="${datagrid-oracle.jar}" />
	</target>

	<target name="clean-datagrid-tibco" depends="set-exp">
		<delete verbose="${verbose}" dir="${datagrid-tibco.bld}" />
		<delete verbose="${verbose}" file="${datagrid-tibco.jar}" />
	</target>

	<target name="clean-kernel" depends="set-jar">
		<delete verbose="${verbose}" file="${kernel.jar}" />
		<delete verbose="${verbose}" dir="${kernel.bld}" />
	</target>

	<target name="clean-security" depends="set-jar">
		<delete verbose="${verbose}" file="${security.jar}" />
		<delete verbose="${verbose}" dir="${security.bld}" />
	</target>

	<target name="clean-drivers" depends="set-jar">
		<delete verbose="${verbose}" file="${drivers.jar}" />
		<delete verbose="${verbose}" dir="${drivers.bld}" />
	</target>

	<target name="clean-migration" depends="set-jar">
		<delete verbose="${verbose}" file="${migration.jar}" />
		<delete verbose="${verbose}" dir="${migration.bld}" />
	</target>

	<target name="clean-modules" depends="set-jar">
		<delete verbose="${verbose}" file="${modules.jar}" />
		<delete verbose="${verbose}" dir="${modules.bld}" />
	</target>

	<target name="clean-examples" depends="set-exp">
		<delete verbose="${verbose}" dir="${exm.exp}" />
	</target>

	<target name="clean-doc" depends="set-exp">
		<delete verbose="${verbose}" dir="${doc.exp}" />
	</target>

	<target name="clean-doclets" depends="set-exp">
		<delete verbose="${verbose}" dir="${doclets.exp}" />
	</target>

	<target name="clean-exp" depends="set-exp">
		<delete verbose="${verbose}" dir="${be.exp}" />
	</target>

	<!-- ========= -->
	<!-- clean-ftl -->
	<!-- ========= -->

	<target name="clean-ftl" depends="set-jar">
		<delete verbose="${verbose}" file="${cep-ftl.jar}" />
		<delete verbose="${verbose}" dir="${ftl.bld}" />
	</target>

	<target name="clean-functions" depends="set-jar">
		<delete verbose="${verbose}" file="${functions.jar}" />
		<delete verbose="${verbose}" dir="${functions.bld}" />
		<delete verbose="${verbose}" dir="${be.functions.src}" />
	</target>

	<target name="clean-interpreter" depends="set-jar">
		<delete verbose="${verbose}" file="${interpreter.jar}" />
		<delete verbose="${verbose}" dir="${interpreter.bld}" />
	</target>

	<target name="clean-studio" depends="set-all">
		<subant target="clean-studio-all" inheritall="true">
			<property file="studio/build.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="clean-studiofunctions" depends="set-jar">
		<delete verbose="${verbose}" file="${studiofunctions.jar}" />
		<delete verbose="${verbose}" dir="${studiofunctions.bld}" />
		<delete verbose="${verbose}" dir="${be.studiofunctions.src}" />
	</target>

	<target name="clean-custom-functions-example" depends="set-jar">
		<delete verbose="${verbose}" file="${custom_functions.jar}" />
		<delete verbose="${verbose}" dir="${custom_functions.bld}" />
	</target>

	<target name="clean-obj" depends="set-bld">
		<delete verbose="${verbose}" dir="${be.obj}" />
	</target>

	<target name="clean-rule-grammar" depends="set-jar">
		<property name="rule.grammar.file" value="RuleGrammar.g" />
		<property name="rule.grammar.package" value="com/tibco/be/ui/tools/debugger/view/editor" />
		<property name="rule.grammar.output" value="${palettes.src}/${rule.grammar.package}" />
		<delete verbose="${verbose}" file="${rule.grammar.output}/RuleGrammar__.g" />
		<delete verbose="${verbose}" file="${rule.grammar.output}/RuleGrammarLexer.java" />
		<delete verbose="${verbose}" file="${rule.grammar.output}/RuleGrammarParser.java" />
		<delete verbose="${verbose}" file="${rule.grammar.output}/RuleGrammar.tokens" />
	</target>

	<target name="clean-bpmn" depends="set-jar">
		<delete verbose="${verbose}" file="${bpmn.jar}" />
		<delete verbose="${verbose}" dir="${bpmn.bld}" />
	</target>

	<target name="clean-query" depends="set-jar">
		<delete verbose="${verbose}" file="${query.jar}" />
		<delete verbose="${verbose}" dir="${query.bld}" />
		<property name="query.grammar.file" value="BEOql.g" />
		<property name="query.grammar.package" value="com/tibco/cep/query/ast/parser" />
		<property name="query.grammar.output" value="${query.common.src}/${query.grammar.package}" />
		<delete verbose="${verbose}" file="${query.grammar.output}/BEOql__.g" />
		<delete verbose="${verbose}" file="${query.grammar.output}/BEOqlLexer.java" />
		<delete verbose="${verbose}" file="${query.grammar.output}/BEOqlParser.java" />
		<delete verbose="${verbose}" file="${query.grammar.output}/BEOql.tokens" />
	</target>

	<target name="clean-pattern" depends="set-jar">
		<delete verbose="${verbose}" file="${pattern.jar}" />
		<delete verbose="${verbose}" dir="${pattern.bld}" />

		<delete verbose="${verbose}" file="${pattern.grammar.output}/${pattern.grammar.file.prefix}*.java" />
		<delete verbose="${verbose}" file="${pattern.grammar.output}/${pattern.grammar.file.prefix}*.tokens" />
	</target>

	<target name="clean-loadbalancer" depends="set-jar">
		<delete verbose="${verbose}" file="${loadbalancer.jar}" />
		<delete verbose="${verbose}" dir="${loadbalancer.bld}" />
	</target>

	<target name="clean-rms" depends="set-jar">
		<delete verbose="${verbose}" file="${rms.jar}" />
		<delete verbose="${verbose}" file="${rms.bld}" />
	</target>

	<target name="clean-mm" depends="set-jar">
		<delete verbose="${verbose}" file="${mm.jar}" />
		<delete verbose="${verbose}" dir="${mm.bld}" />
	</target>

	<target name="clean-mm-package" depends="set-exp">
		<delete verbose="${verbose}" dir="${mm.exp}" />
	</target>

	<target name="clean-parser" depends="set-bld">
		<delete verbose="${verbose}" dir="${parser.bld}" />
	</target>

	<target name="clean-tests" depends="set-jar">
		<delete verbose="${verbose}" file="${tests.jar}" />
		<delete verbose="${verbose}" dir="${tests.bld}" />
	</target>

	<target name="clean-bin" depends="set-exp">
		<delete verbose="${verbose}" dir="${bin.exp}" />
	</target>

	<target name="clean-verf" depends="set-src, set-versioning">
		<delete verbose="${verbose}" file="${admin.verf}.java" />
		<delete verbose="${verbose}" file="${backingstore-bdb.verf}.java" />
		<delete verbose="${verbose}" file="${base.verf}.java" />
		<delete verbose="${verbose}" file="${bebw.verf}.java" />
		<delete verbose="${verbose}" file="${bejdbcstore.verf}.java" />
		<delete verbose="${verbose}" file="${beoracle.verf}.java" />
		<delete verbose="${verbose}" file="${bpmn.verf}.java" />
		<delete verbose="${verbose}" file="${common.verf}.java" />
		<delete verbose="${verbose}" file="${container.verf}.java" />
		<delete verbose="${verbose}" file="${datagrid-oracle.verf}.java" />
		<delete verbose="${verbose}" file="${datagrid-tibco.verf}.java" />
		<delete verbose="${verbose}" file="${dbutils.verf}.java" />
		<delete verbose="${verbose}" file="${drivers.verf}.java" />
		<delete verbose="${verbose}" file="${functions.verf}.java" />
		<delete verbose="${verbose}" file="${kernel.verf}.java" />
		<delete verbose="${verbose}" file="${loadbalancer.verf}.java" />
		<delete verbose="${verbose}" file="${migration.verf}.java" />
		<delete verbose="${verbose}" file="${mm.verf}.java" />
		<delete verbose="${verbose}" file="${modules.verf}.java" />
		<delete verbose="${verbose}" file="${pattern.verf}.java" />
		<delete verbose="${verbose}" file="${query.verf}.java" />
		<delete verbose="${verbose}" file="${rms.verf}.java" />
		<delete verbose="${verbose}" file="${security.verf}.java" />
		<delete verbose="${verbose}" file="${studiofunctions.verf}.java" />
		<delete verbose="${verbose}" file="${studiorms.verf}.java" />
		<delete verbose="${verbose}" file="${studiort.verf}.java" />
		<delete verbose="${verbose}" file="${beteagent.verf}.java" />
	</target>

	<target name="clean-plt" depends="set-plt">
		<delete verbose="${verbose}" file="${bebw.plt}.aepalette" />
	</target>

	<target name="clean-jide" depends="set-jar">
		<delete verbose="${verbose}" dir="${lib.exp}/ext/tpcl/jide" />
	</target>

	<target name="clean-tomsawyer" depends="set-jar">
		<delete verbose="${verbose}" dir="${lib.exp}/ext/tpcl/tomsawyer" />
	</target>

	<target name="clean-apache" depends="set-jar">
		<delete verbose="${verbose}" dir="${lib.exp}/ext/tpcl/apache" />
	</target>

	<target name="clean-pre-pst" depends="clean-plt,
                                           clean-verf" />

	<target name="clean-webstudio-dev" depends="clean-common,
                                                     clean-studio-rt-common">
	</target>

	<target name="clean-docker" depends="set-jar">
		<delete verbose="${verbose}" quiet="true" file="${be-docker.jar}" />
		<delete verbose="${verbose}" quiet="true" dir="${be-docker.bld}" />
	</target>

	<target name="clean-pomgenerator" depends="set-jar">
		<delete verbose="${verbose}" file="${be-pomgenerator.jar}" />
		<delete verbose="${verbose}" dir="${be-pomgenerator.bld}" />
	</target>
	<target name="clean-all" depends="clean-admin,
                                      clean-api,
                                      clean-as-channel,
                                      clean-bebw,
                                      clean-backingstore,
                                      clean-backingstore-bdb,
                                      clean-bin,
                                      clean-common,
                                      clean-container,
                                      clean-datagrid-oracle,
                                      clean-datagrid-tibco,
                                      clean-doclets,
                                      clean-drivers,
                                      clean-hawk-channel,
                                      clean-mm,
                                      clean-mm-package,
                                      clean-engine,
                                      clean-examples,
                                      clean-exp,
                                      clean-functions,
                                      clean-sb-channel,
									  clean-channel-api,
                                      clean-studiofunctions,
                                      clean-interpreter,
                                      clean-kernel,
                                      clean-security,
                                      clean-migration,
                                      clean-obj,
                                      clean-parser,
                                      clean-query,
                                      clean-bpmn,
                                      clean-rms,
                                      clean-rms-package,
									  clean-liveview,
                                      clean-studio,
                                      clean-beviews,
                                      clean-tests,
                                      clean-pattern,
                                      clean-loadbalancer,
    								  clean-ftl,
									  clean-as3channel,
									  clean-pomgenerator" />

	<target name="clean" depends="clean-all" />

	<!-- ********* -->
	<!-- clobber-* -->
	<!-- ********* -->

	<target name="clobber-exp" depends="set-exp">
		<delete verbose="${verbose}" dir="${be.root}/exp" />
	</target>

	<target name="clobber-obj" depends="set-exp">
		<delete verbose="${verbose}" dir="${be.root}/obj" />
	</target>

	<target name="clobber-all" depends="clobber-exp,
                                         clobber-obj">
		<delete verbose="${verbose}" dir="${be.root}" />
		<antcall target="clean-studio" />
	</target>

	<target name="clobber" depends="clobber-all" />

	<!-- ======= -->
	<!-- erase-* -->
	<!-- ======= -->

	<target name="erase-Enterprise" depends="set-properties">
		<delete verbose="${verbose}" dir="${env.SRC_ROOT}/build/Enterprise" />
	</target>

	<target name="erase-Inference" depends="set-properties">
		<delete verbose="${verbose}" dir="${env.SRC_ROOT}/build/Inference" />
	</target>

	<target name="erase-logs" depends="set-properties">
		<delete verbose="${verbose}" dir="${env.SRC_ROOT}/logs" />
	</target>

	<target name="erase-all">
		<antcall target="erase-Enterprise" />
		<antcall target="erase-Inference" />
		<antcall target="erase-logs" />
	</target>

	<!-- ***** -->
	<!-- set-* -->
	<!-- ***** -->

	<!-- =========== -->
	<!-- set-BE_DATE -->
	<!-- =========== -->

	<target name="set-BE_DATE">
		<tstamp>
			<!-- <format property="BE_DATE" pattern="EEE, MMM d, yyyy HH:mm zzz" /> -->
			<format property="BE_DATE" pattern="yyyy-MM-dd" />
			<!-- formatting the time
            G        era designator          (Text)              AD
            y        year                    (Number)            1996
            M        month in year           (Text & Number)     July & 07
            d        day in month            (Number)            10
            h        hour in am/pm (1~12)    (Number)            12
            H        hour in day (0~23)      (Number)            0
            m        minute in hour          (Number)            30
            s        second in minute        (Number)            55
            S        millisecond             (Number)            978
            E        day in week             (Text)              Tuesday
            D        day in year             (Number)            189
            F        day of week in month    (Number)            2 (2nd Wed in July)
            w        week in year            (Number)            27
            W        week in month           (Number)            2
            a        am/pm marker            (Text)              PM
            k        hour in day (1~24)      (Number)            24
            K        hour in am/pm (0~11)    (Number)            0
            z        time zone               (Text)              Pacific Standard Time
            '        escape for text         (Delimiter)
            ''       single quote            (Literal)           '
            -->
		</tstamp>
	</target>

	<!-- ========== -->
	<!-- set-filter -->
	<!-- ========== -->

	<target name="set-filter" depends="set-properties">
		<filter token="BE_VERSION" value="${BE_VERSION}" />
		<filter token="BE_VERSION_MAJOR" value="${BE_VERSION_MAJOR}" />
		<filter token="BE_VERSION_MINOR" value="${BE_VERSION_MINOR}" />
		<filter token="BE_BUILD" value="${env.BE_BUILD}" />
		<filter token="BE_DATE" value="${BE_DATE}" />
		<filter token="BE_COMPANY" value="${BE_COMPANY}" />
		<filter token="BE_PRODUCT" value="${env.BE_PRODUCT}" />
		<filter token="BE_COPYRIGHT" value="${BE_COPYRIGHT}" />
		<filter token="BE_CONTAINER_ID" value="${BE_CONTAINER_ID}" />
		<filter token="BE_CONTAINER_MINIMUM_VERSION" value="${BE_VERSION_MAJOR}.${BE_VERSION_MINOR}.${BE_VERSION_UPDATE}.0" />
		<filter token="BE_LICENSE" value="${env.BE_LICENSE}" />
		<filter token="AS_VERSION_SHORT" value="${env.AS_VERSION_MAJOR}.${env.AS_VERSION_MINOR}"/>
		<filter token="AS_VERSION" value="${env.AS_VERSION}"/>
		<filter token="BE_BPMN_VERSION" value="${BE_BPMN_VERSION}"/>
		<filter token="BE_HOTFIX_VERSION" value="00${BE_VERSION_HOTFIX}"/>
		<filter token="AS_BUILD_VERSION" value="${env.AS_BUILD_VERSION}"/>
		<filter token="AS_BUILD_TAG" value="${env.AS_BUILD_TAG}"/>
		<filter token="BE_RELEASE_TYPE" value="${env.BE_RELEASE_TYPE}"/>
		<filter token="BE_RELEASE_TYPE_DIR" value="${env.BE_RELEASE_TYPE_DIR}"/>
		<filter token="BE_SUPPORTED_PLATFORMS" value="macosx/x86_64,win/x86_64,linux26gl25/x86_64,sol/sparc_64,sol/x86_64,hpux112/ia64,aix61/power_64,linux26gl24/s390x"/>
		<filter token="PROCESS_SUPPORTED_PLATFORMS" value="macosx/x86_64,win/x86_64,linux26gl25/x86_64,sol/sparc_64,sol/x86_64,hpux112/ia64,aix61/power_64"/>
		<filter token="EXPRESS_SUPPORTED_PLATFORMS" value="macosx/x86_64,win/x86_64,linux26gl25/x86_64,sol/sparc_64,hpux112/ia64,aix61/power_64"/>
		<!-- <if>
			<isgreaterthan arg1="${BE_VERSION_HOTFIX}" arg2="0"/>
			<then>
				<filter token="BE_HOTFIX" value="${BE_VERSION_HOTFIX}"/>
				<filter token="PROCESS_DESIGNTIME_PLATFORMS" value="win_x86,win_x86_64,linux_x86,linux_x86_64,sol_sparc,hpux_ia64,sol_sparc_64,sol_x86_64,aix_power_64,macos_x86_64"/>
			</then>
		</if> -->
		<if>
			<isgreaterthan arg1="${BE_VERSION_UPDATE}" arg2="0"/>
			<then>
				<filter token="BE_VERSION_UPDATE" value="${BE_VERSION_UPDATE}"/>
			</then>
		</if>
		<filter token="BE_DESIGNTIME_PLATFORMS" value="win_x86_64,linux26gl25_x86_64,macos_x86_64,sol_sparc_64,sol_x86_64,hpux112_ia64,aix61_power_64,linux26gl24_s390x"/>
		<filter token="SUNEC_PLATFORMS" value="win_x86_64,linux26gl25_x86_64,macos_x86_64,sol_sparc_64"/>
		<filter token="INSTALLER_RELEASE" value="${env.INSTALLER_RELEASE}" />
		<filter token="INSTALLER_VERSION" value="${env.INSTALLER_VERSION}" />
		<filter token="BE_TEA_AGENT_VERSION" value="${BE_TEA_AGENT_VERSION}"/>
		<filter token="BE_TEA_AGENT_PRODUCT" value="${env.BE_TEA_AGENT_PRODUCT}"/>
	</target>

	<!-- ============ -->
	<!-- set-platform -->
	<!-- ============ -->

	<target name="set-platform">
		<if>
			<os family="windows" />
			<then>
				<property name="env.ISLINUX" value="0" />
				<property name="env.ISUNIX" value="0" />
				<property name="env.ISWINDOWS" value="1" />
				<property name="env.ISMACOSX" value="0" />
			</then>
			<else>
				<if>
					<os family="mac" />
					<then>
						<property name="env.ISLINUX" value="0" />
						<property name="env.ISUNIX" value="1" />
						<property name="env.ISWINDOWS" value="0" />
						<property name="env.ISMACOSX" value="1" />
					</then>
					<else>
						<property name="env.ISLINUX" value="1" />
						<property name="env.ISUNIX" value="1" />
						<property name="env.ISWINDOWS" value="0" />
						<property name="env.ISMACOSX" value="0" />
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- =============== -->
	<!-- set-environment -->
	<!-- =============== -->

	<target name="set-environment" depends="set-platform">
		<if>
			<equals arg1="${env.ISWINDOWS}" arg2="1" />
			<then>
				<property name="env.TSI_ROOT" value="R:" />
				<property name="env.SYNC_ROOT" value="C:/root" />
				<property name="env.DOC_ROOT" value="L:/docs4release" />
				<property name="env.ARCH" value="x86" />
				<property name="env.OS" value="win" />
				<property name="OS" value="win" />
				<property name="env.PORT" value="win/x86" />
				<property name="env.PSP" value=";" />
			</then>
			<elseif>
				<and>
					<equals arg1="${env.ISMACOSX}" arg2="0" />
					<equals arg1="${env.ISLINUX}" arg2="1" />
					<equals arg1="${env.ISUNIX}" arg2="1" />
				</and>
				<then>
					<echo message="Inside second-if linux"/>
					<property name="env.TSI_ROOT" value="/tsi/root" />
					<property name="env.SYNC_ROOT" value="/local/root" />
					<property name="env.DOC_ROOT" value="/potsticker/products/pubs/docs4release" />
					<!--<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.ARCH}" outputproperty="env.ARCH">
					</shellscript>
					<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.OS}" outputproperty="env.OS">
					</shellscript>
					<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.PORT}" outputproperty="env.PORT">
					</shellscript>-->
					<property name="env.ARCH" value="x86_64" />
					<property name="env.OS" value="linux26gl25" />
					<property name="OS" value="linux26gl25" />
					<property name="env.PORT" value="linux26gl25/x86_64" />
					<property name="env.PSP" value=":" />
				</then>
			</elseif>
			<else>
				<echo message="Inside third-if linux"/>
				<property name="env.TSI_ROOT" value="/tsi/root" />
				<property name="env.SYNC_ROOT" value="/local/root" />
				<property name="env.DOC_ROOT" value="/potsticker/products/pubs/docs4release" />
				<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.ARCH}" outputproperty="env.ARCH">
				</shellscript>
				<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.OS}" outputproperty="env.OS">
				</shellscript>
				<shellscript shell="sh" inputstring="eval `${env.LOGIN_HOME}/set_port.sh sh` ; echo ${env.PORT}" outputproperty="env.PORT">
				</shellscript>
				<property name="env.PSP" value=":" />
			</else>
		</if>
		<property name="env.COMPILER_LINE_ARG" value="-proc:none" />
		<!-- <property name="build.sysclasspath" value="last" /> -->
		
		<echo message="${env.ARCH}"/>
		<echo message="${env.OS}"/>
		<echo message="${env.PORT}"/>
	</target>

	<!-- ============== -->
	<!-- set-properties -->
	<!-- ============== -->

	<!-- Default properties -->
	<target name="set-properties" depends="set-environment">
		<property file="${be.basedir}/shared.properties" />
		<!-- <property name="env.BW_MAPPER_BASE" value="${env.SRC_ROOT}/build/studio/plugins/mapper"/> -->
		<property name="javacSource" value="1.8"/>
		<property name="javacTarget" value="1.8"/>
		<if>
			<isgreaterthan arg1="${BE_VERSION_HOTFIX}" arg2="0"/>
			<then>
				<property name="env.BE_RELEASE_TYPE" value="hotfix"/>
				<!-- <property name="env.BE_RELEASE_TYPE_DIR" value="hf${BE_VERSION_HOTFIX}"/> -->
			</then>
			<else>
				<if>
					<isgreaterthan arg1="${BE_VERSION_UPDATE}" arg2="0"/>
					<then>
						<echo message="second if"/>
						<property name="env.BE_RELEASE_TYPE" value="servicepack"/>
						<property name="env.BE_RELEASE_TYPE_DIR" value="sp"/>
					</then>
					<else>
						<property name="env.BE_RELEASE_TYPE" value="base"/>
						<property name="env.BE_RELEASE_TYPE_DIR" value="base"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- ======= -->
	<!-- set-src -->
	<!-- ======= -->

	<!-- Source directories -->
	<target name="set-src" depends="set-properties">
		<property name="admin.src" value="${env.SRC_ROOT}/runtime/mm/administrator/src" />
		<property name="as-channel.src" value="${env.SRC_ROOT}/runtime/modules/channels/as/src" />
		<property name="backingstore.src" value="${env.SRC_ROOT}/runtime/core/backingstore/src" />
		<property name="backingstore-bdb.src" value="${env.SRC_ROOT}/runtime/core/backingstore-bdb/src" />
		<property name="base.non-be.src" value="${env.SRC_ROOT}/runtime/core/base/non-be/src" />
		<property name="base.be.src" value="${env.SRC_ROOT}/runtime/core/base/be/src" />
		<property name="bebw.src" value="${env.SRC_ROOT}/runtime/modules/bw/src" />
		<property name="bin.src" value="${env.SRC_ROOT}/bin" />
		<property name="bpmn.src" value="${env.SRC_ROOT}/runtime/modules/bpmn/src" />
		<property name="build.src" value="${env.SRC_ROOT}/build" />
		<property name="common.src" value="${env.SRC_ROOT}/runtime/core/common/src" />
		<property name="container.src" value="${env.SRC_ROOT}/runtime/core/container/src" />
		<property name="containermodule.src" value="${env.SRC_ROOT}/runtime/modules/container/src" />
		<!--<property name="custom_functions.src" value="${env.SRC_ROOT}/examples/standard/CustomFunctions" /> -->
		<property name="datagrid-oracle.src" value="${env.SRC_ROOT}/runtime/core/datagrid/coherence/src" />
		<property name="datagrid-tibco.src" value="${env.SRC_ROOT}/runtime/core/datagrid/activespaces/src" />
		<property name="dbutils.src" value="${env.SRC_ROOT}/runtime/modules/tools/migration/src" />
		<property name="drivers.src" value="${env.SRC_ROOT}/runtime/core/drivers/src" />
		<property name="examples.src" value="${env.SRC_ROOT}/examples" />
		<property name="fdg.src" value="${env.SRC_ROOT}/runtime/modules/tools/docs/FunctionsDocGenerator/src" />
		<property name="fdghawk.src" value="${env.SRC_ROOT}/runtime/modules/tools/docs/HawkFunctionsDocGenerator/src" />
		<property name="filterdoclet.src" value="${env.SRC_ROOT}/runtime/modules/tools/docs/filterdoclet/src" />
		<property name="functions.src" value="${env.SRC_ROOT}/runtime/core/functions/src" />
		<property name="hawk-channel.src" value="${env.SRC_ROOT}/runtime/modules/channels/hawk/src" />
		<property name="interpreter.src" value="${env.SRC_ROOT}/runtime/modules/interpreter/src" />
		<property name="kernel.src" value="${env.SRC_ROOT}/runtime/core/kernel/src" />
		<property name="loadbalancer.be.src" value="${env.SRC_ROOT}/runtime/modules/loadbalancer/loadbalancer-be/src" />
		<property name="loadbalancer.core.src" value="${env.SRC_ROOT}/runtime/modules/loadbalancer/loadbalancer-core/src" />
		<property name="migration.src" value="${env.SRC_ROOT}/runtime/modules/tools/migration/src" />
		<property name="mm.src" value="${env.SRC_ROOT}/runtime/mm/em/src" />
		<property name="modules.src" value="${env.SRC_ROOT}/runtime/modules/dbconcepts/src" />
		<property name="modules_functions.src" value="${env.SRC_ROOT}/runtime/modules/dbconcepts/src/com/tibco/cep/modules/db/functions" />
		<property name="modules_custom_driver.src" value="${env.SRC_ROOT}/runtime/modules/channels/custom/src" />
		<property name="obfuscator.src" value="${env.SRC_ROOT}/build/obf/src" />
		<property name="parser.src" value="${env.SRC_ROOT}/designtime/studio/plugins/com.tibco.cep.studio.core/src" />
		<property name="pattern.be.src" value="${env.SRC_ROOT}/runtime/modules/pattern/pattern-be/src" />
		<property name="pattern.core.src" value="${env.SRC_ROOT}/runtime/modules/pattern/pattern-core/src" />
		<property name="pattern.grammar.file.prefix" value="pattern" />
		<property name="pattern.grammar.file" value="${pattern.grammar.file.prefix}.g" />
		<property name="pattern.grammar.package" value="com/tibco/cep/pattern/dsl" />
		<property name="pattern.lang.src" value="${env.SRC_ROOT}/runtime/modules/pattern/pattern-lang/src" />
		<property name="pattern.grammar.output" value="${pattern.lang.src}/${pattern.grammar.package}" />
		<property name="query.example.src" value="${env.SRC_ROOT}/examples/event_stream_processing/bql/src" />
		<property name="query.common.src" value="${env.SRC_ROOT}/runtime/modules/query/common/src" />
		<property name="query.activespaces.src" value="${env.SRC_ROOT}/runtime/modules/query/activespaces/src" />
		<property name="query.coherence.src" value="${env.SRC_ROOT}/runtime/modules/query/coherence/src" />
		<property name="rms.src" value="${env.SRC_ROOT}/runtime/modules/rms/src" />
		<property name="sb-channel.src" value="${env.SRC_ROOT}/runtime/modules/channels/sb/src" />
		<property name="liveview.src" value="${env.SRC_ROOT}/runtime/modules/liveview/src" />
		<property name="channel-api.src" value="${env.SRC_ROOT}/runtime/modules/channels/custom/src" />
		<property name="security.src" value="${env.SRC_ROOT}/runtime/modules/security/src" />
		<property name="security.schemas" value="${env.SRC_ROOT}/runtime/modules/security/schemas" />
		<property name="studio.src" value="${env.SRC_ROOT}/designtime/studio" />
		<property name="studiofunctions.src" value="${env.SRC_ROOT}/designtime/studio/functions/src" />
		<property name="studiort.src" value="${env.SRC_ROOT}/common/src" />
		<property name="releasetools.src" value="${env.SRC_ROOT}/build/tools/releases/src"/>
		<property name="thread-analyzer.src" value="${env.SRC_ROOT}/runtime/modules/tools/thread-analyzer/src" />
		<property name="analytics.be.src" value="${env.SRC_ROOT}/runtime/modules/analytics/analytics-be/src" />
		<property name="analytics.core.src" value="${env.SRC_ROOT}/runtime/modules/analytics/analytics-core/src" />
		<property name="ftl.src" value="${env.SRC_ROOT}/runtime/modules/channels/ftl/src" />
		<property name="ini.src" value="${env.SRC_ROOT}/designtime/studio/packaging/ini" />
		<property name="tea.agent.src" value="${env.SRC_ROOT}/runtime/mm/tea/" />
		<property name="tea.agent.rta.client.src" value="${tea.agent.src}/rta/client/src" />
		<property name="tea.agent.rta.src" value="${tea.agent.src}/rta/runtime/common/src" />
		<property name="tea.agent.rta.actions.src" value="${tea.agent.src}/rta/runtime/bemm/actions" />
		<property name="tea.agent.rta.functions.src" value="${tea.agent.src}/rta/runtime/bemm/functions" />

		<property name="tea.agent.agg.common.src"              value="${tea.agent.src}/aggregation/common/src" />
		<property name="tea.agent.agg.client.src"              value="${tea.agent.src}/aggregation/client/src" />
		<property name="tea.agent.agg.runtime.common.src"      value="${tea.agent.src}/aggregation/runtime/common/src" />
		<property name="tea.agent.agg.runtime.api.src"         value="${tea.agent.src}/aggregation/runtime/api/src" />
		<property name="tea.agent.agg.runtime.actions.src"     value="${tea.agent.src}/aggregation/runtime/actions/src" />
		<property name="tea.agent.agg.runtime.admin.src"       value="${tea.agent.src}/aggregation/runtime/admin/src" />
		<property name="tea.agent.agg.runtime.cluster.src"     value="${tea.agent.src}/aggregation/runtime/cluster/src" />
		<property name="tea.agent.agg.runtime.container.src"   value="${tea.agent.src}/aggregation/runtime/container/src" />
		<property name="tea.agent.agg.runtime.metrics.src"     value="${tea.agent.src}/aggregation/runtime/metrics/src" />
		<property name="tea.agent.agg.runtime.persistence.src" value="${tea.agent.src}/aggregation/runtime/persistence/src" />
		<property name="tea.agent.agg.runtime.query.src"       value="${tea.agent.src}/aggregation/runtime/query/src" />
		<property name="tea.agent.agg.runtime.rules.src"       value="${tea.agent.src}/aggregation/runtime/rules/src" />
		<property name="tea.agent.agg.runtime.transport.src"   value="${tea.agent.src}/aggregation/runtime/transport/src" />
		<property name="tea.agent.agg.store.src"               value="${tea.agent.src}/aggregation/store/src" />
		<property name="kafka-channel-inbuilt.src"             value="${env.SRC_ROOT}/runtime/modules/channels/kafka_inbuilt/src" />
		<property name="kafka-channel.src"                     value="${env.SRC_ROOT}/runtime/modules/channels/kafka/src" />
		<property name="kinesis-channel.src"                   value="${env.SRC_ROOT}/runtime/modules/channels/kinesis/src" />
		<property name="file-channel.src"                      value="${env.SRC_ROOT}/runtime/modules/channels/file/src" />
		<property name="as3-channel.src"                       value="${env.SRC_ROOT}/runtime/modules/channels/as3.x/src" />
		<property name="docker.src" 						   value="${env.SRC_ROOT}/runtime/core/common/src/com/tibco/be/util/docker" />
		<property name="docker.scripts" 					   value="${env.SRC_ROOT}/cloud/docker" />
		<property name="cloud.scripts" 					       value="${env.SRC_ROOT}/cloud" />
		<property name="pomgenerator.src" 					   value="${env.SRC_ROOT}/maven/be-maven-pomGenerator/src/com/tibco/be/maven" />
		<property name="bemavenplugin.src" 					   value="${env.SRC_ROOT}/maven/be-maven-plugin" />
		<property name="store.src" 							   value="${env.SRC_ROOT}/runtime/modules/store/src" />
		<property name="mqtt-channel.src"           		   value="${env.SRC_ROOT}/runtime/modules/channels/mqtt/src" />
		<property name="kafka-streams-channel.src"             value="${env.SRC_ROOT}/runtime/modules/channels/kstreams/src" />
	</target>

	<!-- ============== -->
	<!-- set-versioning -->
	<!-- ============== -->

	<!-- Versioning -->
	<target name="set-versioning" depends="set-src">
		<property name="admin.verd" value="${admin.src}/com/tibco/be/deployment/administrator" />
		<property name="as-channel.verd" value="${as-channel.src}/com/tibco/cep/driver/as" />
		<property name="bebw.verd" value="${bebw.src}/com/tibco/be/bw/plugin" />
		<property name="backingstore-bdb.verd" value="${backingstore-bdb.src}/com/tibco/cep/persister" />
		<property name="base.verd" value="${base.be.src}/com/tibco/cep" />
		<property name="bejdbcstore.verd" value="${backingstore.src}/com/tibco/be/jdbcstore" />
		<property name="beoracle.verd" value="${backingstore.src}/com/tibco/be/oracle" />
		<property name="bpmn.verd" value="${bpmn.src}/com/tibco/cep/bpmn" />
		<property name="common.verd" value="${common.src}/com/tibco/cep" />
		<property name="container.verd" value="${container.src}/com/tibco/cep/container" />
		<property name="drivers.verd" value="${drivers.src}/com/tibco/cep/driver" />
		<property name="datagrid-oracle.verd" value="${datagrid-oracle.src}/com/tibco/cep" />
		<property name="datagrid-tibco.verd" value="${datagrid-tibco.src}/com/tibco/cep/as" />
		<property name="functions.verd" value="${functions.src}/com/tibco/be/functions" />
		<property name="hawk-channel.verd" value="${hawk-channel.src}/com/tibco/cep/driver/hawk" />
		<property name="interpreter.verd" value="${interpreter.src}/com/tibco/cep/interpreter" />
		<property name="kernel.verd" value="${kernel.src}/com/tibco/cep/kernel" />
		<property name="loadbalancer.verd" value="${loadbalancer.be.src}/com/tibco/cep/loadbalancer" />
		<property name="migration.verd" value="${migration.src}/com/tibco/be/migration" />
		<property name="mm.verd" value="${mm.src}/com/tibco/be/bemm/functions" />
		<property name="beteagent.verd" value="${tea.agent.src}/src/com/tibco/tea/agent/be/version" />
		<property name="modules.verd" value="${modules.src}/com/tibco/cep/modules" />
		<property name="pattern.verd" value="${pattern.be.src}/com/tibco/cep/pattern" />
		<property name="query.verd" value="${query.common.src}/com/tibco/cep/query" />
		<property name="rms.verd" value="${rms.src}/com/tibco/be/rms" />
		<property name="liveview.verd" value="${liveview.src}/com/tibco/cep/liveview" />
		<property name="sb-channel.verd" value="${sb-channel.src}/com/tibco/cep/driver/sb" />
		<property name="channel-api.verd" value="${modules_custom_driver.src}/com/tibco/be/custom/channel" />
		<property name="security.verd" value="${security.src}/com/tibco/cep/security" />
		<property name="studiofunctions.verd" value="${studiofunctions.src}/com/tibco/be/functions" />
		<property name="studiorms.verd" value="${studiort.src}/com/tibco/be/uirms" />
		<property name="studiort.verd" value="${studiort.src}/com/tibco/be/uirt" />
		<property name="dbutils.verd" value="${dbutils.src}/com/tibco/be/dbutils" />
		<property name="analytics.verd" value="${analytics.core.src}/com/tibco/cep/analytics" />
		<property name="store.verd" value="${store.src}/com/tibco/cep/store" />
		<property name="admin.verf" value="${admin.verd}/be_adminVersion" />
		<property name="as-channel.verf" value="${as-channel.verd}/cep_as_channelVersion" />
		<property name="backingstore-bdb.verf" value="${backingstore-bdb.verd}/be_bdbVersion" />
		<property name="base.verf" value="${base.verd}/cep_baseVersion" />
		<property name="bebw.verf" value="${bebw.verd}/be_bwVersion" />
		<property name="bejdbcstore.verf" value="${bejdbcstore.verd}/be_jdbcstoreVersion" />
		<property name="beoracle.verf" value="${beoracle.verd}/be_oracleVersion" />
		<property name="bpmn.verf" value="${bpmn.verd}/cep_bpmnVersion" />
		<property name="common.verf" value="${common.verd}/cep_commonVersion" />
		<property name="container.verf" value="${container.verd}/cep_containerVersion" />
		<property name="datagrid-oracle.verf" value="${datagrid-oracle.verd}/cep_datagrid_oracleVersion" />
		<property name="datagrid-tibco.verf" value="${datagrid-tibco.verd}/cep_datagrid_tibcoVersion" />
		<property name="dbutils.verf" value="${dbutils.verd}/be_dbutilsVersion" />
		<property name="drivers.verf" value="${drivers.verd}/cep_driversVersion" />
		<property name="functions.verf" value="${functions.verd}/be_functionsVersion" />
		<property name="hawk-channel.verf" value="${hawk-channel.verd}/cep_hawk_channelVersion" />
		<property name="interpreter.verf" value="${interpreter.verd}/cep_interpreterVersion" />
		<property name="kernel.verf" value="${kernel.verd}/cep_kernelVersion" />
		<property name="loadbalancer.verf" value="${loadbalancer.verd}/cep_loadbalancerVersion" />
		<property name="migration.verf" value="${migration.verd}/cep_migrationVersion" />
		<property name="mm.verf" value="${mm.verd}/be_mmVersion" />
		<property name="modules.verf" value="${modules.verd}/cep_modulesVersion" />
		<property name="pattern.verf" value="${pattern.verd}/cep_patternVersion" />
		<property name="query.verf" value="${query.verd}/cep_queryVersion" />
		<property name="rms.verf" value="${rms.verd}/cep_rmsVersion" />
		<property name="liveview.verf" value="${liveview.verd}/cep_liveviewVersion" />
		<property name="sb-channel.verf" value="${sb-channel.verd}/cep_sb_channelVersion" />
		<property name="channel-api.verf" value="${channel-api.verd}/cep_custom_channelVersion" />
		<property name="security.verf" value="${security.verd}/cep_securityVersion" />
		<property name="studiofunctions.verf" value="${studiofunctions.verd}/be_studiofunctionsVersion" />
		<property name="studiorms.verf" value="${studiorms.verd}/cep_uirmsVersion" />
		<property name="studiort.verf" value="${studiort.verd}/cep_uirtVersion" />
		<property name="analytics.verf" value="${analytics.verd}/cep_analyticsVersion" />
		<property name="beteagent.verf" value="${beteagent.verd}/be_teagentVersion" />
		<property name="bedocker.verd" value="${docker.src}/version" />
		<property name="bedocker.verf" value="${bedocker.verd}/cep_dockerVersion" />
		<property name="bepomgenerator.verd" value="${pomgenerator.src}/version" />
		<property name="bepomgenerator.verf" value="${bepomgenerator.verd}/cep_pomGeneratorVersion" />
		<property name="store.verf" value="${store.verd}/cep_storeVersion" />
	</target>

	<!-- ======= -->
	<!-- set-bom -->
	<!-- ======= -->

	<target name="set-bom" depends="set-properties">


		<!--datamodeling
		<property name="bom.verd.datamodeling"
                                 value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-datamodeling/${env.BE_RELEASE_TYPE_DIR}" />
		<echo message="bom.verd.datamodeling : ${bom.verd.datamodeling}"/>
		<property name="datamodeling.bomf"
                     value="${bom.verd.datamodeling}/businessevents-datamodeling_FeatureConfig" />
		<property name="c-dbconcepts.bomf"
                     value="${bom.verd.datamodeling}/contrib_be-dbconcepts_${BE_VERSION}_FeatureConfig" />
		<property name="c-statemodeler.bomf"
                     value="${bom.verd.datamodeling}/contrib_be-statemodeler_${BE_VERSION}_FeatureConfig" />

		decisionmanager
		<property name="bom.verd.decisionmanager"
                                             value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-decisionmanager/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="decisionmanager.bomf"
                     value="${bom.verd.decisionmanager}/businessevents-decisionmanager_FeatureConfig" />
		<property name="c-decisionmanager.bomf"
                     value="${bom.verd.decisionmanager}/contrib_be-decisionmanager_${BE_VERSION}_FeatureConfig" />

		eventstreamprocessing
		<property name="bom.verd.eventstreamprocessing"
                      value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-eventstreamprocessing/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="eventstreamprocessing.bomf"
                     value="${bom.verd.eventstreamprocessing}/businessevents-eventstreamprocessing_FeatureConfig" />
		<property name="c-pattern.bomf"
                     value="${bom.verd.eventstreamprocessing}/contrib_be-pattern_${BE_VERSION}_FeatureConfig" />
		<property name="c-query.bomf"
                     value="${bom.verd.eventstreamprocessing}/contrib_be-query_${BE_VERSION}_FeatureConfig" />

		express
		not included
		<property name="bom.verd.express"
                                             value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-express/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="express.bomf"
                     value="${bom.verd.express}/businessevents-express_FeatureConfig" />
		<property name="c-express-eclipse.bomf"
                     value="${bom.verd.express}/contrib_be-eclipse_${BE_VERSION}_FeatureConfig" />
		<property name="c-express-monitoringandmanagement.bomf"
                     value="${bom.verd.express}/contrib_be-monitoringandmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="c-express-server.bomf"
                     value="${bom.verd.express}/contrib_be-server_${BE_VERSION}_FeatureConfig" />
		<property name="c-express-studio.bomf"
                     value="${bom.verd.express}/contrib_be-studio_${BE_VERSION}_FeatureConfig" />
		-->

		<!--process-->
		<property name="bom.verd.process"
                                             value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-process/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="process.bomf"
                     value="${bom.verd.process}/businessevents-process_FeatureConfig" />
		<property name="c-process-modeler.bomf"
                     value="${bom.verd.process}/contrib_be-process-modeler_${BE_BPMN_VERSION}_FeatureConfig" />
		<property name="c-process-server.bomf"
                     value="${bom.verd.process}/contrib_be-process-server_${BE_BPMN_VERSION}_FeatureConfig" />

		<!--standard
		<property name="bom.verd.standard"
                     value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-standard/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="standard.bomf"
                     value="${bom.verd.standard}/businessevents-standard_FeatureConfig" />
		<property name="c-datagrid.bomf"
                     value="${bom.verd.standard}/contrib_be-datagrid_${BE_VERSION}_FeatureConfig" />
		<property name="c-eclipse.bomf"
                     value="${bom.verd.standard}/contrib_be-eclipse_${BE_VERSION}_FeatureConfig" />
		<property name="c-monitoringandmanagement.bomf"
                     value="${bom.verd.standard}/contrib_be-monitoringandmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="c-teagent.bomf"
        	         value="${bom.verd.standard}/contrib_be-teagent_${BE_VERSION}_FeatureConfig" />
		<property name="c-rulesmanagement.bomf"
                     value="${bom.verd.standard}/contrib_be-rulesmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="c-server.bomf"
                     value="${bom.verd.standard}/contrib_be-server_${BE_VERSION}_FeatureConfig" />
		<property name="c-studio.bomf"
                     value="${bom.verd.standard}/contrib_be-studio_${BE_VERSION}_FeatureConfig" />-->

		<!--enterprise-->
		<property name="bom.verd.enterprise"
                     value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-enterprise/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="enterprise.bomf"
                     value="${bom.verd.enterprise}/businessevents-enterprise_FeatureConfig" />
		<property name="e-datagrid.bomf"
                     value="${bom.verd.enterprise}/contrib_be-datagrid_${BE_VERSION}_FeatureConfig" />
		<property name="e-eclipse.bomf"
                     value="${bom.verd.enterprise}/contrib_be-eclipse_${BE_VERSION}_FeatureConfig" />
		<property name="e-ecc.bomf"
				     value="${bom.verd.enterprise}/contrib_ecc_${BE_VERSION}_FeatureConfig" />
		<property name="e-monitoringandmanagement.bomf"
                     value="${bom.verd.enterprise}/contrib_be-monitoringandmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="e-teagent.bomf"
        	         value="${bom.verd.enterprise}/contrib_be-teagent_${BE_VERSION}_FeatureConfig" />
		<property name="e-rulesmanagement.bomf"
                     value="${bom.verd.enterprise}/contrib_be-rulesmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="e-server.bomf"
                     value="${bom.verd.enterprise}/contrib_be-server_${BE_VERSION}_FeatureConfig" />
		<property name="e-studio.bomf"
                     value="${bom.verd.enterprise}/contrib_be-studio_${BE_VERSION}_FeatureConfig" />
		<property name="e-dbconcepts.bomf"
                     value="${bom.verd.enterprise}/contrib_be-dbconcepts_${BE_VERSION}_FeatureConfig" />
		<property name="e-statemodeler.bomf"
                     value="${bom.verd.enterprise}/contrib_be-statemodeler_${BE_VERSION}_FeatureConfig" />
		<property name="e-decisionmanager.bomf"
                     value="${bom.verd.enterprise}/contrib_be-decisionmanager_${BE_VERSION}_FeatureConfig" />
		<property name="e-liveview.bomf"
		                     value="${bom.verd.enterprise}/contrib_be-liveview_${BE_VERSION}_FeatureConfig" />
		<property name="e-pattern.bomf"
                     value="${bom.verd.enterprise}/contrib_be-pattern_${BE_VERSION}_FeatureConfig" />
		<property name="e-query.bomf"
                     value="${bom.verd.enterprise}/contrib_be-query_${BE_VERSION}_FeatureConfig" />
		<property name="e-standard.bomf"
		                     value="${bom.verd.enterprise}/contrib_businessevents-standard_${BE_VERSION}_FeatureConfig" />

		<!--views-->
		<property name="bom.verd.views"
                                             value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-views/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="views.bomf"
                     value="${bom.verd.views}/businessevents-views_FeatureConfig" />
		<property name="c-views-modeler.bomf"
                     value="${bom.verd.views}/contrib_be-views-modeler_${BE_VERSION}_FeatureConfig" />
		<property name="c-views-server.bomf"
                     value="${bom.verd.views}/contrib_be-views-server_${BE_VERSION}_FeatureConfig" />

		<!-- activespaces-fix -->
		<property name="activespaces.bomf"
					value="${bom.verd.standard}/contrib_activespaces-runtimedummy_${env.AS_VERSION}.0${env.AS_BUILD_VERSION}_FeatureConfig" />

		<!--hf-->
		<property name="bom.verd.hf"
                     value="${env.SRC_ROOT}/build/pkg_info/bom/${BE_VERSION}/businessevents-hf/${env.BE_RELEASE_TYPE_DIR}" />
		<property name="hotfix.bomf"
                     value="${bom.verd.hf}/businessevents-hf_FeatureConfig" />
		<property name="c-hf-datagrid.bomf"
           	         value="${bom.verd.hf}/contrib_hf_be-datagrid_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-dbconcepts.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-dbconcepts_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-decisionmanager.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-decisionmanager_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-eclipse.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-eclipse_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-monitoringandmanagement.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-monitoringandmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-pattern.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-pattern_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-query.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-query_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-rulesmanagement.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-rulesmanagement_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-process-modeler.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-process-modeler_${BE_BPMN_VERSION}_FeatureConfig" />
		<property name="c-hf-process-server.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-process-server_${BE_BPMN_VERSION}_FeatureConfig" />
		<property name="c-hf-process.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-process_${BE_BPMN_VERSION}_FeatureConfig" />
		<property name="c-hf-server.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-server_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-statemodeler.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-statemodeler_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-studio.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-studio_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-views-modeler.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-views-modeler_${BE_VERSION}_FeatureConfig" />
		<property name="c-hf-views-server.bomf"
        	         value="${bom.verd.hf}/contrib_hf_be-views-server_${BE_VERSION}_FeatureConfig" />

	</target>

	<!-- ======= -->
	<!-- set-plt -->
	<!-- ======= -->

	<!-- Palette files -->

	<target name="set-plt" depends="set-versioning">
		<property name="bebw.plt" value="${bebw.verd}/bebw" />
	</target>

	<!-- ======= -->
	<!-- set-bld -->
	<!-- ======= -->

	<target name="set-bld" depends="set-versioning">
		<!-- Build area root -->
		<property name="be.root" value="${env.SRC_ROOT}/build/${env.BE_EDITION}" />
		<!-- Object directory -->
		<property name="be.obj" value="${be.root}/obj/${env.PORT}/${env.BUILD_TYPE}" />
		<!-- Scratchpad source directory -->
		<property name="be.functions.src" value="${be.root}/src/${env.PORT}/${env.BUILD_TYPE}" />
		<property name="be.studiofunctions.src" value="${be.root}/src/${env.PORT}/${env.BUILD_TYPE}" />
		<property name="be.coherencefunctions.src" value="${be.root}/src/${env.PORT}/${env.BUILD_TYPE}" />
		<property name="common.gen.src" value="${be.root}/src/${env.PORT}/${env.BUILD_TYPE}/common" />
		<!-- Build directories -->
		<property name="admin.bld" value="${be.obj}/admin" />
		<property name="as-channel.bld" value="${be.obj}/as-channel" />
		<property name="bebw.bld" value="${be.obj}/bebw" />
		<property name="migration.bld" value="${be.obj}/migration" />
		<property name="base.bld" value="${be.obj}/base" />
		<property name="backingstore.bld" value="${be.obj}/backingstore" />
		<property name="backingstore-bdb.bld" value="${be.obj}/backingstore-bdb" />
		<property name="engine.bld" value="${be.obj}/engine" />
		<property name="common.bld" value="${be.obj}/common" />
		<property name="container.bld" value="${be.obj}/container" />
		<property name="datagrid-oracle.bld" value="${be.obj}/coherence" />
		<property name="datagrid-tibco.bld" value="${be.obj}/activespaces" />
		<property name="kernel.bld" value="${be.obj}/kernel" />
		<property name="obfuscator.bld" value="${be.obj}/obf" />
		<property name="security.bld" value="${be.obj}/security" />
		<property name="drivers.bld" value="${be.obj}/drivers" />
		<property name="functions.bld" value="${be.obj}/functions" />
		<property name="hawk-channel.bld" value="${be.obj}/hawk-channel" />
		<property name="interpreter.bld" value="${be.obj}/interpreter" />
		<property name="studiofunctions.bld" value="${be.obj}/studiofunctions" />
		<property name="functions_all.bld" value="${be.functions.src}/functions" />
		<!-- <property name="custom_functions.bld" value="${be.obj}/examples/standard/CustomFunctions" /> -->
		<property name="query.example.bld" value="${be.obj}/examples/event_stream_processing/bql" />
		<property name="parser.bld" value="${be.obj}/studio/plugins/com.tibco.cep.studio.core/src" />
		<property name="query.bld" value="${be.obj}/query" />
		<property name="analytics.bld" value="${be.obj}/analytics" />
		<property name="bpmn.bld" value="${be.obj}/bpmn" />
		<property name="bpmncommon.bld" value="${be.obj}/studiobpmncommon" />
		<property name="rms.bld" value="${be.obj}/rms" />
		<property name="studiorms.bld" value="${be.obj}/studiorms" />
		<property name="studiort.bld" value="${be.obj}/studiort" />
		<property name="mm.bld" value="${be.obj}/mm" />
		<property name="thread-analyzer.bld" value="${be.obj}/thread-analyzer" />
		<property name="rg.bld" value="${parser.bld}/com/tibco/be/parser" />
		<property name="sb-channel.bld" value="${be.obj}/sb-channel" />
		<property name="channel-api.bld" value="${be.obj}/channel-api" />
		<property name="tangosol.bld" value="${be.obj}/tangosol" />
		<property name="tests.bld" value="${be.obj}/tests" />
		<property name="modules.bld" value="${be.obj}/modules" />
		<property name="studio.bld" value="${be.obj}/studio" />
		<property name="modules_functions.bld" value="${functions_all.bld}/com/tibco/cep/modules/db/functions" />
		<property name="pattern.bld" value="${be.obj}/pattern" />
		<property name="loadbalancer.bld" value="${be.obj}/loadbalancer" />
		<property name="metricengine.bld" value="${be.obj}/views/metricengine" />
		<property name="views.bld" location="${be.obj}/views" />
		<property name="ftl.bld" location="${be.obj}/ftl" />
		<property name="tea.agent.bld" location="${be.obj}/tea" />
		<property name="kafka-channel-inbuilt.bld" value="${be.obj}/kafka-channel-inbuilt" />
		<property name="kafka-channel.bld" value="${be.obj}/kafka-channel" />
		<property name="kinesis-channel.bld" value="${be.obj}/kinesis-channel" />
		<property name="file-channel.bld" value="${be.obj}/file-channel" />
		<property name="liveview.bld" value="${be.obj}/liveview" />
		<property name="be-docker.bld" value="${be.obj}/be-docker" />
		<property name="be-pomgenerator.bld" value="${be.obj}/be-pomgenerator" />
		<property name="be-maven-plugin.bld" value="${be.obj}/be-maven-plugin" />
		<property name="store.bld" value="${be.obj}/store" />
		<property name="as3-channel.bld" value="${be.obj}/as3-channel" />
		<property name="mqtt-channel.bld" value="${be.obj}/mqtt-channel" />
		<property name="kafka-streams-channel.bld" value="${be.obj}/kafka-streams-channel" />
	</target>

	<!-- ======= -->
	<!-- set-exp -->
	<!-- ======= -->

	<target name="set-exp" depends="set-bld">
		<!-- Export area root -->
		<property name="be.exp" value="${be.root}/exp/${env.PORT}/${env.BUILD_TYPE}" />
		<!-- Export directories -->
		<property name="bin.exp" value="${be.exp}/bin" />
		<property name="rms.exp" value="${be.exp}/rms" />
		<property name="rmsbin.exp" value="${rms.exp}/bin" />
		<property name="doc.exp" value="${be.exp}/doc" />
		<property name="api.exp" value="${doc.exp}/doc_be/doc/standard/html/tib_be_online_reference/api" />
		<property name="exm.exp" value="${be.exp}/examples" />
		<property name="backingStore.exp" value="${exm.exp}/BackingStore/ProjectResources/lib" />
		<property name="fdg.exp" value="${be.exp}/fdg" />
		<property name="doclets.exp" value="${be.exp}/doclets" />
		<property name="lib.exp" value="${be.exp}/lib" />
		<property name="studio.exp" value="${be.exp}" />
		<property name="mm.exp" value="${be.exp}/mm" />
		<property name="thread-analyzer.exp" value="${mm.exp}" />
		<property name="rmsbin.exp" value="${rms.exp}/bin" />
		<property name="mmbin.exp" value="${mm.exp}/bin" />
		<property name="studiobin.exp" value="${studio.exp}/studio/bin" />
		<property name="ENGG_TESTBASE" value="${be.exp}/engg_testbase" />
		<property name="releasetools.exp" value="${be.exp}/tools/release"/>
		<!-- <property name="ftl.exp" value="${be.exp}/ftl" /> -->
		<property name="tea.agent.exp" value="${mm.exp}/tea" />
	</target>

	<!-- ======= -->
	<!-- set-ftl -->
	<!-- ======= -->
	<target name="set-ftl" depends="set-jar">
		<path id="ftl.classpath">
			<pathelement path="${env.FTL_LIB}/json_simple-1.1.jar" />
			<pathelement path="${env.FTL_LIB}/tibftl.jar" />
			<pathelement path="${env.FTL_LIB}/tibftlgroup.jar" />
		</path>
	</target>

	<!-- ======= -->
	<!-- set-jar -->
	<!-- ======= -->

	<target name="set-jar" depends="set-exp">
		<!-- Exported jar files -->
		<property name="admin.jar" value="${lib.exp}/be-admin.jar" />
		<property name="as-channel.jar" value="${lib.exp}/cep-as-channel.jar" />
		<property name="bebw.jar" value="${lib.exp}/palettes/be-bw.jar" />
		<property name="beq.jar" value="${lib.exp}/be-q.jar" />
		<property name="migration.jar" value="${lib.exp}/cep-migration.jar" />
		<property name="base.jar" value="${lib.exp}/cep-base.jar" />
		<property name="backingstore.jar" value="${lib.exp}/cep-backingstore.jar" />
		<property name="backingstore-bdb.jar" value="${lib.exp}/cep-backingstore-bdb.jar" />
		<property name="datagrid-oracle.jar" value="${lib.exp}/cep-datagrid-oracle.jar" />
		<property name="datagrid-tibco.jar" value="${lib.exp}/cep-datagrid-tibco.jar" />
		<property name="common.jar" value="${lib.exp}/cep-common.jar" />
		<property name="container.jar" value="${lib.exp}/cep-container.jar" />
		<property name="kernel.jar" value="${lib.exp}/cep-kernel.jar" />
		<property name="obfuscator.jar" value="${lib.exp}/cep-obfuscator.jar" />
		<property name="security.jar" value="${lib.exp}/cep-security.jar" />
		<property name="drivers.jar" value="${lib.exp}/cep-drivers.jar" />
		<property name="modules.jar" value="${lib.exp}/cep-modules.jar" />
		<property name="functions.jar" value="${lib.exp}/be-functions.jar" />
		<property name="hawk-channel.jar" value="${lib.exp}/cep-hawk-channel.jar" />
		<property name="interpreter.jar" value="${lib.exp}/cep-interpreter.jar" />
		<property name="studiofunctions.jar" value="${lib.exp}/be-studiofunctions.jar" />
		<!-- <property name="custom_functions.jar" value="${exm.exp}/standard/CustomFunctions/custom_functions.jar" /> -->
		<property name="query.example.jar" value="${exm.exp}/event_stream_processing/bql/bql.jar" />
		<property name="query.jar" value="${lib.exp}/cep-query.jar" />
		<property name="bpmn.jar" value="${lib.exp}/cep-bpmn.jar" />
		<property name="rms.jar" value="${rms.exp}/lib/cep-rms.jar" />
		<property name="sb-channel.jar" value="${lib.exp}/cep-sb-channel.jar" />
		<property name="studiorms.jar" value="${lib.exp}/rms/lib/cep-ui-rms-common.jar" />
		<property name="studiort.jar" value="${lib.exp}/cep-ui-rt-common.jar" />
		<property name="mm.jar" value="${lib.exp}/be-mm.jar" />
		<property name="thread-analyzer.jar" value="${lib.exp}/cep-thread-analyzer.jar" />
		<property name="tests.jar" value="${lib.exp}/be-tests.jar" />
		<property name="pattern.jar" value="${lib.exp}/cep-pattern.jar" />
		<property name="loadbalancer.jar" value="${lib.exp}/cep-loadbalancer.jar" />
		<property name="analytics.jar" value="${lib.exp}/cep-analytics.jar" />
		<!-- <property name="cep-ftl.jar" value="${lib.exp}/tibftl.jar" /> TO ADD THE jar FILE NAME -->
		<property name="cep-ftl.jar" value="${lib.exp}/cep-ftl.jar"  />
		<property name="be-tea-agent.jar" value="${tea.agent.exp}/lib/be-tea-agent.jar" />
		<property name="channel-api.jar" value="${lib.exp}/cep-channel-api.jar" />
		<property name="kafka-channel-inbuilt.jar" value="${lib.exp}/cep-kafka.jar" />
		<!-- The jar name for kafka inbuilt channel -->
		<property name="kafka-channel.jar" value="${lib.exp}/cep-kafka-channel.jar" />
	    <property name="kinesis-channel.jar" value="${lib.exp}/cep-kinesis-channel.jar" />
		<property name="file-channel.jar" value="${lib.exp}/cep-file-channel.jar" />
		<property name="as3-channel.jar" value="${lib.exp}/cep-as3-channel.jar" />
		<property name="liveview.jar" value="${lib.exp}/cep-liveview.jar" />
		<property name="be-docker.jar" value="${lib.exp}/cep-docker.jar" />
		<property name="be-pomgenerator.jar" value="${lib.exp}/cep-maven.jar" />
		<property name="store.jar" value="${lib.exp}/cep-store.jar" />
		<property name="mqtt-channel.jar" value="${lib.exp}/cep-mqtt-channel.jar" />
		<property name="kafka-streams-channel.jar" value="${lib.exp}/cep-kafka-streams.jar" />
	</target>

	<target name="set-all" depends="set-platform,
                                    set-environment,
                                    set-properties,
                                    set-src,
                                    set-bld,
                                    set-exp,
                                    set-jar,
                                    set-plt,
                                    set-tpsdep,
                                    set-tibcodep,
                                    set-versioning,
    								set-ftl" />

	<!-- ***** -->
	<!-- pre-* -->
	<!-- ***** -->

	<!-- ========= -->
	<!-- pre-admin -->
	<!-- ========= -->

	<!-- implementation using replace: <target name="pre-admin" depends="set-BE_DATE, set-versioning"> <copy file="${admin.verf}.tag"
        tofile="${admin.verf}.java"> </copy> <replace file="${admin.verf}.java"> <replacefilter token="@BE_VERSION@" value="${BE_VERSION}"/>
        <replacefilter token="@BE_BUILD@" value="${env.BE_BUILD}"/> <replacefilter token="@BE_DATE@" value="${BE_DATE}"/> <replacefilter
        token="@BE_COMPANY@" value="${BE_COMPANY}"/> <replacefilter token="@BE_COPYRIGHT@" value="${BE_COPYRIGHT}"/> <replacefilter
        token="@BE_PRODUCT@" value="${env.BE_PRODUCT}"/> </replace> </target> -->

	<target name="pre-admin" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${admin.verf}.tag" tofile="${admin.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============== -->
	<!-- pre-as-channel -->
	<!-- ============== -->

	<target name="pre-as-channel" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${as-channel.verf}.tag" tofile="${as-channel.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============== -->
	<!-- pre-ftl -->
	<!-- ============== -->

	<target name="pre-ftl" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${ftl.src}/com/tibco/cep/functions/channel/ftl/cep_ftlVersion.tag" tofile="${ftl.src}/com/tibco/cep/functions/channel/ftl/cep_ftlVersion.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ================ -->
	<!-- pre-backingstore -->
	<!-- ================ -->

	<target name="pre-backingstore" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${beoracle.verf}.tag" tofile="${beoracle.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${bejdbcstore.verf}.tag" tofile="${bejdbcstore.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ==================== -->
	<!-- pre-backingstore-bdb -->
	<!-- ==================== -->

	<target name="pre-backingstore-bdb" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${backingstore-bdb.verf}.tag" tofile="${backingstore-bdb.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ======== -->
	<!-- pre-base -->
	<!-- ======== -->

	<target name="pre-base" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${base.verf}.tag" tofile="${base.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ======== -->
	<!-- pre-bebw -->
	<!-- ======== -->

	<target name="pre-bebw" depends="set-BE_DATE, set-plt, set-filter">
		<subant target="pre-bebw" inheritall="true">
			<!-- <property file = "../bw/build.properties" /> -->
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../runtime/modules/bw" includes="build.xml" />
		</subant>
	</target>

	<!-- =========== -->
	<!-- pre-beviews -->
	<!-- =========== -->

	<target name="pre-beviews" depends="set-BE_DATE, set-bld">
		<ant dir="views" antfile="beviewsbuild.xml" target="pre-all" inheritall="true" inheritrefs="true" />
	</target>

	<!-- ======= -->
	<!-- pre-bom -->
	<!-- ======= -->

	<target name="pre-bom" depends="set-BE_DATE, set-filter, set-bom">

		<!--datamodeling
		<copy file="${datamodeling.bomf}.tag" tofile="${datamodeling.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-dbconcepts.bomf}.tag" tofile="${c-dbconcepts.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-statemodeler.bomf}.tag" tofile="${c-statemodeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>-->

		<!--decisionmanager
		<copy file="${decisionmanager.bomf}.tag" tofile="${decisionmanager.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-decisionmanager.bomf}.tag" tofile="${c-decisionmanager.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>-->

		<!--eventstreamprocessing
		<copy file="${eventstreamprocessing.bomf}.tag" tofile="${eventstreamprocessing.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-pattern.bomf}.tag" tofile="${c-pattern.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-query.bomf}.tag" tofile="${c-query.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>-->

		<!--express-->
		<!--not included
		<copy file="${express.bomf}.tag" tofile="${express.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-eclipse.bomf}.tag" tofile="${c-express-eclipse.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-monitoringandmanagement.bomf}.tag" tofile="${c-express-monitoringandmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-server.bomf}.tag" tofile="${c-express-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-studio.bomf}.tag" tofile="${c-express-studio.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		-->

		<!--process-->
		<copy file="${process.bomf}.tag" tofile="${process.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-process-modeler.bomf}.tag" tofile="${c-process-modeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-process-server.bomf}.tag" tofile="${c-process-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>

		<!--standard
		<copy file="${standard.bomf}.tag" tofile="${standard.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-datagrid.bomf}.tag" tofile="${c-datagrid.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-eclipse.bomf}.tag" tofile="${c-eclipse.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-monitoringandmanagement.bomf}.tag" tofile="${c-monitoringandmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-teagent.bomf}.tag" tofile="${c-teagent.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-rulesmanagement.bomf}.tag" tofile="${c-rulesmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-server.bomf}.tag" tofile="${c-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-studio.bomf}.tag" tofile="${c-studio.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>-->

		<!--enterprise-->
		<copy file="${enterprise.bomf}.tag" tofile="${enterprise.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-datagrid.bomf}.tag" tofile="${e-datagrid.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-eclipse.bomf}.tag" tofile="${e-eclipse.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-ecc.bomf}.tag" tofile="${e-ecc.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-monitoringandmanagement.bomf}.tag" tofile="${e-monitoringandmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-teagent.bomf}.tag" tofile="${e-teagent.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-rulesmanagement.bomf}.tag" tofile="${e-rulesmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-server.bomf}.tag" tofile="${e-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-studio.bomf}.tag" tofile="${e-studio.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-dbconcepts.bomf}.tag" tofile="${e-dbconcepts.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-statemodeler.bomf}.tag" tofile="${e-statemodeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-decisionmanager.bomf}.tag" tofile="${e-decisionmanager.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-liveview.bomf}.tag" tofile="${e-liveview.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-pattern.bomf}.tag" tofile="${e-pattern.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-query.bomf}.tag" tofile="${e-query.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${e-standard.bomf}.tag" tofile="${e-standard.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>

		<!--views-->
		<copy file="${views.bomf}.tag" tofile="${views.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-views-modeler.bomf}.tag" tofile="${c-views-modeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-views-server.bomf}.tag" tofile="${c-views-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>

		<!--hotfix-->
		<!--<copy file="${hotfix.bomf}.tag" tofile="${hotfix.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
        </copy>-->

	</target>

	<target name="pre-bom-hf" depends="set-BE_DATE, set-filter, set-bom">
		<copy file="${hotfix.bomf}.tag" tofile="${hotfix.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>

		<copy file="${c-hf-datagrid.bomf}.tag" tofile="${c-hf-datagrid.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-dbconcepts.bomf}.tag" tofile="${c-hf-dbconcepts.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-decisionmanager.bomf}.tag" tofile="${c-hf-decisionmanager.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-eclipse.bomf}.tag" tofile="${c-hf-eclipse.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-monitoringandmanagement.bomf}.tag" tofile="${c-hf-monitoringandmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-pattern.bomf}.tag" tofile="${c-hf-pattern.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-process-modeler.bomf}.tag" tofile="${c-hf-process-modeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-process-server.bomf}.tag" tofile="${c-hf-process-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-query.bomf}.tag" tofile="${c-hf-query.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-rulesmanagement.bomf}.tag" tofile="${c-hf-rulesmanagement.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-server.bomf}.tag" tofile="${c-hf-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-statemodeler.bomf}.tag" tofile="${c-hf-statemodeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-studio.bomf}.tag" tofile="${c-hf-studio.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-views-modeler.bomf}.tag" tofile="${c-hf-views-modeler.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
		<copy file="${c-hf-views-server.bomf}.tag" tofile="${c-hf-views-server.bomf}.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ======== -->
	<!-- pre-bpmn -->
	<!-- ======== -->

	<target name="pre-bpmn" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${bpmn.verf}.tag" tofile="${bpmn.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ========== -->
	<!-- pre-common -->
	<!-- ========== -->

	<target name="pre-common" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${common.verf}.tag" tofile="${common.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============= -->
	<!-- pre-container -->
	<!-- ============= -->

	<target name="pre-container" depends="set-BE_DATE, set-versioning, set-filter">
		<if>
			<equals arg1="${env.BE_LICENSE}" arg2="" />
			<then>
				<filter token="BE_ENGG_README" value="" />
			</then>
			<else>
				<filter token="BE_ENGG_README" value="${env.BE_ENGG_README}" />
			</else>
		</if>
		<copy file="${container.verf}.tag" tofile="${container.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =================== -->
	<!-- pre-datagrid-oracle -->
	<!-- =================== -->

	<target name="pre-datagrid-oracle" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${datagrid-oracle.verf}.tag" tofile="${datagrid-oracle.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ================== -->
	<!-- pre-datagrid-tibco -->
	<!-- ================== -->

	<target name="pre-datagrid-tibco" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${datagrid-tibco.verf}.tag" tofile="${datagrid-tibco.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =========== -->
	<!-- pre-dbutils -->
	<!-- =========== -->

	<target name="pre-dbutils" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${dbutils.verf}.tag" tofile="${dbutils.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =========== -->
	<!-- pre-drivers -->
	<!-- =========== -->

	<target name="pre-drivers" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${drivers.verf}.tag" tofile="${drivers.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============= -->
	<!-- pre-functions -->
	<!-- ============= -->

	<target name="pre-functions" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${functions.verf}.tag" tofile="${functions.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ================ -->
	<!-- pre-hawk-channel -->
	<!-- ================ -->

	<target name="pre-hawk-channel" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${hawk-channel.verf}.tag" tofile="${hawk-channel.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =============== -->
	<!-- pre-interpreter -->
	<!-- =============== -->

	<target name="pre-interpreter" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${interpreter.verf}.tag" tofile="${interpreter.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>


	<!-- ========== -->
	<!-- pre-kernel -->
	<!-- ========== -->

	<target name="pre-kernel" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${kernel.verf}.tag" tofile="${kernel.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ================ -->
	<!-- pre-loadbalancer -->
	<!-- ================ -->

	<target name="pre-loadbalancer" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${loadbalancer.verf}.tag" tofile="${loadbalancer.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============= -->
	<!-- pre-migration -->
	<!-- ============= -->

	<target name="pre-migration" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${migration.verf}.tag" tofile="${migration.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =========== -->
	<!-- pre-modules -->
	<!-- =========== -->

	<target name="pre-modules" depends="set-BE_DATE, set-plt, set-filter">
		<copy file="${modules.verf}.tag" tofile="${modules.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ====== -->
	<!-- pre-mm -->
	<!-- ====== -->

	<target name="pre-mm" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${mm.verf}.tag" tofile="${mm.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============= -->
	<!-- pre-packaging -->
	<!-- ============= -->


	<target name="pre-packaging" depends="set-BE_DATE, set-filter">
		<copy file="${env.SRC_ROOT}/build/engg_build/integration-preflight-tool/ec_client_call_be_5.2.tag" tofile="${env.SRC_ROOT}/build/engg_build/integration-preflight-tool/ec_client_call_be_5.2.xml" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =========== -->
	<!-- pre-pattern -->
	<!-- =========== -->

	<target name="pre-pattern" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${pattern.verf}.tag" tofile="${pattern.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ========= -->
	<!-- pre-query -->
	<!-- ========= -->

	<target name="pre-query" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${query.verf}.tag" tofile="${query.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ======= -->
	<!-- pre-rms -->
	<!-- ======= -->

	<target name="pre-rms" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${rms.verf}.tag" tofile="${rms.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============ -->
	<!-- pre-security -->
	<!-- ============ -->

	<target name="pre-security" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${security.verf}.tag" tofile="${security.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============== -->
	<!-- pre-liveview -->
	<!-- ============== -->

	<target name="pre-liveview" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${liveview.verf}.tag" tofile="${liveview.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============== -->
	<!-- pre-sb-channel -->
	<!-- ============== -->

	<target name="pre-sb-channel" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${sb-channel.verf}.tag" tofile="${sb-channel.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =============== -->
	<!-- pre-channel-api -->
	<!-- =============== -->

	<target name="pre-channel-api" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${channel-api.verf}.tag" tofile="${channel-api.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>


	<!-- ========== -->
	<!-- pre-studio -->
	<!-- ========== -->

	<target name="pre-studio" depends="set-BE_DATE, set-versioning">
		<subant target="update-studio-version" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<!-- =================== -->
	<!-- pre-studiofunctions -->
	<!-- =================== -->

	<target name="pre-studiofunctions" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${studiofunctions.verf}.tag" tofile="${studiofunctions.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ========= -->
	<!-- pre-uirms -->
	<!-- ========= -->

	<target name="pre-uirms" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${studiorms.verf}.tag" tofile="${studiorms.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ======== -->
	<!-- pre-uirt -->
	<!-- ======== -->

	<target name="pre-uirt" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${studiort.verf}.tag" tofile="${studiort.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ============= -->
	<!-- pre-analytics -->
	<!-- ============= -->

	<target name="pre-analytics" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${analytics.verf}.tag" tofile="${analytics.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- ====== -->
	<!-- pre-beteagent -->
	<!-- ====== -->

	<target name="pre-beteagent" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${beteagent.verf}.tag" tofile="${beteagent.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =============== -->
	<!-- pre-be-docker	 -->
	<!-- =============== -->

	<target name="pre-be-docker" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${bedocker.verf}.tag" tofile="${bedocker.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<!-- =============== -->
	<!-- pre-pom-generator	 -->
	<!-- =============== -->

	<target name="pre-pom-generator" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${bepomgenerator.verf}.tag" tofile="${bepomgenerator.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>
	
	<!-- ============== -->
	<!-- pre-store 		-->
	<!-- ============== -->

	<target name="pre-store" depends="set-BE_DATE, set-versioning, set-filter">
		<copy file="${store.verf}.tag" tofile="${store.verf}.java" filtering="true" overwrite="true" outputencoding="UTF-8">
		</copy>
	</target>

	<target name="pre-all" depends="pre-admin,
                                    pre-analytics,
                                    pre-as-channel,
                                    pre-base,
                                    pre-bebw,
                                    pre-backingstore,
                                    pre-backingstore-bdb,
                                    pre-common,
                                    pre-container,
                                    pre-dbutils,
                                    pre-drivers,
                                    pre-datagrid-oracle,
                                    pre-datagrid-tibco,
                                    pre-hawk-channel,
                                    pre-mm,
                                    pre-functions,
                                    pre-interpreter,
                                    pre-sb-channel,
									pre-channel-api,
                                    pre-studio,
                                    pre-studiofunctions,
                                    pre-kernel,
                                    pre-security,
                                    pre-migration,
                                    pre-modules,
                                    pre-pattern,
                                    pre-bpmn,
                                    pre-query,
                                    pre-rms,
									pre-liveview,
                                    pre-studio,
                                    pre-uirms,
                                    pre-uirt,
                                    pre-beviews,
                                    pre-loadbalancer,
                                    pre-bom,
    	                            pre-ftl,
    								pre-beteagent,
									pre-be-docker,
									pre-pom-generator,
									pre-store">
	</target>

	<target name="pre-all-hf" depends="pre-admin,
	                                    pre-analytics,
	                                    pre-as-channel,
	                                    pre-base,
	                                    pre-bebw,
	                                    pre-backingstore,
	                                    pre-backingstore-bdb,
	                                    pre-common,
	                                    pre-container,
	                                    pre-dbutils,
	                                    pre-drivers,
	                                    pre-datagrid-oracle,
	                                    pre-datagrid-tibco,
	                                    pre-hawk-channel,
	                                    pre-mm,
	                                    pre-functions,
	                                    pre-interpreter,
	                                    pre-sb-channel,
										pre-channel-api,
	                                    pre-studio,
	                                    pre-studiofunctions,
	                                    pre-kernel,
	                                    pre-security,
	                                    pre-migration,
	                                    pre-modules,
	                                    pre-pattern,
	                                    pre-bpmn,
	                                    pre-query,
	                                    pre-rms,
										pre-liveview,
	                                    pre-studio,
	                                    pre-uirms,
	                                    pre-uirt,
	                                    pre-beviews,
	                                    pre-loadbalancer,
	                                    pre-bom-hf,
	    	                            pre-ftl,
										pre-be-docker,
										pre-store">
	</target>


	<!-- ******* -->
	<!-- build-* -->
	<!-- ******* -->

	<!-- =========== -->
	<!-- build-admin -->
	<!-- =========== -->

	<target name="build-admin" depends="set-all">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-admin" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${admin.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${admin.src}" destdir="${admin.bld}" debug="on" source="1.6" target="1.6" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="tomcat.classpath" />
				<path refid="tra.classpath" />
				<path refid="tpcl.classpath" />
				<path refid="admin.classpath" />
				<path refid="hawk.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${admin.bld}">
			<fileset dir="${admin.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
			</fileset>
		</copy>

		<jar destfile="${admin.jar}" basedir="${admin.bld}">
			<manifest>
				<attribute name="Specification-Title" value="beadminplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="beadminplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Installation-Plugin" value="com.tibco.be.deployment.administrator.BEInstallationPlugIn" />
				<attribute name="Main-Class" value="com.tibco.be.deployment.administrator.be_adminVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ================ -->
	<!-- build-as-channel -->
	<!-- ================ -->

	<target name="build-as-channel" depends="build-common,build-datagrid-tibco">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-as-channel" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${as-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="as-channel.classpath">
			<path refid="as.classpath" />
			<path refid="rv.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${datagrid-tibco.bld}" />
		</path>

		<javac srcdir="${as-channel.src}" destdir="${as-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="as-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${as-channel.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="as-channel.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${as-channel.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${as-channel.bld}">
			<fileset dir="${as-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${as-channel.jar}" basedir="${as-channel.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.as.cep_as_channelVersion" />
			</manifest>
		</jar>

	</target>


	<!-- ================== -->
	<!-- build-hawk-channel -->
	<!-- ================== -->

	<target name="build-hawk-channel" depends="build-common">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-hawk-channel" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${hawk-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="hawk-channel.classpath">
			<path refid="hawk.classpath" />
			<path refid="rv.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
		</path>

		<javac srcdir="${hawk-channel.src}" destdir="${hawk-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="hawk-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${hawk-channel.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="hawk-channel.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${hawk-channel.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${hawk-channel.bld}">
			<fileset dir="${hawk-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${hawk-channel.jar}" basedir="${hawk-channel.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.hawk.cep_hawk_channelVersion" />
			</manifest>
		</jar>

	</target>


	<!-- ================== -->
	<!-- build-kafka-channel -->
	<!-- ================== -->

	<target name="build-kafka-channel" depends="build-common,build-channel-api">

		<mkdir dir="${kafka-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="kafka-channel.classpath">
			<path refid="kafka.classpath"/>
			<path location="${channel-api.bld}"/>
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path refid="tra.classpath" />

		</path>

		<javac srcdir="${kafka-channel.src}" destdir="${kafka-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="kafka-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${kafka-channel.bld}">
			<fileset dir="${kafka-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${kafka-channel.jar}" basedir="${kafka-channel.bld}">
			<!--
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.custom.channel..cep_hawk_channelVersion" />
			</manifest>
			-->
		</jar>

	</target>

	<!-- ================== -->
	<!-- build-kafka (The Kafka Inbuilt Channel) -->
	<!-- ================== -->
	<target name="build-kafka" depends="build-drivers, build-channel-api">
		<mkdir dir="${kafka-channel-inbuilt.bld}" />
		<mkdir dir="${lib.exp}" />
		<path id="kafka-channel.classpath">
			<path refid="kafka.classpath" />
			<path location="${channel-api.bld}" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${base.bld}" />
			<path location="${drivers.bld}" />
			<path refid="tra.classpath" />
		</path>
		<javac srcdir="${kafka-channel-inbuilt.src}" destdir="${kafka-channel-inbuilt.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="kafka-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>
		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />
		<copy todir="${kafka-channel-inbuilt.bld}">
			<fileset dir="${kafka-channel-inbuilt.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${kafka-channel-inbuilt.jar}" basedir="${kafka-channel-inbuilt.bld}" />
	</target>

	<!-- ================== -->
	<!-- build-kafka-streams (The Kafka Streams Channel) -->
	<!-- ================== -->
	<target name="build-kafka-streams" depends="build-drivers, build-channel-api, build-kafka">
		<mkdir dir="${kafka-streams-channel.bld}" />
		<mkdir dir="${lib.exp}" />
		<path id="kafka-streams-channel.classpath">
			<path refid="kafka.classpath" />
			<path location="${channel-api.bld}" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${base.bld}" />
			<path location="${drivers.bld}" />
			<path location="${kafka-channel-inbuilt.bld}" />
			<path refid="tra.classpath" />
		</path>
		<javac srcdir="${kafka-streams-channel.src}" destdir="${kafka-streams-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="kafka-streams-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>
		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />
		<copy todir="${kafka-streams-channel.bld}">
			<fileset dir="${kafka-streams-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${kafka-streams-channel.jar}" basedir="${kafka-streams-channel.bld}" />
	</target>

	<!-- ================== -->
	<!-- build-kinesis-channel -->
	<!-- ================== -->
	<target name="build-kinesis-channel" depends="build-drivers, build-channel-api">
		<mkdir dir="${kinesis-channel.bld}" />
		<mkdir dir="${lib.exp}" />
		<path id="kinesis-channel.classpath">
			<path refid="kinesis.classpath" />
			<path location="${channel-api.bld}" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${base.bld}" />
			<path location="${drivers.bld}" />
			<path refid="tra.classpath" />
		</path>
		<javac srcdir="${kinesis-channel.src}" destdir="${kinesis-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="kinesis-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>
		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />
		<copy todir="${kinesis-channel.bld}">
			<fileset dir="${kinesis-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${kinesis-channel.jar}" basedir="${kinesis-channel.bld}" />
	</target>

	<!-- ================== -->
	<!-- build-as3-channel -->
	<!-- ================== -->

	<target name="build-as3-channel" depends="build-channel-api, build-store">

		<mkdir dir="${as3-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="as3-channel.classpath">
			<path refid="cep.store.classpath" />
			<path location="${channel-api.bld}" />
			<path location="${store.bld}" />
		</path>

		<javac srcdir="${as3-channel.src}" destdir="${as3-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="as3-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${as3-channel.bld}">
			<fileset dir="${as3-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${as3-channel.jar}" basedir="${as3-channel.bld}">
		</jar>
	</target>

	<!-- ================== -->
		<!-- build-mqtt-channel -->
		<!-- ================== -->
		<target name="build-mqtt-channel" depends="build-drivers, build-channel-api">
			<mkdir dir="${mqtt-channel.bld}" />
			<mkdir dir="${lib.exp}" />
			<path id="mqtt-channel.classpath">
				<path refid="mqtt.classpath" />
				<path location="${channel-api.bld}" />
				<path location="${common.bld}" />
				<path location="${kernel.bld}" />
				<path location="${base.bld}" />
				<path location="${drivers.bld}" />
				<path refid="tra.classpath" />
				<path refid="jackson.classpath" />
			</path>
			<javac srcdir="${mqtt-channel.src}" destdir="${mqtt-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
				<compilerarg line="${env.COMPILER_LINE_ARG}" />
				<classpath>
					<path refid="mqtt-channel.classpath" />
				</classpath>
				<include name="**/*.java" />
				<include name="functions.catalog" />
				<include name="drivers.xml" />
			</javac>
			<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />
			<copy todir="${mqtt-channel.bld}">
				<fileset dir="${mqtt-channel.src}">
					<exclude name="**/*.java" />
					<exclude name="**/*.tag" />
					<exclude name=".classpath" />
					<exclude name=".project" />
				</fileset>
			</copy>

			<jar destfile="${mqtt-channel.jar}" basedir="${mqtt-channel.bld}" />
		</target>

	<!-- ================== -->
	<!-- build-file-channel -->
	<!-- ================== -->

	<target name="build-file-channel" depends="build-common,build-channel-api">

		<mkdir dir="${file-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="file-channel.classpath">
			<path location="${channel-api.bld}"/>
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path refid="tra.classpath" />
		</path>

		<javac srcdir="${file-channel.src}" destdir="${file-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="file-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${file-channel.bld}">
			<fileset dir="${file-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${file-channel.jar}" basedir="${file-channel.bld}">
			<!--
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.custom.channel..cep_hawk_channelVersion" />
			</manifest>
			-->
		</jar>

	</target>


	<!-- ================== -->
	<!-- build-sb-channel -->
	<!-- ================== -->

	<target name="build-sb-channel" depends="build-common, build-functions, build-drivers">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-sb-channel" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${sb-channel.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="sb-channel.classpath">
			<path refid="sb.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="drivers.classpath" />
			<path refid="functions.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
		</path>

		<javac srcdir="${sb-channel.src}" destdir="${sb-channel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="sb-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="functions.catalog" />
			<include name="drivers.xml" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${sb-channel.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="sb-channel.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${sb-channel.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${sb-channel.bld}">
			<fileset dir="${sb-channel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${sb-channel.jar}" basedir="${sb-channel.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.sb.cep_sb_channelVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ================== -->
	<!-- build-channel-api  -->
	<!-- ================== -->

	<target name="build-channel-api" depends="build-common, build-functions, build-drivers">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-channel-api" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${channel-api.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="channel-api.classpath">
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="drivers.classpath" />
			<path refid="functions.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
		</path>

		<javac srcdir="${channel-api.src}" destdir="${channel-api.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="channel-api.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${channel-api.bld}">
			<fileset dir="${channel-api.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${channel-api.jar}" basedir="${channel-api.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.custom.cep_custom_channelVersion" />
			</manifest>
		</jar>

		<delete dir="${channel-api.bld}/javadocs" />
		<mkdir  dir="${channel-api.bld}/javadocs" />

		<delete dir="${channel-api.bld}/examples/kafka/src" />
		<mkdir  dir="${channel-api.bld}/examples/kafka/src" />

		
		<copy todir="${channel-api.bld}">
			<fileset dir="${channel-api.src}/../">
				<include name="README"/>
			</fileset>
		</copy>

		<copy todir="${channel-api.bld}/examples/kafka/src">
			<fileset dir="${kafka-channel.src}">
			</fileset>
		</copy>
		
		<copy todir="${channel-api.bld}/examples"><!-- Copy the Channel API Kafka example to channel-api folder -->
			<fileset dir="${examples.src}/api">
				<include name="**/StudioProjKafka/**" />
			</fileset>
		</copy>
			
		<!--
		<javadoc access="public" author="false" charset="UTF-8"
		         destdir="${channel-api.bld}/javadocs"
		         encoding="UTF-8" failonerror="true"
		         nodeprecated="false" nodeprecatedlist="false"
		         noindex="false" nonavbar="false"
		         notree="false" private="false"
		         source="1.8"
		         splitindex="true" use="true"
		         version="true" windowtitle="TIBCO BusinessEvents Channel API"
			>
			<doclet name="FilterDoclet" path="${doclets.exp}">
				<param name="-category" value="public-api" />
			</doclet>
			<tag name=".category" description="Category:" enabled="false" />
			<fileset dir="${channel-api.src}/com/tibco/be/custom/channel/" defaultexcludes="yes">
			  <include name="*.java"/>
			  <exclude name="cep_custom_channelVersion.tag" />
			  <exclude name="cep_custom_channelVersion.java" />
			  <exclude name="framework/**/*"/>
			  <exclude name="kafka/**/*"/>
			</fileset>
			<package name="com.tibco.be.custom.channel"/>
		    <doctitle><![CDATA[<h1>TIBCO BusinessEvents Channel API v 5.4</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2000-2016 TIBCO Inc. All Rights Reserved.</i>]]></bottom>
		    <tag name="see" scope="all" description="Please refer"/>
			
			<classpath>
				<path refid="drivers.classpath"/>
				<path location="${channel-api.bld}" />
			</classpath>
		</javadoc>-->

	</target>

	<!-- ================== -->
	<!-- build-liveview -->
	<!-- ================== -->

	<target name="build-liveview" depends="build-base, build-datagrid-tibco">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-liveview" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${liveview.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="liveview.classpath">
			<path refid="emf.classpath" />
			<path refid="as.classpath" />
			<path refid="sb.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${base.bld}" />
			<path location="${datagrid-tibco.bld}" />
		</path>

		<javac srcdir="${liveview.src}" destdir="${liveview.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="liveview.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${liveview.bld}">
			<fileset dir="${liveview.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${liveview.jar}" basedir="${liveview.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.sb.cep_liveviewVersion" />
			</manifest>
		</jar>

	</target>
			
	<!-- ================== -->
	<!-- build-store         -->
	<!-- ================== -->

	<target name="build-store" depends="build-base">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-store" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${store.bld}" />
		<mkdir dir="${lib.exp}" />
		
		<path id="cep.store.classpath">
			<path refid="emf.classpath" />
			<path refid="as3x.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${base.bld}" />
		</path>

		<javac srcdir="${store.src}" destdir="${store.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="cep.store.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${store.bld}">
			<fileset dir="${store.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${store.jar}" basedir="${store.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.sb.cep_storeVersion" />
			</manifest>
		</jar>

	</target>


	<!-- =============== -->
	<!-- build-webstudio -->
	<!-- =============== -->
	<target name="build-webstudio-war-all" depends="set-all, build-studio-rt-common">
		<subant target="clean" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../designtime/webstudio/ui" includes="build.xml" />
		</subant>
		<subant target="war" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../designtime/webstudio/ui" includes="build.xml" />
		</subant>
		<copy todir="${rms.exp}/bin">
			<fileset dir="../designtime/webstudio">
				<include name="WebStudio.war" />
			</fileset>
		</copy>
	</target>

	<target name="build-webstudio-war" depends="set-all, build-studio-rt-common">
		<subant target="war" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../designtime/webstudio/ui" includes="build.xml" />
		</subant>
		<copy todir="${rms.exp}/bin">
			<fileset dir="../designtime/webstudio">
				<include name="WebStudio.war" />
			</fileset>
		</copy>
	</target>

	<target name="build-webstudio" depends="set-all, build-studio-rt-common">
		<subant target="webstudio-jar" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../designtime/webstudio/ui" includes="build.xml" />
		</subant>
	</target>

	<!-- ========= -->
	<!-- build-rms -->
	<!-- ========= -->

	<target name="build-rms" depends="set-all,
                                      build-functions,
                                      build-datagrid-oracle,
                                      build-beq,
                                      build-studio-rt-common,
                                      build-studio-rms-common,
                                      import-javassist,
                                      build-studio-rms-dependencies">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-rms" />
			</then>
			<else>
			</else>
		</if>

		<path id="rms.classpath">
			<path refid="eclipse.classpath" />
			<path refid="emf.classpath" />
			<path refid="tomcat.classpath" />
			
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="antlr.classpath" />
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${security.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${datagrid-oracle.bld}" />
			<path location="${query.bld}" />
			<path location="${engine.bld}" />
			<path location="${drivers.bld}" />
			<path location="${studiort.bld}" />
			<path refid="apache.commons.classpath" />
			<fileset dir="${APACHE_COMMONS_LANG_LIB}">
				<include name="commons-lang3-3.9.jar" />
			</fileset>
			<fileset dir="${env.ECLIPSE_EMF_HOME}/plugins">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${lib.exp}">
				<include name="cep-ui-rms-common.jar" />
			</fileset>
			<fileset dir="${studio.exp}/studio/eclipse/plugins">
				<include name="com.tibco.cep.studio.util_*.jar" />
				<include name="com.tibco.cep.decision.table.common_*.jar" />
				<include name="com.tibco.cep.decision.table.core_*.jar" />
				<include name="com.tibco.cep.studio.common_*.jar" />
				<include name="com.tibco.cep.studio.rms.core_*.jar" />
				<include name="com.tibco.cep.bpmn.common_*.jar" />
			</fileset>

		</path>

		<mkdir dir="${rms.bld}" />
		<mkdir dir="${rms.exp}/lib" />

		<javac srcdir="${rms.src}" destdir="${rms.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${rms.src}" />
			<classpath refid="rms.classpath" />
		</javac>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${rms.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="rms.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${rms.src}" defaultexcludes="true">-->
		<!--<include name="com/tibco/be/rms/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${rms.bld}">
			<fileset dir="${rms.src}">
				<include name="**/*.properties" />
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
				<include name="**/*.xsl" />
			</fileset>
		</copy>

		<jar destfile="${rms.jar}" basedir="${rms.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.rms.cep_rmsVersion" />
			</manifest>
		</jar>

	</target>

	<target name="build-ear-rms-wetb">
		<antcall target="build-ear-wetb">
			<!-- wetb = with-engg-testbase -->
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/modules/rms/bin/RMS.ear" />
			<param name="proj-fqpath" value="${env.SRC_ROOT}/runtime/modules/rms/project/studio-project/BRMS" />
		</antcall>
	</target>

	<target name="build-rms-package" depends="set-all, build-rms, build-ear-rms">
		<if>
			<equals arg1="${env.BE_EDITION}" arg2="Enterprise" />
			<then>
				<subant target="build-rms-all" inheritall="true">
					<property file="studio/build.properties" />
					<property file="${be.basedir}/version.properties" />
					<fileset dir="." includes="studio/studio.xml" />
				</subant>
			</then>
		</if>
	</target>

	<target name="build-studio-rms-common" depends="set-all">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-uirms" />
			</then>
			<else>
			</else>
		</if>
		<subant target="build-studio-rms-common" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<!-- ============ -->
	<!-- build-studio -->
	<!-- ============ -->

	<target name="build-studio" depends="build-studio-rms-dependencies, build-beviews">
		<mkdir dir="${studio.bld}" />
		<mkdir dir="${studio.exp}" />
		<subant target="setup-studio-external-jars" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>

		<copy file="${be.exp}/lib/ext/tpcl/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.bld}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />
		<copy file="${be.exp}/lib/ext/tpcl/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.bld}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />

		<subant target="build-studio-all" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="build-studio-nodep" depends="set-all">
		<mkdir dir="${studio.bld}" />
		<mkdir dir="${studio.exp}" />
		<subant target="setup-studio-external-jars" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>

		<copy file="${be.exp}/lib/ext/tpcl/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.bld}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />
		<copy file="${be.exp}/lib/ext/tpcl/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.bld}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />

		<subant target="build-studio-all" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="build-studio-site-dev" depends="set-all">
		<subant target="build-studio-site-dev" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="build-studio-site-dev-hf" depends="set-all">
		<subant target="build-studio-site-dev-hf" inheritall="true">
			<property file="${be.basedir}/version_hf.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="build-studio-site" depends="set-all">
		<subant target="build-studio-site" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="build-studio-diagramming-feature" depends="set-all, clean-studio, setup-studio-dev, export-studio-dep-diagramming">
	</target>

	<target name="export-studio-dep-diagramming" depends="set-all">
		<mkdir dir="${studio.bld}" />
		<mkdir dir="${studio.exp}" />
		<subant target="build-studio-diagramming-feature" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
		<antcall target="deployTSStudio-version">
			<param name="studio_plugin_version" value="0.0.0" />
		</antcall>

		<copy todir="${env.DEV_SETUP_ROOT}/dev/be/branches/${BE_NAME}.0/dep_diagramming" overwrite="true">
			<fileset dir="${be.exp}/studio/eclipse/plugins">
				<include name="com.tibco.cep.diagramming*.jar" />
			</fileset>
			<fileset dir="${lib.exp}/ext/tpcl/tomsawyer">
				<include name="tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
				<include name="tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
			</fileset>
		</copy>
	</target>

	<target name="build-studio-examples" depends="set-all">
	</target>

	<target name="build-studio-rt-common" depends="build-studio-dependencies-core, build-studio-dependencies-external">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-uirt" />
			</then>
			<else>
			</else>
		</if>
		<subant target="build-studio-rt-common" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="build-studio-bpmn-common" depends="build-studio-rt-common">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-uirt" />
			</then>
			<else>
			</else>
		</if>
		<subant target="build-studio-bpmn-common" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>


	<!-- ================== -->
	<!-- build-docker  -->
	<!-- ================== -->

	<target name="build-docker" depends="build-common, build-functions">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-be-docker" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${be-docker.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="docker.classpath">
			<path refid="tra.classpath" />
			<path refid="functions.classpath" />
			<path refid="bw.classpath" />
			<path refid="emf.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
		</path>

		<javac srcdir="${docker.src}" destdir="${be-docker.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="docker.classpath" />
			</classpath>
			<include name="**/*.java" />
			<include name="**/*.template" />
		</javac>

		<copy file="${docker.src}/util/Dockerfile.template"
			tofile="${be-docker.bld}/com/tibco/be/util/docker/util/Dockerfile.template" overwrite="true" />
		<copy file="${docker.src}/util/Dockerfile_win.template"
					tofile="${be-docker.bld}/com/tibco/be/util/docker/util/Dockerfile_win.template" overwrite="true" />

		<jar destfile="${be-docker.jar}" basedir="${be-docker.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.util.docker.version.cep_dockerVersion" />
			</manifest>
		</jar>
	</target>


	<target name="import-bnd-bundles" depends="set-all">
		<subant target="import-bnd-bundles" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<target name="setup-studio-dev" depends="clean-studio-rms-dependencies, build-studio-rms-dependencies, import-tomsawyer-dev, build-backingstore, build-beviews, build-analytics, build-ftl, build-studiofunctions">
		<subant target="setup-studio-dev" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
		<move file="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dev.jar" tofile="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" />
		<move file="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dev.jar" tofile="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" />
	</target>

	<target name="setup-studio-dep-diagramming" depends="setup-studio-dev, import-studio-dep-diagramming">
	</target>

	<target name="import-studio-dep-diagramming" depends="set-all">
		<copy file="${env.TSI_ROOT}/external/tomsawyer/perspectives/${env.TOMSAWYER_PERSPECTIVES_VERSION}/lib/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />
		<copy file="${env.TSI_ROOT}/external/tomsawyer/perspectives/${env.TOMSAWYER_PERSPECTIVES_VERSION}/lib/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" tofile="${studio.src}/plugins/com.tibco.cep.diagramming/lib/tomsawyer/tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}.jar" overwrite="true" />
		<copy todir="${studio.src}/setup/plugins/com.tibco.cep.diagramming.dep/lib" overwrite="true">
			<fileset dir="${env.DEV_SETUP_ROOT}/dev/be/branches/${BE_VERSION}/dep_diagramming">
				<include name="com.tibco.cep.diagramming_0.0.0.jar" />
			</fileset>
		</copy>
	</target>

	<target name="clean-studio-rms-dependencies" depends="clean-studio-rms-dependencies-core,
                                                             clean-studio-rms-dependencies-modules,
                                                             clean-studio-rms-dependencies-external">
	</target>

	<target name="clean-studio-rms-dependencies-core" depends="clean-kernel,
                                                                clean-base,
                                                                clean-common,
                                                                clean-container,
                                                                clean-drivers,
                                                                clean-functions,
                                                                clean-studiofunctions,
                                                                clean-backingstore,
                                                                clean-datagrid-oracle">
	</target>

	<target name="clean-studio-rms-dependencies-modules" depends="clean-beq,
                                                                    clean-loadbalancer,
                                                                    clean-modules,
                                                                    clean-security,
                                                                    clean-pattern,
                                                                    clean-bpmn,
                                                                    clean-parser,
                                                                    clean-as-channel,
                                                                    clean-hawk-channel">
	</target>

	<target name="clean-studio-rms-dependencies-external" depends="">
	</target>

	<target name="build-studio-dependencies-core" depends="build-kernel,
                                                            build-base,
                                                            build-common,
                                                            build-container,
                                                            build-drivers,
                                                            build-functions,                                                            
                                                            build-backingstore,
                                                            build-datagrid-oracle,
                                                            build-datagrid-tibco">
	</target>

	<target name="build-studio-dependencies-modules" depends="build-beq,
                                                                build-loadbalancer,
                                                                build-modules,
                                                                build-security,
                                                                build-pattern,
                                                                build-bpmn,
                                                                build-parser-src,
                                                                build-as-channel,
		                                                        build-as3-channel,
																build-kinesis-channel,
																build-mqtt-channel,
																build-store,
        														build-sb-channel,
																build-channel-api,
                                                                build-hawk-channel,
																build-liveview">
	</target>

	<target name="build-studio-dependencies-external" depends="import-antlr,
                                                                import-javassist,
                                                                import-poi,
                                                                import-as,
                                                                import-apache-commons,
                                                                import-cep-tpcl,
                                                                import-cep-tra,
                                                                import-log4j,
    															import-slf4j,
                                                                import-tomcat,
                                                                import-tomsawyer-dep,
    															import-jackson,
																import-jaxb,
																import-javax-activation">
	</target>

	<target name="build-studio-rms-dependencies" depends="set-all,
                                                          build-studio-dependencies-core,
                                                          build-studio-dependencies-modules,
                                                          build-studio-dependencies-external">
	</target>

	<target name="publish-features-bundles" depends="build-studio">
		<subant target="publish-features-bundles" inheritall="true">
			<property file="studio/build.properties" />
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>
	<!-- =========== -->
	<!-- build-views -->
	<!-- =========== -->

	<target name="build-beviews" depends="set-BE_DATE,build-common,build-kernel,build-security,build-drivers,build-backingstore,build-query,build-studio-rt-common">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-beviews" />
			</then>
			<else>
			</else>
		</if>
		<ant dir="views" antfile="beviewsbuild.xml" target="package-all" inheritall="true" inheritrefs="true" />
	</target>

	<target name="build-beviews-dev" depends="build-beviews, deployTSViews">
	</target>

	<!--&lt;!&ndash; =============== &ndash;&gt;-->
	<!--&lt;!&ndash; build-fdg-props &ndash;&gt;-->
	<!--&lt;!&ndash; =============== &ndash;&gt;-->

	<!--<target name="build-fdg-props" depends="set-all">-->

	<!--<mkdir dir="${fdg.exp}" />-->

	<!--<javac srcdir="${fdg.src}" destdir="${fdg.exp}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">-->
	<!--<classpath refid="stringtemplate.classpath" />-->
	<!--<include name="**/FunctionHelpPropertiesDoclet.java" />-->
	<!--</javac>-->

	<!--<copy todir="${fdg.exp}" file="${fdg.src}/tooltip.st" />-->

	<!--</target>-->

	<!-- ========= -->
	<!-- build-fdg -->
	<!-- ========= -->

	<target name="build-fdg" depends="set-all">

		<mkdir dir="${fdg.exp}" />

		<copy todir="${fdg.exp}">
			<fileset dir="${fdg.src}" includes="*.st" />
		</copy>

		<javac srcdir="${fdg.src}" destdir="${fdg.exp}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="stringtemplate.classpath" />
				<path refid="xdoclet.classpath" />
				<path location="${common.bld}" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.io.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.net.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.util.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.ae2xsd.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.sdk.eclipse_5.60.100.002.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.soap.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.transform.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.ws.wsdl.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.xml.xdata.eclipse_5.60.100.001.jar" />
				<pathelement path="${BW_LIB}/com.tibco.tibcoxml.lex.yap.eclipse_5.60.100.001.jar" />
			</classpath>
			<include name="Function*.java" />
		</javac>

	</target>

	<!-- ============== -->
	<!-- build-fdg-hawk -->
	<!-- ============== -->

	<target name="build-fdg-hawk" depends="build-container">

		<mkdir dir="${fdg.exp}" />

		<javac srcdir="${fdghawk.src}" destdir="${fdg.exp}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${container.bld}" />
				<path refid="hawk.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

	</target>


	<!-- ================== -->
	<!-- build-filterdoclet -->
	<!-- ================== -->

	<target name="build-filterdoclet" depends="set-all">

		<mkdir dir="${doclets.exp}" />

		<javac srcdir="${filterdoclet.src}" destdir="${doclets.exp}" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<include name="**/*.java" />
		</javac>

	</target>

	<!-- ========= -->
	<!-- build-ftl -->
	<!-- ========= -->

	<target name="build-ftl" depends="set-all,build-common">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-ftl" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${ftl.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="ftl-channel.classpath">
			<path refid="ftl.classpath" />
			<path refid="tra.classpath"  />
			<path refid="tpcl.classpath"  />

			<pathelement path="${common.jar}" />
			<pathelement path="${kernel.jar}" />
			<!--			<path location="${TXML_LIB}/TIBCOxml.jar" />-->
		</path>

		<javac srcdir="${ftl.src}" destdir="${ftl.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="ftl-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
			<exclude name="**/drivers.xml*" />
		</javac>
		<copy todir="${ftl.bld}">
			<fileset dir="${ftl.src}">
				<exclude name="**/*.java" />
				<!--<exclude name="/com/tibco/cep/driver/**/*" />
				<exclude name="**/*.tag" />
				<exclude name="**/drivers.xml*" />
				<exclude name="**/com/tibco/cep/functions/channel/ftl/FTLChannelFunctions.class" />
				<exclude name="**/com/tibco/cep/functions/channel/ftl/FTLChannelFunctionsImpl.class" />-->
			</fileset>
		</copy>
		
		<!--<delete dir="${ftl.bld}/com/tibco/cep/driver" failonerror="false" />
		<delete file="${ftl.bld}/com/tibco/cep/functions/channel/ftl/FTLChannelFunctions.class" failonerror="false"/>
		<delete file="${ftl.bld}/com/tibco/cep/functions/channel/ftl/FTLChannelFunctionsImpl.class" failonerror="false"/>-->

		<jar destfile="${cep-ftl.jar}" basedir="${ftl.bld}">
			<manifest>
				<attribute name="Specification-Title"    value="ftlchannel"                    />
				<attribute name="Specification-Version"  value="${BE_VERSION}"                 />
				<attribute name="Specification-Vendor"   value="${BE_COMPANY}"                 />
				<attribute name="Implementation-Title"   value="ftlchannel"                    />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor"  value="${BE_COMPANY}"                 />
				<attribute name="Main-Class"             value="com.tibco.cep.functions.channel.ftl.cep_ftlVersion" />
			</manifest>
		</jar>
	</target>

	<!-- ================= -->
	<!-- build-ftl-example -->
	<!-- ================= -->
	<target name="build-ftl-example" depends="set-all,build-functions">
		<path id="ftl-channel.classpath">
			<path refid="ftl.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<pathelement path="${common.jar}" />
			<pathelement path="${kernel.jar}" />
			<pathelement path="${functions.jar}" />
		</path>
		<!--<mkdir dir="${ftl-example.bld}"/>
		<javac srcdir="${ftl-example.src}" destdir="${ftl-example.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="ftl-channel.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>
		<copy todir="${ftl-example.bld}">
			<fileset dir="${ftl-example.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
			</fileset>
		</copy>
		<jar destfile="${ftl-channel-java.jar}" basedir="${ftl-example.bld}">
			<manifest>
				<attribute name="Specification-Title" value="ftlchannel demo" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="ftlchannel demo" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
			</manifest>
		</jar>-->
	</target>


	<target name="build-cep-metric" depends="set-all,build-functions">
		<jar destfile="${be.exp}/lib/cep-metric.jar" basedir="${metricengine.bld}" includes="**/*.class" excludes="**/*.java">
		</jar>
	</target>

	<!-- ============= -->
	<!-- build-dochtml -->
	<!-- ============= -->

	<target name="build-dochtml" depends="build-all-core,build-rms,build-beviews,build-fdg">

		<property name="functionsdoc.exp" value="${api.exp}/../functions" />

		<mkdir dir="${functionsdoc.exp}" />

		<copy todir="${functionsdoc.exp}">
			<fileset dir="${fdg.src}">
				<include name="**/*.css" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
			</fileset>
		</copy>

		<if>
			<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />
			<then>
				<echo message="Writing function docs to: ${functionsdoc.exp}"/>
				<java
	                        classname="FunctionsDocGenerator"
	                        dir="${functionsdoc.exp}/.."
	                        failonerror="true"
	                        fork="true"
	                        maxmemory="256m">
					<classpath>
						<path location="${fdg.exp}"/>
						<path refid="stringtemplate.classpath" />
						<path refid="log4j.classpath" />
						<path refid="functions.classpath" />
						<path refid="query.classpath"/>
						<path refid="modules.classpath"/>
						<path refid="rms.classpath"/>
						<!-- <path refid="datagrid-oracle.classpath"/> -->
						<path refid="jdbc.classpath" />
						<path path="${as-channel.jar}" />
						<path path="${bebw.jar}" />
						<path path="${bpmn.jar}" />
						<path path="${drivers.jar}" />
						<path path="${hawk-channel.jar}" />
						<path path="${loadbalancer.jar}" />
						<path path="${modules.jar}" />
						<path path="${pattern.jar}" />
						<path path="${query.jar}" />
						<path path="${rms.jar}" />
						<path path="${studiort.jar}" />
						<!-- <path path="${metricengine.bld}" /> -->
						<path path="${be.exp}/views/lib/cep-metric.jar" />
						<path path="${cep-ftl.jar}" />
						<path path="${analytics.jar}" />
						<path path="${functions.jar}" />
						<path path="${security.jar}" />
						<path path="${studiofunctions.jar}"/>
						<path path="${store.jar}"/>
					</classpath>
					<arg value="${functionsdoc.exp}" />
				</java>
			</then>
		</if>
	</target>


	<!-- ============ -->
	<!-- build-docmif -->
	<!-- ============ -->

	<target name="build-docmif" depends="build-docmif-fn,build-docmif-hawk">
	</target>

	<!-- =============== -->
	<!-- build-docmif-fn -->
	<!-- =============== -->

	<target name="build-docmif-fn" depends="build-fdg, build-functions">

		<!--<mkdir dir="${fdg.exp}/mif"/> -->

		<!--<java -->
		<!--maxmemory="128m" -->
		<!--classname="GenerateMif2" -->
		<!--fork="true"> -->
		<!--<classpath> -->
		<!--<path location="${common.bld}"/> -->
		<!--<path location="${engine.bld}"/> -->
		<!--<path location="${kernel.bld}"/> -->
		<!--<path location="${functions.bld}"/> -->
		<!--<path refid="tangosol.classpath"/> -->
		<!--<path refid="xdoclet.classpath"/> -->
		<!--<path refid="tra.classpath"/> -->
		<!--<path refid="tpcl.classpath"/> -->
		<!--<path location="${fdg.exp}"/> -->
		<!--</classpath> -->
		<!--<arg value="-in=${functions.src}/com/tibco/be/functions"/> -->
		<!--<arg value="-out=${fdg.exp}/mif"/> -->
		<!--<arg value="-template=${env.SRC_ROOT}/runtime/modules/tools/docs/FunctionsDocGenerator/templates/template2.mif"/> -->
		<!--<arg value="-mif=true"/> -->
		<!--</java> -->

	</target>

	<!-- ================= -->
	<!-- build-docmif-hawk -->
	<!-- ================= -->

	<target name="build-docmif-hawk" depends="build-fdg-hawk, build-container">

		<mkdir dir="${fdg.exp}/mif/hawk" />

		<java maxmemory="128m" classname="com.tibco.cep.container.standalone.hawk.GenerateHawkMethodMifs" fork="true">
			<classpath>
				<path location="${common.bld}" />
				<path location="${container.bld}" />
				<path location="${kernel.bld}" />
				<path location="${functions.bld}" />
				<path location="${studiofunctions.bld}" />
				<path location="${datagrid-oracle.bld}" />
				<path refid="hawk.classpath" />
				<path refid="rv.classpath" />
				<path refid="tra.classpath" />
				<path refid="tpcl.classpath" />
				<path location="${fdg.exp}" />
			</classpath>
			<arg value="${fdg.exp}/mif/hawk" />
			<arg value="${env.SRC_ROOT}/runtime/modules/tools/docs/HawkFunctionsDocGenerator/templates/HawkMethod.mif" />
			<arg value="1674000" />
		</java>

	</target>

	<!-- =============== -->
	<!-- build-container -->
	<!-- =============== -->

	<target name="build-container" depends="build-common">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-container" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${container.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac destdir="${container.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${container.src}" />
			<src path="${containermodule.src}" />
			<classpath>
				<path refid="hawk.classpath" />
				<path refid="tra.classpath" />
				<path refid="tpcl.classpath" />
				<path refid="rv.classpath" />
				<path refid="jdbc.classpath" />
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${engine.bld}" />
				<path location="${drivers.bld}" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${container.bld}">
			<fileset dir="${container.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${container.jar}" basedir="${container.bld}">
			<manifest>
				<attribute name="Specification-Title" value="becontainerplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="becontainerplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Main-Class" value="com.tibco.cep.container.cep_containerVersion" />
			</manifest>
		</jar>
	</target>

	<!-- ============ -->
	<!-- build-kernel -->
	<!-- ============ -->

	<target name="build-kernel" depends="set-all">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-kernel" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${kernel.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${kernel.src}" destdir="${kernel.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
			</classpath>
			<include name="**/*.java" />
		</javac>

		<delete file="${kernel.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${kernel.bld}">
			<fileset dir="${kernel.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${kernel.jar}" basedir="${kernel.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.kernel.cep_kernelVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ========== -->
	<!-- build-base -->
	<!-- ========== -->

	<target name="build-base" depends="set-all, build-kernel">
		<mkdir dir="${base.bld}" />

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-base" />
			</then>
			<else>
			</else>
		</if>

		<javac srcdir="${base.non-be.src}" destdir="${base.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
		</javac>

		<javac srcdir="${base.be.src}" destdir="${base.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path location="${kernel.bld}" />
				<path refid="apache.commons.classpath" />
			</classpath>
			<include name="**/*" />
		</javac>

		<jar destfile="${base.jar}" basedir="${base.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.cep_baseVersion" />
				<attribute name="Can-Redefine-Classes" value="true" />
				<attribute name="Premain-Class" value="com.tibco.cep.runtime.service.loader.InstrumentLoader" />
			</manifest>
		</jar>
	</target>

	<!-- ===================== -->
	<!-- build-datagrid-oracle -->
	<!-- ===================== -->

	<target name="build-datagrid-oracle" depends="set-all, build-common, build-base, build-pattern, build-backingstore">
		<mkdir dir="${datagrid-oracle.bld}" />

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-datagrid-oracle" />
			</then>
			<else>
			</else>
		</if>

		<path id="datagrid-oracle.classpath">
			<path refid="emf.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="antlr.classpath" />
			<path refid="stringtemplate.classpath" />
			<path refid="javassist.classpath" />
			<path refid="tomsawyer.rel.classpath" />
			<path refid="tangosol.classpath" />
			<path refid="apache.commons.classpath" />
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${engine.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${backingstore.bld}" />
		</path>

		<javac srcdir="${datagrid-oracle.src}" destdir="${datagrid-oracle.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath refid="datagrid-oracle.classpath" />
			<exclude name="**/_retired_/**" />
		</javac>

		<copy todir="${datagrid-oracle.bld}">
			<fileset dir="${datagrid-oracle.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${datagrid-oracle.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="datagrid-oracle.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${datagrid-oracle.src}" defaultexcludes="true">-->
		<!--<include name="com/tibco/be/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<jar destfile="${datagrid-oracle.jar}" basedir="${datagrid-oracle.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.cep_datagrid_oracleVersion" />
			</manifest>
		</jar>
	</target>

	<!-- ============ -->
	<!-- build-common -->
	<!-- ============ -->
	<!-- <target name="build-common" depends="build-kernel,build-parser-src,build-fdg-props"> -->
	<target name="build-common" depends="build-kernel, build-base">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-common" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${common.bld}" />
		<mkdir dir="${lib.exp}" />

		<copy todir="${functions_all.bld}">
			<fileset dir="${functions.src}">
				<exclude name="**/*.catalog" />
				<exclude name="**/*.properties" />
				<exclude name="**/*.tag" />
				<exclude name="**/*.xml" />
			</fileset>
		</copy>
		<copy todir="${modules_functions.bld}">
			<fileset dir="${modules_functions.src}">
				<include name="**/*.java" />
			</fileset>
		</copy>

		<javac srcdir="${common.src}" destdir="${common.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="bw.classpath" />
				<path refid="emf.classpath" />
				<path refid="tra.classpath" />
				<path refid="log4j.classpath" />
				<path refid="tpcl.classpath" />
				<path refid="jdbc.classpath" />
				<path refid="rv.classpath" />
				<path refid="bdbje.classpath" />
				
				<path refid="javassist.classpath" />
				<path refid="apache.commons.classpath" />
				<path refid="antlr.classpath" />
				<path refid="as.classpath" />
				<path refid="jackson.classpath" />
				<path location="${kernel.bld}" />
				<path location="${base.bld}" />
			</classpath>
			<exclude name="**/oracle/**" />
			<exclude name="**/docker/**" />
			<exclude name="**/_retired_/**" />
			<include name="**/*.ecore" />
			<include name="**/*.genmodel" />
			<include name="**/*.java" />
			<include name="**/*.xml" />
			<include name="**/*.xsd" />
		</javac>
		<!-- parser has been moved to eclipse plugins
        <javac srcdir="${parser.bld}"
               destdir="${common.bld}"
               debug="on"
               source="1.6"
               encoding="iso-8859-1">
            <classpath>
                <path refid="tra.classpath"    />
                <path refid="tpcl.classpath"   />
                <path refid="jdk.classpath"    />
                <path location="${kernel.bld}" />
                <path location="${common.bld}" />
            </classpath>
            <exclude name="**/oracle/**"/>
            <include name="**/*.java"/>
        </javac>
        -->
		<delete file="${common.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<mkdir dir="${common.gen.src}" />
		<rmic base="${common.bld}" includes="**/management/**/Remote*Impl.class" sourcebase="${common.gen.src}" />

		<copy todir="${common.bld}">
			<fileset dir="${common.src}">
				<exclude name="**/oracle/**" />
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name="**/Dockerfile*.template" />
				<exclude name=".classpath" />
				<exclude name=".project" />
				<exclude name="**/functions-help.properties" />
			</fileset>
			<!-- parser has been moved to eclipse plugins
            <fileset dir="${parser.bld}">
                <exclude name="**/oracle/**"/>
                <exclude name="**/*.java"/>
            </fileset>
            -->
		</copy>

		<delete dir="${common.bld}/java" />

		<delete dir="${common.bld}/com/tibco/be/util/docker" />

		<jar destfile="${common.jar}" basedir="${common.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.cep_commonVersion" />
			</manifest>
		</jar>
		<!--
        <manifest>
            <attribute name="Specification-Title"    value="becommonplugin"                />
            <attribute name="Specification-Version"  value="${BE_VERSION}"                 />
            <attribute name="Specification-Vendor"   value="${BE_COMPANY}"                 />
            <attribute name="Implementation-Title"   value="becommonplugin"                />
            <attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
            <attribute name="Implementation-Vendor"  value="${BE_COMPANY}"                 />
            <attribute name="Main-Class"             value="com.tibco.cep.cep_commonVersion"/>
            <attribute name="Can-Redefine-Classes"   value="true"                           />
            <attribute name="Premain-Class" value="com.tibco.cep.runtime.service.loader.InstrumentLoader"/>
        </manifest>
        -->

	</target>


	<!-- ==================== -->
	<!-- build-datagrid-tibco -->
	<!-- ==================== -->

	<target name="build-datagrid-tibco" depends="set-all, build-common, build-base, build-functions, build-pattern, build-backingstore">
		<mkdir dir="${datagrid-tibco.bld}" />

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-datagrid-tibco" />
			</then>
			<else>
			</else>
		</if>

		<echo message="${AS_LIB}" />

		<javac srcdir="${datagrid-tibco.src}" destdir="${datagrid-tibco.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="emf.classpath" />
				<path refid="as.classpath" />
				<path refid="tra.classpath" />
				<path refid="tpcl.classpath" />
				<path refid="antlr.classpath" />
				<path refid="stringtemplate.classpath" />
				<path refid="javassist.classpath" />
				<path refid="tomsawyer.rel.classpath" />
				<path refid="tangosol.classpath" />
				<path refid="apache.commons.classpath" />
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${engine.bld}" />
				<path location="${drivers.bld}" />
				<path location="${base.bld}" />
				<path location="${bpmn.bld}" />
				<path location="${functions.bld}" />
				<path location="${studiofunctions.bld}" />
				<path location="${datagrid-oracle.bld}" />
				<path location="${backingstore.bld}" />
			</classpath>
		</javac>

		<jar destfile="${datagrid-tibco.jar}" basedir="${datagrid-tibco.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.as.cep_datagrid_tibcoVersion" />
			</manifest>
		</jar>
	</target>

	<!-- ============== -->
	<!-- build-security -->
	<!-- ============== -->

	<target name="build-security" depends="set-all,build-common,build-kernel">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-security" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${security.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="security.classpath">
			<path refid="tra.classpath" />
			<path refid="httpcomponents.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path refid="apache.commons.classpath" />
			<path refid="jaxb.classpath" />
			<path refid="javax.activation.classpath" />
		</path>


		<javac srcdir="${security.src}" destdir="${security.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath refid="emf.classpath" />
			<classpath refid="security.classpath" />
			<include name="**/*.java" />
		</javac>

		<delete file="${security.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${security.bld}">
			<fileset dir="${security.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${security.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="security.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${security.src}" defaultexcludes="true">-->
		<!--<include name="com/tibco/cep/security/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<jar destfile="${security.jar}" basedir="${security.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.security.cep_securityVersion" />
			</manifest>
		</jar>
	</target>


	<!-- ============= -->
	<!-- build-drivers -->
	<!-- ============= -->

	<target name="build-drivers" depends="build-common">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-drivers" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${drivers.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${drivers.src}" destdir="${drivers.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="tomcat.classpath" />
				<path refid="tra.classpath" />
				<path refid="tpcl.classpath" />
				<path refid="rv.classpath" />
				<path refid="hawk.classpath" />
				<path refid="httpcomponents.classpath" />
				<path location="${base.bld}" />
				<path location="${common.bld}" />
				<path location="${kernel.bld}" />
				<path refid="emf.classpath" />
				<path refid="apache.commons.classpath" />
				<path refid="jackson.classpath" />
			</classpath>
			<include name="**/*.java" />
			<exclude name="**/Tomcat55.java" />
		</javac>

		<delete file="${drivers.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<path id="drivers.classpath">
			<path refid="tomcat.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="rv.classpath" />
			<path refid="hawk.classpath" />
			<path refid="httpcomponents.classpath" />
			<path location="${base.bld}" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${drivers.bld}" />
			<path refid="antlr.classpath" />
			<path refid="tra.classpath" />
			<path refid="emf.classpath" />
		</path>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${drivers.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="drivers.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${drivers.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/driver/ancillary/tcp/catalog/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${drivers.bld}">
			<fileset dir="${drivers.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${drivers.jar}" basedir="${drivers.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.driver.cep_driversVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ============= -->
	<!-- build-modules -->
	<!-- ============= -->

	<target name="build-modules" depends="build-common">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-modules" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${modules.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="modules.classpath">
			<path refid="oracle.classpath" />
			<path refid="poi.classpath" />
			<path refid="jide.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="bw.classpath" />
			<path refid="rv.classpath" />
			<path refid="hawk.classpath" />
			<path refid="jdbc.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${datagrid-oracle.bld}" />
			<path location="${drivers.bld}" />
			<path location="${backingstore.bld}" />
		</path>

		<javac srcdir="${modules.src}" destdir="${modules.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath refid="modules.classpath" />
			<exclude name="com/tibco/cep/modules/db/sig/**" />
			<include name="**/*.java" />
		</javac>

		<copy todir="${modules.bld}">
			<fileset dir="${modules.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${modules.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="modules.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${modules.src}" defaultexcludes="true">-->
		<!--<include name="com/tibco/cep/modules/db/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<jar destfile="${modules.jar}" basedir="${modules.bld}">
			<manifest>
				<attribute name="Specification-Title" value="bemodulesplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="bemodulesplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Main-Class" value="com.tibco.cep.modules.cep_modulesVersion" />
			</manifest>
		</jar>

	</target>

	<!-- =============== -->
	<!-- build-migration -->
	<!-- =============== -->

	<target name="build-migration" depends="build-backingstore, build-container">

		<mkdir dir="${migration.bld}" />
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-migration" />
			</then>
			<else>
			</else>
		</if>

		<javac srcdir="${migration.src}" destdir="${migration.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="tra.classpath" />
				<path refid="tangosol.classpath" />
				<path refid="oracle.classpath" />
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${engine.bld}" />
				<path location="${backingstore.bld}" />
				<path location="${drivers.bld}" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<!-- If sources are needed, we need to deliver them separately -->
		<copy todir="${migration.bld}">
			<fileset dir="${migration.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
			</fileset>
		</copy>

		<jar destfile="${migration.jar}" basedir="${migration.bld}">
			<manifest>
				<attribute name="Specification-Title" value="cepmigrationplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="cepmigrationplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Main-Class" value="com.tibco.be.migration.cep_migrationVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ================== -->
	<!-- build-backingstore -->
	<!-- ================== -->

	<target name="build-backingstore" depends="build-container, build-drivers">

		<mkdir dir="${backingstore.bld}" />
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-backingstore" />
			</then>
			<else>
			</else>
		</if>

		<javac srcdir="${backingstore.src}" destdir="${backingstore.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<!--path refid="tomcat.classpath" / -->
				<path refid="jdbc.classpath" />
				<path refid="oracle.classpath" />
				<path refid="tra.classpath" />
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${drivers.bld}" />
				<path location="${engine.bld}" />
				<path location="${base.bld}" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<path id="backingstore.classpath">
			<pathelement path="${lib.exp}/cep-common.jar" />
			<pathelement path="${lib.exp}/cep-kernel.jar" />
		</path>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${backingstore.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="backingstore.classpath" />-->
		<!--<classpath refid="jdbc.classpath" />-->
		<!--<classpath refid="oracle.classpath" />-->
		<!--<classpath refid="tra.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${backingstore.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/be/oracle/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${backingstore.bld}">
			<fileset dir="${backingstore.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
			</fileset>
		</copy>

		<!-- Convert project class path to string property -->
		<pathconvert property="mf.classpath" pathsep=" ">
			<path refid="backingstore.classpath" />
			<mapper type="flatten" />
		</pathconvert>

		<jar destfile="${backingstore.jar}" basedir="${backingstore.bld}">
			<manifest>
				<attribute name="Specification-Title" value="bebackingstoreplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="bebackingstoreplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Main-Class" value="com.tibco.be.jdbcstore.be_jdbcstoreVersion" />
				<attribute name="Class-Path" value="${mf.classpath}" />
			</manifest>
		</jar>

		<!-- Until the BackingStore functionality is a supported part of the product this jar file
             will reside in the targeted examples folder -->
		<!--
        <mkdir dir="${backingStore.exp}"/>
        <copy todir="${backingStore.exp}">
            <fileset dir="${lib.exp}">
                <include name="cep-backingstore.jar"/>
            </fileset>
        </copy>
        -->
	</target>

	<!-- ====================== -->
	<!-- build-backingstore-bdb -->
	<!-- ====================== -->

	<target name="build-backingstore-bdb" depends="build-container, build-drivers, build-datagrid-tibco">

		<mkdir dir="${backingstore-bdb.bld}" />
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-backingstore-bdb" />
			</then>
			<else>
			</else>
		</if>

		<javac srcdir="${backingstore-bdb.src}" destdir="${backingstore-bdb.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="jdbc.classpath" />
				<path refid="oracle.classpath" />
				<path refid="tra.classpath" />
				<path refid="as.classpath" />
				<path location="${kernel.bld}" />
				<path location="${common.bld}" />
				<path location="${drivers.bld}" />
				<path location="${engine.bld}" />
				<path location="${base.bld}" />
				<path location="${datagrid-tibco.bld}" />
				<path refid="bdbje.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${backingstore-bdb.bld}">
			<fileset dir="${backingstore-bdb.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
			</fileset>
		</copy>

		<path id="backingstore-bdb.classpath">
			<pathelement path="${lib.exp}/cep-common.jar" />
			<pathelement path="${lib.exp}/cep-kernel.jar" />
		</path>

		<pathconvert property="mf.classpath" pathsep=" ">
			<path refid="backingstore.classpath" />
			<mapper type="flatten" />
		</pathconvert>

		<jar destfile="${backingstore-bdb.jar}" basedir="${backingstore-bdb.bld}">
			<manifest>
				<attribute name="Specification-Title" value="bebackingstoreplugin" />
				<attribute name="Specification-Version" value="${BE_VERSION}" />
				<attribute name="Specification-Vendor" value="${BE_COMPANY}" />
				<attribute name="Implementation-Title" value="bebackingstorebdbplugin" />
				<attribute name="Implementation-Version" value="${BE_VERSION}.${env.BE_BUILD}" />
				<attribute name="Implementation-Vendor" value="${BE_COMPANY}" />
				<attribute name="Main-Class" value="com.tibco.cep.persister.be_bdbVersion" />
				<attribute name="Class-Path" value="${mf.classpath}" />
			</manifest>
		</jar>
	</target>

	<!-- ========== -->
	<!-- build-bpmn -->
	<!-- ========== -->

	<target name="build-bpmn" depends="build-common, build-functions, build-datagrid-tibco, build-studio-bpmn-common">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-bpmn" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${bpmn.bld}" />
		<mkdir dir="${lib.exp}" />

		<delete file="${bpmn.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<path id="bpmn.classpath">
			<path refid="emf.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="antlr.classpath" />
			<path refid="stringtemplate.classpath" />
			<path refid="javassist.classpath" />
			<path refid="tomsawyer.rel.classpath" />
			<path refid="rv.classpath" />
			<path refid="httpcomponents.classpath" />
			<path refid="apache.commons.classpath" />
			<path refid="javax.activation.classpath" />
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${engine.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${studiort.bld}" />
			<path location="${bpmncommon.bld}" />
		</path>

		<javac srcdir="${bpmn.src}" destdir="${bpmn.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${bpmn.src}" />
			<classpath refid="bpmn.classpath" />
			<exclude name="**/_retired_/**" />
		</javac>

		<!--
        <if>
            <equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />
            <then>
                <javadoc destdir="${bpmn.bld}" failonerror="true" useexternalfile="true">
                    <classpath refid="bpmn.classpath" />
                    <doclet name="FunctionHelpPropertiesDoclet">
                        <path refid="stringtemplate.classpath" />
                        <path refid="antlr.classpath" />
                        <path path="${fdg.exp}" />
                    </doclet>
                    <packageset dir="${bpmn.src}" defaultexcludes="yes">
                        <include name="com/tibco/cep/bpmn/demo/api/**" />
                    </packageset>
                </javadoc>
            </then>
        </if>
-->
		<copy todir="${bpmn.bld}">
			<fileset dir="${bpmn.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
				<include name="**/*.stg" />
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<jar destfile="${bpmn.jar}" basedir="${bpmn.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.bpmn.cep_bpmnVersion" />
			</manifest>
		</jar>


	</target>

	<!-- ========================= -->
	<!-- build-customfuncs-example -->
	<!-- ========================= -->
	<!--
    <target name="build-customfuncs-example" depends="set-all">

        <if>
            <equals arg1="${env.TAG_FILTERING}" arg2="on" />
            <then>
                <antcall target="pre-functions" />
                <antcall target="pre-studiofunctions" />
                <antcall target="pre-datagrid-oracle" />
            </then>
            <else>
            </else>
        </if>

        <mkdir dir="${custom_functions.bld}" />
        <mkdir dir="${exm.exp}/standard/CustomFunctions" />

        <javac srcdir="${custom_functions.src}" destdir="${custom_functions.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
        	<compilerarg line="${env.COMPILER_LINE_ARG}" />
        	<classpath>
                <path refid="tra.classpath" />
                <path refid="rv.classpath" />
                <path refid="tpcl.classpath" />
                <path location="${common.bld}" />
                <path location="${kernel.bld}" />
                <path location="${functions.bld}" />
                <path location="${studiofunctions.bld}" />
                <path location="${datagrid-oracle.bld}" />
                <path location="${drivers.bld}" />
            </classpath>
            <include name="**/*.java" />
        </javac>

        <copy todir="${custom_functions.bld}">
            <fileset dir="${custom_functions.src}">
                <exclude name="**/*.txt" />
            </fileset>
        </copy>

        <jar destfile="${custom_functions.jar}" basedir="${custom_functions.bld}" />

        <copy todir="${exm.exp}/CustomFunctions">
            <fileset dir="${custom_functions.src}">
                <include name="**/*.txt" />
            </fileset>
        </copy>
    </target>
	-->
	<!-- =================== -->
	<!-- build-query-example -->
	<!-- =================== -->

	<target name="build-query-example" depends="set-all">
		<mkdir dir="${query.example.bld}" />
		<mkdir dir="${exm.exp}/event_stream_processing/bql" />

		<path id="query.example.classpath">
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${engine.bld}" />
			<path location="${drivers.bld}" />
			<path location="${interpreter.bld}" />
			<path location="${query.bld}" />
		</path>

		<javac srcdir="${query.example.src}" destdir="${query.example.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath refid="query.example.classpath" />

		</javac>

		<jar destfile="${query.example.jar}" basedir="${query.example.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.query.client.console.swing.BQLConsole" />
			</manifest>
		</jar>
	</target>

	<!-- ================== -->
	<!-- build-all-examples -->
	<!-- ================== -->

	<target name="build-all-examples" depends="set-all,build-ear-examples">
		<mkdir dir="${exm.exp}" />

		<!-- [TODO] <antcall target="build-customfuncs-example"/> -->
		<antcall target="build-query-example" />
		<antcall target="build-ftl-example" />

		<copy verbose="${verbose}" todir="${exm.exp}">
			<fileset dir="${examples.src}">
				<include name="_resources/**" />
				<include name="standard/**" />
				<include name="data_modeling/**" />
				<include name="decision_manager/**" />
				<include name="event_stream_processing/**" />
				<exclude name="event_stream_processing/bql/src/**" />
				<include name="process/**" />
				<include name="liveview/**" />
				<include name="views/**" />
				<!--<exclude name="**/FTLChannel/**" />-->
				<exclude name="**/.svn" />
			</fileset>
		</copy>


		<!-- <antcall target="build-${env.BE_EDITION}-examples"/> -->
	</target>

	<target name="build-ear-examples">
		<echo message="Depedency is not set, make sure build-all target is executed before build-ear-examples"/>
		<!--data_modeling-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/data_modeling/DBConcepts/COM.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/data_modeling/DBConcepts/CustomerOrderManagement" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/data_modeling/StateMachineInheritance/SMInheritance.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/data_modeling/StateMachineInheritance/StateMachineInheritance" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/data_modeling/StateMachineMultiEngine/SMMultiEngine.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/data_modeling/StateMachineMultiEngine/StateMachineMultiEngine" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--decision_manager-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/decision_manager/CreditCardApplication/CreditCardApplication.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/decision_manager/CreditCardApplication/CreditCardApplication" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--event_stream_processing-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/event_stream_processing/CollocatedInferenceAndQuery/CollocatedInferenceAndQuery.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/event_stream_processing/CollocatedInferenceAndQuery/CollocatedInferenceAndQuery" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/event_stream_processing/QueryESP/QueryESP.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/event_stream_processing/QueryESP/QueryESPProject" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/event_stream_processing/QueryTrades/QueryTrades.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/event_stream_processing/QueryTrades/QueryTradesProject" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/event_stream_processing/PatternMatcher/pattern_server.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/event_stream_processing/PatternMatcher/pattern_server" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--process-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/process/SimpleProcess/SimpleProcess.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/process/SimpleProcess/SimpleProcess" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--standard-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/ASChannel/ASChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/ASChannel/ASChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/ASChannelSimple/ASChannelSimple.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/ASChannelSimple/ASChannelSimple" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/BEUnitTest/BEUnitTest.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/BEUnitTest/BEUnitTest" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/CatalogFunctions/CatalogFunctions.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/CatalogFunctions/CatalogFunctions" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/ConceptRelationships/ConceptRelationships.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/ConceptRelationships/ConceptRelationships" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/CustomFunctionsExample/CustomFunctionsExample.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/CustomFunctionsExample/CustomFunctionsExample" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/EventCorrelation/EventCorrelationExample.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/EventCorrelation/EventCorrelationRepo" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/Exceptions/ExceptionsProject.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/Exceptions/ExceptionsProject" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FraudDetection/fd.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FraudDetection/FraudDetection" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FraudDetectionCache/fdcache.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FraudDetectionCache/FraudDetectionCache" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FraudDetectionStreamBase/fdsb.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FraudDetectionStreamBase/FraudDetectionStreamBase" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FraudDetectionStore/fdstore.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FraudDetectionStore/FraudDetectionStore" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/HawkChannel/HawkChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/HawkChannel/HawkChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/HTTPChannel/HTTPChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/HTTPChannel/HTTPChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/InternalTimeEvent/InternalTimeEvent.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/InternalTimeEvent/InternalTimeEvent" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/JMSChannel/JMSChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/JMSChannel/JMSChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/LoadBalancer/adhocrouting.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/LoadBalancer/AdhocRouting" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/LoadBalancer/simpledemo.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/LoadBalancer/SimpleDemo/SimpleDemo" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/Locking/Locking.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/Locking/Locking" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/MissManners/MissMannersProjectMissManners_API.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/MissManners/MissMannersProject" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/Monitoring/MonitoringRepo.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/Monitoring/MonitoringRepo" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/MultipleSessionsAndLocalChannel/MultipleSessionsAndLocalChannelProject.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/MultipleSessionsAndLocalChannel/MultipleSessionsAndLocalChannelProject" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/OneExternalEventAndTwoConcepts/OneExternalEventAndTwoConceptsRepo.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/OneExternalEventAndTwoConcepts/OneExternalEventAndTwoConceptsRepo" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/PreprocessorBasics/PreprocessorBasics.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/PreprocessorBasics/PreprocessorBasics" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/PreprocessorConceptOperations/PreprocessorConceptOperations.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/PreprocessorConceptOperations/PreprocessorConceptOperations" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/RVChannel/RVChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/RVChannel/RVChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/SOAPChannel/SOAPChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/SOAPChannel/SOAPChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/WebStudio/CreditCardApplication.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/WebStudio/CreditCardApplication" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/WebStudio/OverdraftNotifications.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/WebStudio/OverdraftNotifications" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/XmlProcessingCollection/XMLProcessingCollection.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/XmlProcessingCollection/XmlProcessingCollection" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/AS3x/AS3x.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/AS3x/AS3x" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FraudDetectionSecure/fdsecure.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FraudDetectionSecure/FraudDetectionSecure" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/SOAPJMSChannel/SOAPJMSChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/SOAPJMSChannel/SOAPJMSChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>				
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FTL/FTLExample.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FTL/FTL" />
			<param name="extended-classpath" value=""/>
		</antcall>	
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/FTLChannel/FTLChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/FTLChannel/FTLChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>		
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/AS3xChannel/AS3xChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/AS3xChannel/AS3xChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/SOAPJMSChannel/SOAPJMSChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/SOAPJMSChannel/SOAPJMSChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/MQTTChannel/MqttChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/MQTTChannel/MQTTChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/JSON/BEJSONClient.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/JSON/BEJSONClient" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/JSON/BEJSONServer.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/JSON/BEJSONServer" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/WebStudio/OrderManagement.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/WebStudio/OrderManagement" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/RuleFunctionAPI/RFAPI/RFAPI.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/RuleFunctionAPI/RFAPI" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/Analytics/FraudDetectionTerr/fdterr.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/Analytics/FraudDetectionTerr/FraudDetectionTerr" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--views-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/views/FraudDetectionDashboard/FraudDetectionDashboard.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/views/FraudDetectionDashboard/FraudDetectionDashboard" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/views/TickerTracker/TickerTracker.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/views/TickerTracker/TickerTracker" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--Kafka Channel-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/KafkaChannel/KafkaChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/KafkaChannel/KafkaChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--Kinesis Channel-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/KinesisChannel/KinesisChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/KinesisChannel/KinesisChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--Api Channel-->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/api/FileChannel/FileChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/api/FileChannel/FileChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/api/FileChannel/FileChannel.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/api/FileChannel/FileChannel" />
			<param name="extended-classpath" value=""/>
		</antcall>	
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/api/StudioProjKafka/StudioProjKafka.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/api/StudioProjKafka/StudioProjKafka" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<!--LiveView -->
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/liveview/FraudDetectionLiveView/FraudDetectionLiveView.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/liveview/FraudDetectionLiveView/FraudDetectionLiveView" />
			<param name="extended-classpath" value=""/>
		</antcall>
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/examples/standard/Analytics/LiveScore/LiveScore.ear " />
			<param name="project-path" value="${env.SRC_ROOT}/examples/standard/Analytics/LiveScore/LiveScore" />
			<param name="extended-classpath" value=""/>
		</antcall>
	</target>

	<!-- =============== -->
	<!-- build-functions -->
	<!-- =============== -->

	<target name="build-functions" depends="build-container,build-drivers">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-functions" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${functions.bld}" />
		<mkdir dir="${lib.exp}" />

		<path id="functions.classpath">
			<path refid="bw.classpath" />
			<path refid="as.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="tomcat.classpath" />
			<path refid="tangosol.classpath" />
			<path refid="rv.classpath" />
			<path refid="jackson.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
		</path>

		<javac srcdir="${functions.src}" destdir="${functions.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="functions.classpath" />
			</classpath>

			<include name="**/*.java" />
		</javac>

		<delete file="${functions.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<copy todir="${functions.bld}">
			<fileset dir="${functions.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${functions.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="functions.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${functions_all.bld}" defaultexcludes="true">-->
		<!--<include name="com/tibco/be/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<jar destfile="${functions.jar}" basedir="${functions.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.functions.be_functionsVersion" />
			</manifest>
		</jar>
	</target>


	<!-- ================= -->
	<!-- build-interpreter -->
	<!-- ================= -->

	<target name="build-interpreter" depends="build-studio-rt-common">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-interpreter" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${interpreter.bld}" />
		<mkdir dir="${lib.exp}" />

		<delete file="${interpreter.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<path id="interpreter.classpath">
			<path refid="antlr.classpath" />
			<path refid="emf.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${functions.bld}" />
			<path location="${base.bld}" />
			<path location="${studiort.bld}" />
		</path>

		<javac destdir="${interpreter.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${interpreter.src}" />

			<classpath refid="interpreter.classpath" />
			<exclude name="**/_retired_/**" />
		</javac>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${interpreter.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="interpreter.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${interpreter.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/interpreter/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${interpreter.bld}">
			<fileset dir="${interpreter.src}">
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<jar destfile="${interpreter.jar}" basedir="${interpreter.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.interpreter.cep_interpreterVersion" />
			</manifest>
		</jar>

		<!-- <copy file="config/cep-query.bnd" tofile="${be.obj}/cep-query.bnd" overwrite="true"/> <bnd classpath="${query.bld}"
              eclipse="false" failok="false" output="${query.jar}" exceptions="true" files="${be.obj}/cep-query.bnd" /> -->
	</target>


	<!-- ===================== -->
	<!-- build-studiofunctions -->
	<!-- ===================== -->

	<target name="build-studiofunctions" depends="build-container,build-drivers">
		<if>
			<available file="${studio.exp}/studio/eclipse/plugins" type="dir"/>
			<then>
				<if>
					<equals arg1="${env.TAG_FILTERING}" arg2="on" />
					<then>
						<antcall target="pre-studiofunctions" />
					</then>
					<else>
					</else>
				</if>

				<mkdir dir="${studiofunctions.bld}" />
				<mkdir dir="${lib.exp}" />

				<path id="studiofunctions.classpath">
					<path refid="emf.classpath" />
					<path refid="tra.classpath" />
					<path refid="tpcl.classpath" />
					<path refid="tomcat.classpath" />
					<path refid="tangosol.classpath" />
					<path refid="rv.classpath" />
					<path refid="bw.classpath" />
					<path location="${common.bld}" />
					<path location="${kernel.bld}" />
					<path location="${drivers.bld}" />
					<path location="${base.bld}" />
					<path location="${env.ECLIPSE_HOME}/plugins/org.eclipse.osgi_${env.OSGI_VERSION}.jar" />
					<fileset dir="${studio.exp}/studio/eclipse/plugins">
						<include name="com.tibco.cep.studio.common_*.jar" />
					</fileset>
				</path>

				<javac srcdir="${studiofunctions.src}" destdir="${studiofunctions.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
					<compilerarg line="${env.COMPILER_LINE_ARG}" />
					<classpath refid="studiofunctions.classpath" />
					<include name="**/*.java" />
				</javac>

				<delete file="${studiofunctions.bld}/META-INF/MANIFEST.MF" quiet="true" />

				<copy todir="${studiofunctions.bld}">
					<fileset dir="${studiofunctions.src}">
						<!-- <exclude name="**/*.java" /> -->
						<exclude name="**/*.tag" />
						<exclude name=".classpath" />
						<exclude name=".project" />
					</fileset>
				</copy>

				<!--<if>-->
				<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
				<!--<then>-->
				<!--<javadoc destdir="${studiofunctions.bld}" failonerror="true" useexternalfile="true">-->
				<!--<classpath refid="studiofunctions.classpath" />-->
				<!--<doclet name="FunctionHelpPropertiesDoclet">-->
				<!--<path refid="stringtemplate.classpath" />-->
				<!--<path refid="antlr.classpath" />-->
				<!--<path path="${fdg.exp}" />-->
				<!--</doclet>-->
				<!--<packageset dir="${functions_all.bld}" defaultexcludes="true">-->
				<!--<include name="com/tibco/be/functions/**" />-->
				<!--</packageset>-->
				<!--</javadoc>-->
				<!--</then>-->
				<!--</if>-->

				<jar destfile="${studiofunctions.jar}" basedir="${studiofunctions.bld}">
					<manifest>
						<attribute name="Main-Class" value="com.tibco.be.functions.be_functionsVersion" />
					</manifest>
				</jar>
			</then>
		</if>
	</target>

	<!-- ================ -->
	<!-- build-obfuscator -->
	<!-- ================ -->

	<target name="build-obfuscator" depends="set-all">

		<mkdir dir="${obfuscator.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${obfuscator.src}" destdir="${obfuscator.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="jide.classpath" />
			</classpath>
			<include name="**/*.java" />
		</javac>

		<copy todir="${obfuscator.bld}">
			<fileset dir="${obfuscator.src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.tag" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<jar destfile="${obfuscator.jar}" basedir="${obfuscator.bld}">
		</jar>

	</target>

	<!-- ======== -->
	<!-- deployTS -->
	<!-- ======== -->

	<target name="deployTS" depends="deployTSStudio, deployTSViews">
	</target>

	<target name="deployTSStudio" depends="set-all">
		<antcall target="deployTSStudio-version">
			<param name="studio_plugin_version" value="${UI_PLUGINS_VERSION}" />
		</antcall>
	</target>

	<target name="deployTSStudio-version" depends="set-all">
		<delete dir="${be.exp}/deployTS" failonerror="false" />
		<mkdir dir="${be.exp}/deployTS" />
		<copy file="studio/deployTS.properties" tofile="${be.exp}/deployTS/deployTS.properties" overwrite="true" />
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${be.exp}">
			<replacetoken>{BE_BUILD_EXPORT}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${studio_plugin_version}">
			<replacetoken>{STUDIO_PLUGIN_VERSION}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${_TOMSAWYER_PERSPECTIVES_VERSION}">
			<replacetoken>{_TOMSAWYER_PERSPECTIVES_VERSION}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${_TOMSAWYER_PERSPECTIVES_DEPLOYMENT_LICENSE_NAME_VERSION}">
			<replacetoken>{_TOMSAWYER_PERSPECTIVES_DEPLOYMENT_LICENSE_NAME_VERSION}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${TOMSAWYER_PERSPECTIVES_LIB}">
			<replacetoken>{TOMSAWYER_PERSPECTIVES_LIB}</replacetoken>
		</replace>

		<java classname="com.tomsawyer.licensing.deployer.TSLicensingDeployer" dir="${TOMSAWYER_PERSPECTIVES_LIB}" fork="true" maxmemory="512m" failonerror="true">
			<arg value="-configuration" />
			<arg value="${be.exp}/deployTS/deployTS.properties" />
			<classpath>
				<path refid="tomsawyer.dep.classpath" />
			</classpath>
		</java>

		<move todir="${lib.exp}/ext/tpcl/tomsawyer">
			<fileset dir="${be.exp}/deployTS">
				<include name="tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
				<include name="tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
			</fileset>
		</move>

		<move todir="${be.exp}/studio/eclipse/plugins">
			<fileset dir="${be.exp}/deployTS">
				<include name="*/**" />
				<exclude name="deployTS.properties" />
			</fileset>
		</move>
		<delete dir="${be.exp}/deployTS" />
	</target>

	<!-- ============= -->
	<!-- deployTSViews -->
	<!-- ============= -->

	<target name="deployTSViews" depends="set-all">
		<delete dir="${be.exp}/deployTS" failonerror="false" />
		<mkdir dir="${be.exp}/deployTS" />
		<copy file="views/deployTS.properties" tofile="${be.exp}/deployTS/deployTS.properties" overwrite="true" />
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${be.exp}">
			<replacetoken>{BE_BUILD_EXPORT}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${_TOMSAWYER_PERSPECTIVES_VERSION}">
			<replacetoken>{_TOMSAWYER_PERSPECTIVES_VERSION}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${_TOMSAWYER_PERSPECTIVES_DEPLOYMENT_LICENSE_NAME_VERSION}">
			<replacetoken>{_TOMSAWYER_PERSPECTIVES_DEPLOYMENT_LICENSE_NAME_VERSION}</replacetoken>
		</replace>
		<replace file="${be.exp}/deployTS/deployTS.properties" value="${TOMSAWYER_PERSPECTIVES_LIB}">
			<replacetoken>{TOMSAWYER_PERSPECTIVES_LIB}</replacetoken>
		</replace>

		<java classname="com.tomsawyer.licensing.deployer.TSLicensingDeployer" dir="${TOMSAWYER_PERSPECTIVES_LIB}" fork="true" maxmemory="512m" failonerror="true">
			<arg value="-configuration" />
			<arg value="${be.exp}/deployTS/deployTS.properties" />
			<classpath>
				<path refid="tomsawyer.dep.classpath" />
			</classpath>
		</java>

		<move todir="${lib.exp}/ext/tpcl/tomsawyer">
			<fileset dir="${be.exp}/deployTS">
				<include name="tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
				<include name="tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
			</fileset>
		</move>

		<move todir="${be.exp}/views/lib">
			<fileset dir="${be.exp}/deployTS">
				<include name="*/**" />
				<exclude name="deployTS.properties" />
			</fileset>
		</move>
		<delete dir="${be.exp}/deployTS" />
	</target>

	<!-- ===================== -->
	<!-- build-thread-analyzer -->
	<!-- ===================== -->
	<!--todo: CHECK Manifest, and TAGS -->

	<target name="build-thread-analyzer" depends="set-all">
		<mkdir dir="${thread-analyzer.bld}" />
		<!--<mkdir dir="${thread-analyzer.exp}/lib" />-->

		<javac srcdir="${thread-analyzer.src}" destdir="${thread-analyzer.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
		</javac>

		<jar destfile="${thread-analyzer.jar}" basedir="${thread-analyzer.bld}">
			<!--<manifest> -->
			<!--<attribute name="Main-Class" value="com.tibco.be.bemm.functions.be_mmVersion"/> -->
			<!--</manifest> -->
		</jar>
	</target>

	<!-- ======== -->
	<!-- build-mm -->
	<!-- ======== -->

	<target name="build-ear-mm-wetb" depends="set-all">
		<!-- need coherence.jar under BE_HOME\lib\ext\tpcl in order to compile the Coherence catalog functions -->
		<copy file="${TANGOSOL_LIB}/coherence.jar" tofile="${ENGG_TESTBASE}/lib/ext/tpcl/coherence.jar" />

		<antcall target="build-ear-wetb">
			<!-- wetb = with-engg-testbase -->
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/mm/em/bin/MM.ear" />
			<param name="proj-fqpath" value="${env.SRC_ROOT}/runtime/mm/em/project/emonitor" />
		</antcall>

		<!-- After building EAR remove coherence.jar -->
		<delete file="${ENGG_TESTBASE}/lib/ext/tpcl/coherence.jar" />
	</target>

	<!-- ====================== -->
	<!-- build-ear-helper tasks -->
	<!-- ====================== -->

	<target name="build-ear-wetb" depends="set-all">
		<!-- For testing purposes -->
		<!--<target name="build-ear-wetb" depends="build-all-jars, build-all-examples,build-engg-testbase-all">-->
		<!-- wetb = with-engg-testbase -->

		<!-- Backups to revert to the state before running this Ant task -->
		<antcall target="build-ear-wetb-do-tra-backups" />
		<antcall target="build-ear-wetb-do-backups">
			<param name="file-fqpath" value="${proj-fqpath}/.beproject" />
		</antcall>

		<!-- Replace build variables in studio-tools.tra -->
		<replace file="${ENGG_TESTBASE}/studio/bin/studio-tools.tra">
			<replacefilter token="%TIBCO_BE_HOME_ESC%" value="${ENGG_TESTBASE}" />
			<replacefilter token="%TIBCO_JAVA_HOME_ESC%" value="${env.JDK_HOME}/${env.PORT}" />
			<replacefilter token="%TIBCO_JVM_LIB_DIR_ESC%" value="${env.JDK_HOME}/${env.PORT}/jre/bin/client" />
			<replacefilter token="=%PS%" value="=${path.separator}" />
		</replace>

		<if>
			<os family="windows" />
			<then>
				<!-- Get wrapper executable, rename it, and put it under BE_HOME/studio/bin -->
				<property name="build.ear.studio-tools.bin" value="${ENGG_TESTBASE}/studio/bin/studio-tools.exe" />
				<copy file="${WRAP_BIN}/wrap.exe" tofile="${build.ear.studio-tools.bin}" />

				<replace file="${ENGG_TESTBASE}/studio/bin/studio-tools.tra">
					<replacefilter token="%TIBCO_JVM_LIB_SERVER_ESC%" value="${env.JDK_HOME}/${env.PORT}/jre/bin/server/jvm.dll" />
				</replace>
			</then>
			<else>
				<property name="build.ear.studio-tools.bin" value="${ENGG_TESTBASE}/studio/bin/studio-tools" />
				<copy file="${WRAP_BIN}/wrap" tofile="${build.ear.studio-tools.bin}" />
				<chmod file="${build.ear.studio-tools.bin}" perm="+x" />

				<replace file="${ENGG_TESTBASE}/studio/bin/studio-tools.tra">
					<replacefilter token="%TIBCO_JVM_LIB_SERVER_ESC%" value="${env.JDK_HOME}/${env.PORT}/jre/lib/i386/server/libjvm.so" />
				</replace>
			</else>
		</if>

		<!-- Replace variables and tokens in studio.tra -->
		<replace file="${ENGG_TESTBASE}/studio/eclipse/configuration/studio.tra">
			<replacefilter token="%TIBCO_BE_HOME_ESC%" value="${ENGG_TESTBASE}" />
			<replacefilter token="%TIBCO_SECURITY_VENDOR%" value="j2se" />
			<replacefilter token="=%PS%" value="=${path.separator}" />
		</replace>

		<if>
			<!-- TODO:Improve this. Hack because only needed this for MM -->
			<equals arg1="${ear-fqpath}" arg2="${env.SRC_ROOT}/runtime/mm/em/bin/MM.ear" />
			<then>
				<replace file="${ENGG_TESTBASE}/studio/eclipse/configuration/studio.tra" token="TIBCO.BE.function.catalog.coherence=false" value="TIBCO.BE.function.catalog.coherence=true" />
			</then>
		</if>

		<!-- replace %%BUILD_VARIABLES%% in .beproject file -->
		<replace file="${proj-fqpath}/.beproject" token="%TIBCO_BE_HOME_ESC%" value="${ENGG_TESTBASE}" />

		<!-- EXECUTE STUDIO-TOOLS BUILD-EAR SCRIPT -->
		<exec executable="${build.ear.studio-tools.bin}">
			<arg value="--propFile" />
			<arg value="${ENGG_TESTBASE}/studio/bin/studio-tools.tra" />
			<arg value="-core" />
			<arg value="buildEar" />
			<arg value="-x" />
			<arg value="-o" />
			<arg value="${ear-fqpath}" />
			<arg value="-p" />
			<arg value="${proj-fqpath}" />
		</exec>

		<!--restore to the state before running this ANT task-->
		<antcall target="build-ear-wetb-revert-tra-backups" />
		<antcall target="build-ear-wetb-do-revert">
			<param name="file-fqpath" value="${proj-fqpath}/.beproject" />
		</antcall>
		<delete file="${build.ear.studio-tools.bin}" />
	</target>

	<target name="build-ear-wetb-do-revert">
		<copy overwrite="true" file="${file-fqpath}.bak" tofile="${file-fqpath}" />
		<delete file="${file-fqpath}.bak" />
	</target>

	<target name="build-ear-wetb-do-backups">
		<copy file="${file-fqpath}" tofile="${file-fqpath}.bak" />
	</target>

	<target name="build-ear-wetb-revert-tra-backups">
		<antcall target="build-ear-wetb-do-revert">
			<param name="file-fqpath" value="${ENGG_TESTBASE}/studio/bin/studio-tools.tra" />
		</antcall>
		<antcall target="build-ear-wetb-do-revert">
			<param name="file-fqpath" value="${ENGG_TESTBASE}/studio/eclipse/configuration/studio.tra" />
		</antcall>
	</target>

	<target name="build-ear-wetb-do-tra-backups">
		<antcall target="build-ear-wetb-do-backups">
			<param name="file-fqpath" value="${ENGG_TESTBASE}/studio/bin/studio-tools.tra" />
		</antcall>
		<antcall target="build-ear-wetb-do-backups">
			<param name="file-fqpath" value="${ENGG_TESTBASE}/studio/eclipse/configuration/studio.tra" />
		</antcall>
	</target>

	<target name="build-mm" depends="set-all,
                                     build-functions,                                     
                                     build-query,
                                     build-security,
                                     build-beq,
                                     build-thread-analyzer,
                                     build-datagrid-tibco">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-mm" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${mm.bld}" />
		<!--<mkdir dir="${mm.exp}/lib" />-->

		<path id="mm.classpath">
			<path refid="as.classpath" />
			<path refid="emf.classpath" />
			<path refid="jsch.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="tangosol.classpath" />
			<path refid="tomsawyer.thirdparty.classpath" />
			<path refid="hawk.classpath" />
			<path location="${common.bld}" />
			<path location="${thread-analyzer.bld}" />
			<path location="${kernel.bld}" />
			<path location="${drivers.bld}" />
			<path location="${security.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${interpreter.bld}" />
			<path location="${query.bld}" />
			<path location="${datagrid-oracle.bld}" />
			<path location="${datagrid-tibco.bld}" />
		</path>

		<javac srcdir="${mm.src}" destdir="${mm.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${mm.src}" />
			<classpath refid="mm.classpath" />

		</javac>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${mm.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="mm.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${mm.src}" defaultexcludes="true">-->
		<!--<include name="com/tibco/be/bemm/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${mm.bld}">
			<fileset dir="${mm.src}">
				<include name="**/*.properties" />
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
				<include name="**/*.templates" />
				<include name="**/*.types" />
				<include name="**/*.xsd" />
			</fileset>
		</copy>

		<jar destfile="${mm.jar}" basedir="${mm.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.bemm.functions.be_mmVersion" />
			</manifest>
		</jar>

	</target>

	<target name="build-mm-package" depends="set-all, build-mm">
		<!--<copy todir="${mm.exp}" overwrite="true">
			<fileset dir="${mm.src}/../">
				<include name="*.pdf" />
				<exclude name="**/EnterpriseMonitoringExample.pdf" />
			</fileset>
		</copy>
		<mkdir dir="${mm.exp}/bin" />
		<copy todir="${mm.exp}/bin" overwrite="true">
			<fileset dir="${mm.src}/../bin/">
				<include name="*/**" />
			</fileset>
		</copy>-->
		<mkdir dir="${mm.exp}/config" />
		<copy todir="${mm.exp}/config" overwrite="true">
			<fileset dir="${mm.src}/../config/">
				<include name="*/**" />
			</fileset>
		</copy>
		<!--<mkdir dir="${mm.exp}/web-root" />
		<copy todir="${mm.exp}/web-root" overwrite="true">
			<fileset dir="${mm.src}/../web-root/">
				<include name="*/**" />
			</fileset>
			<fileset dir="${mm.src}/../ui/com.tibco.cep.ui.monitor/bin/">
				<include name="*.swf" />
			</fileset>
		</copy>
		<mkdir dir="${mm.exp}/project/emonitor" />
		<copy todir="${mm.exp}/project/emonitor" overwrite="true">
			<fileset dir="${mm.src}/../project/emonitor" />
		</copy>-->
	</target>

	<!-- ========= -->
	<!-- build-tea-agent -->
	<!-- ========= -->

	<target name="build-tea-agent" depends="build-datagrid-tibco,build-interpreter">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-beteagent" />
			</then>
			<else>
			</else>
		</if>
		<mkdir dir="${tea.agent.bld}" />
		<mkdir dir="${tea.agent.exp}/lib" />
		<path id="tea.agent.classpath">
			<path refid="emf.classpath" />
			<path refid="log4j.classpath" />
			<path refid="jsch.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="antlr.classpath" />
			<path refid="oracle.classpath" />
			<path refid="as.classpath" />
			<path refid="tea.classpath" />
			<path refid="jackson.classpath" />
			<path refid="httpcomponents.classpath"/>
			<path refid="tomcat.classpath"/>
			<path refid="apache.commons.classpath"/>
			<pathelement path="${base.jar}" />
			<pathelement path="${common.jar}" />
			<pathelement path="${datagrid-tibco.jar}" />
			<pathelement path="${interpreter.jar}" />
			<path refid="jaxb.classpath" />
			<path refid="javax.activation.classpath" />
		</path>

		<javac srcdir="${tea.agent.src}" destdir="${tea.agent.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<exclude name="aggregation/runtime/transport/src/com/tibco/rta/service/rs/**/**"/>
			<exclude name="aggregation/runtime/transport/test/com/tibco/rta/service/rs/**/**"/>
			<exclude name="rta/client/src/com/tibco/rta/test/**/**"/>
			<classpath refid="tea.agent.classpath" />
		</javac>

		<copy todir="${tea.agent.bld}">
			<fileset dir="${tea.agent.src}/src">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="excluded_properties.txt" />
			</fileset>
			<fileset dir="${tea.agent.rta.src}">
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.rta.functions.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.rta.actions.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.agg.runtime.metrics.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.agg.runtime.transport.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.agg.runtime.admin.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${tea.agent.agg.runtime.actions.src}">
				<include name="**/*.catalog" />
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<jar destfile="${be-tea-agent.jar}" basedir="${tea.agent.bld}"/>
	</target>

	<target name="build-tea-agent-package" depends="build-tea-agent,import-teasdk">
		<mkdir dir="${tea.agent.exp}/bin" />
		<copy todir="${tea.agent.exp}/bin" overwrite="true">
			<fileset dir="${tea.agent.src}/bin/">
				<include name="*/**" />
			</fileset>
		</copy>
		<mkdir dir="${tea.agent.exp}/config" />
		<copy todir="${tea.agent.exp}/config" overwrite="true">
			<fileset dir="${tea.agent.src}/config/">
				<include name="*/**" />
				<exclude name="InitialRulesConfig.xml" />
				<exclude name="EntityMetricsCollectionConfig.xml" />
				<exclude name="MonitorStatsConfig.xml" />
			</fileset>
		</copy>
		<mkdir dir="${tea.agent.exp}/ui" />
		<copy todir="${tea.agent.exp}/ui" overwrite="true">
			<fileset dir="${tea.agent.src}/ui/">
				<include name="*/**" />
			</fileset>
		</copy>
		<mkdir dir="${tea.agent.exp}/cli" />
		<copy todir="${tea.agent.exp}/cli" overwrite="true">
			<fileset dir="${tea.agent.src}/cli/">
				<include name="python/*.py" />
				<include name="python/config.csv" />
				<include name="python/tibco/*.py" />
				<include name="python/tibco/tea/*.py" />
			</fileset>
		</copy>
	</target>

	<!-- ========= -->
	<!-- build-beq -->
	<!-- ========= -->

	<target name="build-beq" depends="clean-beq, build-query">
		<mkdir dir="${mm.bld}" />
		<!--<mkdir dir="${mm.exp}/lib" />-->
		<mkdir dir="${lib.exp}/beq" />

		<unjar dest="${lib.exp}/beq" src="${query.jar}">
		</unjar>
		<delete file="${lib.exp}/beq/functions.catalog" />
		<jar destfile="${beq.jar}" basedir="${lib.exp}/beq">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.query.cep_queryVersion" />
			</manifest>
		</jar>
		<delete dir="${lib.exp}/beq" />
	</target>

	<!-- =========== -->
	<!-- build-query -->
	<!-- =========== -->

	<target name="build-query" depends="build-interpreter, build-functions, build-query-grammar, build-datagrid-oracle, build-datagrid-tibco">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-query" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${query.bld}" />
		<mkdir dir="${lib.exp}" />

		<delete file="${query.bld}/META-INF/MANIFEST.MF" quiet="true" />

		<path id="query.classpath">
			<path refid="emf.classpath" />
			<path refid="tra.classpath" />
			<path refid="tpcl.classpath" />
			<path refid="antlr.classpath" />
			<path refid="stringtemplate.classpath" />
			<path refid="javassist.classpath" />
			<path refid="tomsawyer.rel.classpath" />
			<path refid="apache.commons.classpath" />
			<path refid="tangosol.classpath" />
			<path refid="as.classpath" />
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${engine.bld}" />
			<path location="${interpreter.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
			<path location="${functions.bld}" />
			<path location="${studiofunctions.bld}" />
			<path location="${datagrid-oracle.bld}" />
			<path location="${datagrid-tibco.bld}" />
		</path>

		<javac destdir="${query.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${query.common.src}" />
			<src path="${query.activespaces.src}" />
			<src path="${query.coherence.src}" />

			<classpath refid="query.classpath" />
			<exclude name="**/_retired_/**" />
		</javac>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${query.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="query.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--<path path="${fdg.exp}" />-->
		<!--</doclet>-->
		<!--<packageset dir="${query.common.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/query/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${query.bld}">
			<fileset dir="${query.common.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
				<include name="**/*.stg" />
			</fileset>
		</copy>

		<jar destfile="${query.jar}" basedir="${query.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.query.cep_queryVersion" />
			</manifest>
		</jar>

		<!-- <copy file="config/cep-query.bnd" tofile="${be.obj}/cep-query.bnd" overwrite="true"/> <bnd classpath="${query.bld}"
            eclipse="false" failok="false" output="${query.jar}" exceptions="true" files="${be.obj}/cep-query.bnd" /> -->
	</target>



	<target name="build-query-grammar" depends="set-all">
		<!-- antlr options -->
		<property name="antlr.profile" value="false" />
		<property name="antlr.report" value="true" />
		<property name="antlr.multithreaded" value="true" />
		<property name="antlr.depend" value="false" />
		<property name="antlr.debug" value="false" />
		<property name="antlr.print" value="false" />

		<!--		<taskdef name="antlr3" classname="org.apache.tools.ant.antlr.ANTLR3" classpathref="antlr.classpath" /> -->

		<property name="query.grammar.file" value="BEOql.g" />
		<property name="query.grammar.package" value="com/tibco/cep/query/ast/parser" />
		<property name="query.grammar.output" value="${query.common.src}/${query.grammar.package}" />

		<echo message="antlr ${query.grammar.output}/${query.grammar.file}" />
		<echo message="${query.grammar.output}" />

		<!--	<antlr3 target="${query.grammar.output}/${query.grammar.file}" outputdirectory="${query.grammar.output}" libdirectory="${query.grammar.output}" multithreaded="${antlr.multithreaded}" report="${antlr.report}" profile="${antlr.profile}" depend="${antlr.depend}" debug="${antlr.debug}" print="${antlr.print}">
			<classpath>
				<path refid="antlr.classpath" />
			</classpath>
		</antlr3> -->
	</target>

	<!-- ======= -->
	<!-- pattern -->
	<!-- ======= -->

	<target name="build-pattern-core" depends="set-all, build-base">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-pattern" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${pattern.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${pattern.core.src}" destdir="${pattern.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${pattern.core.src}" />
			<classpath>
				<path location="${base.bld}" />
			</classpath>
		</javac>

	</target>

	<target name="build-pattern-lang" depends="build-pattern-core">

		<property name="antlr.profile" value="false" />
		<property name="antlr.report" value="true" />
		<property name="antlr.multithreaded" value="true" />
		<property name="antlr.depend" value="false" />
		<property name="antlr.debug" value="false" />
		<property name="antlr.print" value="false" />

		<!--		<taskdef name="antlr3" classname="org.apache.tools.ant.antlr.ANTLR3" classpathref="antlr.classpath" /> -->

		<property name="pattern.grammar.file" value="pattern.g" />
		<property name="pattern.grammar.package" value="com/tibco/cep/pattern/dsl" />
		<property name="pattern.grammar.output" value="${pattern.lang.src}/${pattern.grammar.package}" />

		<echo message="antlr ${pattern.grammar.output}/${pattern.grammar.file}" />

		<delete verbose="${verbose}" file="${pattern.grammar.output}/${pattern.grammar.file.prefix}*.java" />
		<delete verbose="${verbose}" file="${pattern.grammar.output}/${pattern.grammar.file.prefix}*.tokens" />

		<!--	<antlr3 target="${pattern.grammar.output}/${pattern.grammar.file}" outputdirectory="${pattern.grammar.output}" libdirectory="${pattern.grammar.output}" multithreaded="${antlr.multithreaded}" report="${antlr.report}" profile="${antlr.profile}" depend="${antlr.depend}" debug="${antlr.debug}" print="${antlr.print}">

			<classpath>
				<path refid="antlr.classpath" />
				<path location="${pattern.bld}" />
			</classpath>
		</antlr3> -->

		<javac srcdir="${pattern.lang.src}" destdir="${pattern.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${pattern.lang.src}" />
			<classpath refid="antlr.classpath" />
		</javac>

	</target>

	<target name="build-pattern-be" depends="build-pattern-lang, build-common">
		<path id="pattern.classpath">
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${base.bld}" />
			<path refid="antlr.classpath" />
			<path refid="tra.classpath" />
		</path>

		<javac srcdir="${pattern.be.src}" destdir="${pattern.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${pattern.be.src}" />
			<classpath refid="pattern.classpath" />
		</javac>

	</target>

	<target name="build-pattern" depends="build-pattern-be">

		<delete file="${pattern.bld}/META-INF/MANIFEST.MF" quiet="true" />
		<delete file="${pattern.jar}" quiet="true" />

		<path id="pattern.be.classpath">
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${base.bld}" />
			<path location="${pattern.bld}" />
			<path refid="antlr.classpath" />
			<path refid="tra.classpath" />
		</path>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${pattern.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="pattern.be.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${pattern.be.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/pattern/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${pattern.bld}">
			<fileset dir="${pattern.be.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
			</fileset>
		</copy>

		<jar destfile="${pattern.jar}" basedir="${pattern.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.pattern.cep_patternVersion" />
			</manifest>
		</jar>

	</target>

	<target name="build-analytics" depends="build-functions">
		<mkdir dir="${analytics.bld}" />
		<mkdir dir="${lib.exp}" />
		<path id="analytics.classpath">
			<path refid="terr.classpath" />
			<path refid="jpmml.classpath" />
			<path refid="jaxb.classpath" />
			<path refid="javax.activation.classpath" />
			<path refid="jaxws.classpath" />
			<path refid="tra.classpath" />
			<path location="${common.bld}" />
			<path location="${kernel.bld}" />
		
		</path>
		<javac destdir="${analytics.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${analytics.be.src}" />
			<src path="${analytics.core.src}" />

			<classpath refid="analytics.classpath" />
			<exclude name="**/_retired_/**" />
		</javac>

		<copy todir="${analytics.bld}">
			<fileset dir="${analytics.be.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
				<include name="**/*.stg" />
			</fileset>
			<fileset dir="${analytics.core.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
				<include name="**/*.stg" />
			</fileset>
		</copy>
		
		<jar destfile="${analytics.jar}" basedir="${analytics.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.analytics.cep_analyticsVersion" />
			</manifest>
		</jar>
	</target>


	<!-- ============ -->
	<!-- loadbalancer -->
	<!-- ============ -->

	<target name="build-loadbalancer-core" depends="set-all, build-base">
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-loadbalancer" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${loadbalancer.bld}" />
		<mkdir dir="${lib.exp}" />

		<javac srcdir="${loadbalancer.core.src}" destdir="${loadbalancer.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${loadbalancer.core.src}" />
			<classpath>
				<path location="${base.bld}" />
			</classpath>
		</javac>

	</target>

	<target name="build-loadbalancer-be" depends="build-loadbalancer-core, build-common, build-drivers">
		<path id="loadbalancer.classpath">
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
			<path refid="tra.classpath" />
			<path refid="emf.classpath" />
		</path>

		<javac srcdir="${loadbalancer.be.src}" destdir="${loadbalancer.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<src path="${loadbalancer.be.src}" />
			<classpath refid="loadbalancer.classpath" />
		</javac>
	</target>


	<target name="build-loadbalancer" depends="build-loadbalancer-be">

		<delete file="${loadbalancer.bld}/META-INF/MANIFEST.MF" quiet="true" />
		<delete file="${loadbalancer.jar}" quiet="true" />

		<path id="loadbalancer.be.classpath">
			<path location="${kernel.bld}" />
			<path location="${common.bld}" />
			<path location="${drivers.bld}" />
			<path location="${base.bld}" />
			<path location="${loadbalancer.bld}" />
			<path refid="tra.classpath" />
		</path>

		<!--<if>-->
		<!--<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />-->
		<!--<then>-->
		<!--<javadoc destdir="${loadbalancer.bld}" failonerror="true" useexternalfile="true">-->
		<!--<classpath refid="loadbalancer.be.classpath" />-->
		<!--<doclet name="FunctionHelpPropertiesDoclet">-->
		<!--<path path="${fdg.exp}" />-->
		<!--<path refid="stringtemplate.classpath" />-->
		<!--<path refid="antlr.classpath" />-->
		<!--</doclet>-->
		<!--<packageset dir="${loadbalancer.be.src}" defaultexcludes="yes">-->
		<!--<include name="com/tibco/cep/loadbalancer/functions/**" />-->
		<!--</packageset>-->
		<!--</javadoc>-->
		<!--</then>-->
		<!--</if>-->

		<copy todir="${loadbalancer.bld}">
			<fileset dir="${loadbalancer.be.src}">
				<include name="**/*.properties" />
				<!-- <include name="**/*.catalog" /> -->
			</fileset>
		</copy>

		<jar destfile="${loadbalancer.jar}" basedir="${loadbalancer.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.cep.loadbalancer.cep_loadbalancerVersion" />
			</manifest>
		</jar>

	</target>

	<!-- ========= -->
	<!-- build-api -->
	<!-- ========= -->

	<target name="build-api" depends="build-filterdoclet,build-api-nested-classes">

		<mkdir dir="${api.exp}/javadoc" />

		<if>
			<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />
			<then>

				<javadoc windowtitle="${env.BE_PRODUCT} ${BE_VERSION}" header="&lt;span style='white-space:nowrap;'&gt;${env.BE_PRODUCT} ${BE_VERSION}&lt;/span&gt;" destdir="${api.exp}/javadoc" maxmemory="256M" access="protected" source="1.8" encoding="iso-8859-1" verbose="${verbose}" version="true" useexternalfile="true">
					<classpath>
						<path refid="eclipse.classpath" />
						<path refid="apache.commons.classpath" />
						
						
						<path refid="javassist.classpath" />
						<path refid="log4j.classpath" />
						<path refid="tangosol.classpath" />
						<path refid="rv.classpath" />
						<path refid="tra.classpath" />
						<path refid="tpcl.classpath" />
						<path refid="rv.classpath" />
						<path refid="hawk.classpath" />
						<path refid="httpcomponents.classpath" />
						<path location="${base.bld}" />
						<path location="${common.bld}" />
						<path location="${kernel.bld}" />
						<path location="${rms.bld}"/>
					</classpath>
					<doclet name="FilterDoclet" path="${doclets.exp}">
						<!-- <param name="-category" value="" /> -->
					</doclet>
					<tag name=".category" description="Category:" enabled="false" />
					<fileset dir="${common.src}">
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayBoolean.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayConceptReference.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayContainedConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayDateTime.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayDouble.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayInt.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayLong.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayString.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomBoolean.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomConceptReference.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomContainedConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomDateTime.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomDouble.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomInt.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomLong.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomString.java" />
					</fileset>
					<doclet name="FilterDoclet" path="${doclets.exp}">
						<param name="-category" value="public-api" />
					</doclet>
					<tag name=".category" description="Category:" enabled="false" />
					
					<fileset dir="${rms.src}">
						<include name="com/tibco/be/ws/scs/SCSException.java"/>
						<include name="com/tibco/be/ws/scs/impl/repo/AbstractRepositoryIntegration.java"/>
					</fileset>
					<packageset dir="${rms.src}">
						<include name="com/tibco/be/ws.scs/**" />
					</packageset>
					
					<!--<packageset dir="${base.non-be.src}" />-->
					<packageset dir="${base.be.src}" />
					<fileset dir="${bpmn.src}">
						<include name="**/*.java" />
					</fileset>
					<fileset dir="${common.src}">
						<include name="com/tibco/**/*.java" />
						<exclude name="**/tester/core/**" />
						<exclude name="**/oracle/**" />
						<exclude name="**/coherence/**" />
						<exclude name="**/jxpath/**" />
						<!-- Excludes added by Archit -->
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayBoolean.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayConcept.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayConceptReference.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayContainedConcept.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayDateTime.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayDouble.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayInt.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayLong.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyArrayString.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomBoolean.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomConcept.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomConceptReference.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomContainedConcept.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomDateTime.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomDouble.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomInt.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomLong.java" />
						<exclude name="com/tibco/cep/runtime/model/element/PropertyAtomString.java" />
						<exclude name="com/tibco/cep/util/StudioApi.java" />
						<!-- End of excludes added by Archit -->
					</fileset>
					<packageset dir="${kernel.src}">
						<include name="com/tibco/**" />
					</packageset>
					<packageset dir="${channel-api.src}">
						<include name="com/tibco/**" />
					</packageset>

				</javadoc>
				<antcall target="delete-restructure-api-files" />
			</then>
		</if>
	</target>

	<target name="delete-restructure-api-files" depends="build-filterdoclet">
		<echo message="Deleting files ..." />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayBoolean.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayConcept.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayConceptReference.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayContainedConcept.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayDateTime.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayDouble.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayInt.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayLong.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyArrayString.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomBoolean.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomConcept.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomConceptReference.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomContainedConcept.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomDateTime.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomDouble.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomInt.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomLong.html" />
		<delete file="${api.exp}/javadoc/com/tibco/cep/runtime/model/element/PropertyAtomString.html" />

		<echo message="Starting to copy the correct html files ..." />
		<copy todir="${api.exp}/javadoc/com/tibco/cep/runtime/model/element">
			<fileset dir="${api.exp}/javadoc_test/com/tibco/cep/runtime/model/element">
				<include name="**/PropertyArray*.html" />
				<include name="**/PropertyAtom*.html" />
			</fileset>
		</copy>
		<delete dir="${api.exp}/javadoc_test" />
	</target>

	<target name="build-api-nested-classes" depends="build-filterdoclet">
		<mkdir dir="${api.exp}/javadoc_test" />
		<if>
			<equals arg1="${env.JAVADOC_GENERATION}" arg2="true" />
			<then>
				<javadoc windowtitle="${env.BE_PRODUCT} ${BE_VERSION}" header="&lt;span style='white-space:nowrap;'&gt;${env.BE_PRODUCT} ${BE_VERSION}&lt;/span&gt;" destdir="${api.exp}/javadoc_test" maxmemory="256M" access="public" source="1.8" encoding="iso-8859-1" verbose="${verbose}" version="true" useexternalfile="true">
					<classpath>
						<path refid="eclipse.classpath" />
						<path refid="apache.commons.classpath" />
						
						
						<path refid="javassist.classpath" />
						<path refid="log4j.classpath" />
						<path refid="tangosol.classpath" />
						<path refid="rv.classpath" />
						<path refid="tra.classpath" />
						<path refid="tpcl.classpath" />
					</classpath>
					<doclet name="FilterDoclet" path="${doclets.exp}">
						<param name="-category" value="public-api" />
					</doclet>
					<tag name=".category" description="Category:" enabled="false" />
					<fileset dir="${common.src}">
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayBoolean.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayConceptReference.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayContainedConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayDateTime.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayDouble.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayInt.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayLong.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyArrayString.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomBoolean.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomConceptReference.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomContainedConcept.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomDateTime.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomDouble.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomInt.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomLong.java" />
						<include name="com/tibco/cep/runtime/model/element/PropertyAtomString.java" />
					</fileset>
				</javadoc>
			</then>
		</if>
		<!-- <copy todir="${api.exp}/javadoc">
					<fileset dir="${api.exp}/javadoc">
						<include name="**/*" />
					</fileset>
					<fileset dir="${api.exp}/javadoc_test">
						<include name="**/*" />
					</fileset>
				</copy>
				<delete dir="${api.exp}/javadoc_test" /> -->
	</target>

	<target name="build-bebw" depends="set-tpsdep, build-studio-rt-common">
		<!-- <target name="build-bebw" depends="set-all"> -->
		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-bebw" />
			</then>
			<else>
			</else>
		</if>
		<subant target="build-bebw" inheritall="true">
			<!-- <property file = "../bw/build.properties"/> -->
			<property file="${be.basedir}/version.properties" />
			<fileset dir="../runtime/modules/bw" includes="build.xml" />
		</subant>
	</target>

	<!-- ================ -->
	<!-- build-parser-src -->
	<!-- ================ -->

	<target name="build-parser-src" depends="set-all">

		<mkdir dir="${parser.bld}" />

		<copy todir="${parser.bld}">
			<fileset dir="${parser.src}">
				<include name="**/parser/**" />
			</fileset>
		</copy>

		<java classname="${javacc.main}" fork="true">
			<classpath>
				<path refid="javacc.classpath" />
			</classpath>
			<arg value="-OUTPUT_DIRECTORY:${rg.bld}" />
			<arg value="${rg.bld}/RuleGrammar.jj" />
		</java>

	</target>

	<!-- =========== -->
	<!-- build-tests -->
	<!-- =========== -->

	<target name="build-tests" depends="set-all">

		<mkdir dir="${tests.bld}" />
		<mkdir dir="${lib.exp}" />

	</target>

	<!-- ========= -->
	<!-- build-bin -->
	<!-- ========= -->

	<target name="build-bin" depends="set-all">

		<mkdir dir="${bin.exp}" />

		<copy todir="${bin.exp}">
			<fileset dir="${bin.src}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<chmod dir="${bin.exp}" perm="755" maxparallel="100" includes="**/*" />
	</target>


	<!-- ========= -->
	<!-- build-lib -->
	<!-- ========= -->

	<target name="build-lib" depends="set-all">

		<mkdir dir="${lib.exp}" />

		<copy todir="${lib.exp}">
			<fileset dir="${build.src}">
				<include name="be-engine.xml" />
			</fileset>
		</copy>

	</target>



	<!-- ######### -->
	<!-- build-all -->
	<!-- ######### -->

	<target name="build-all" depends="build-all-jars,
                                      
                                      build-all-tests,
                                      build-all-examples,
                                      import-all,
                                      deployTS,
    								  build-obfuscator,
                                      build-studio-site-dev,
							          build-p2repo,
									  obfuscate-all,
                                      build-assemblies">
	</target>

	<target name="build-all-hf" depends="build-all-jars,
	                                      build-all-docs,
	                                      build-all-tests,
	                                      build-all-examples,
	                                      import-all,
	                                      deployTS,
	    								  build-obfuscator,
	                                      build-studio-site-dev-hf,
	    								  obfuscate-all,
										  build-assemblies-hotfix">
	</target>


	<target name="build-all-core" depends="build-admin,
                                            build-bin,
                                            build-security,
                                            build-drivers,
                                            build-functions,    										
                                            build-datagrid-oracle,
                                            build-datagrid-tibco,
                                            build-backingstore,
                                            build-backingstore-bdb,
                                            build-bpmn,
                                            build-modules,
                                            build-query,
                                            build-mm,
                                            build-pattern,
                                            build-loadbalancer,
                                            build-migration,
											build-maven-pom-genereator,
											build-maven-plugin,
                                            build-studio-rt-common">
	</target>

	<target name="build-all-jars" depends="build-analytics,
										   build-ftl,
		   								   build-all-core,
                                           build-beviews,
                                           build-as-channel,
		                                   build-as3-channel,
                                           build-sb-channel,
										   build-channel-api,
                                           build-hawk-channel,
                                           build-kafka,
										   build-kafka-channel,
										   build-kafka-streams,
									       build-kinesis-channel,
										   build-mqtt-channel,
                                           build-tea-agent-package,
										   build-liveview,
										   build-docker,
										   build-store,
										   build-studio,
										   build-studiofunctions,
										   build-webstudio-war-all,
										   build-mm-package,
										   build-rms-package">
		<!--  update-bundlesinfo"> -->
	</target>
	
	<target name="print-version"> 
	   <echo>Java/JVM version: ${ant.java.version}</echo> 
	   <echo>Java/JVM detail version: ${java.version}</echo> 
	</target>
	<!--
	<target name="build-all-jars-adc" depends="build-analytics,
						build-ftl,
						build-all-core,
						build-beviews,
						build-as-channel,
						build-as3-channel,
						build-sb-channel,
						build-channel-api,
						build-hawk-channel,
						build-kafka,
						build-kafka-channel,
						build-kafka-streams,
						build-kinesis-channel,
						build-mqtt-channel,
						build-tea-agent-package,
						build-liveview,
						build-docker,
						build-store,
						build-studio,
						build-studiofunctions">
	</target>
	-->

	<target name="build-all-docs" depends="build-api" />

	<target name="build-all-tests" depends="build-tests" />

	<!-- ============= -->
	<!-- obfuscate-all -->
	<!-- ============= -->

	<target name="obfuscate-all" depends="set-all,
                                          build-obfuscator,
                                          obfuscate-runtime-jars,
                                          obfuscate-mm-jars,
                                          obfuscate-rms-jars,
                                          obfuscate-views-jars,
                                          zip-obfuscation-logs">
	</target>

	<target name="obfuscate-runtime-jars">
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="be-functions" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="be-studiofunctions" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-backingstore" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-base" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-container" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-datagrid-oracle" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-datagrid-tibco" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-drivers" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-kernel" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-migration" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-modules" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-pattern" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-security" />
		</antcall>
		<antcall target="obfuscate-runtime-jar">
			<param name="jarname" value="cep-ui-rt-common" />
		</antcall>
		<!-- <antcall target="obfuscate-runtime-jar">
    		<param name="jarname" value="cep-ftl" />
    	</antcall> -->
	</target>

	<target name="obfuscate-mm-jars">
		<antcall target="obfuscate-mm-jar">
			<param name="jarname" value="be-mm" />
		</antcall>
		<antcall target="obfuscate-mm-jar">
			<param name="jarname" value="cep-thread-analyzer" />
		</antcall>
	</target>

	<target name="obfuscate-rms-jars">
		<antcall target="obfuscate-rms-jar">
			<param name="jarname" value="cep-rms" />
		</antcall>
		<!--     <antcall target="obfuscate-rms-jar">
            <param name="jarname" value="cep-ui-rms-common" />
        </antcall>-->
	</target>

	<target name="obfuscate-studio-jars">
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.datamodeling" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.datamodeling.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.table.capabilities" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.table.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.table.core" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.tree.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.tree.core" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.decision.tree.ui" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.diagramming" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.eventstreamprocessing" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.eventstreamprocessing.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.rt" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.security" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.sharedresource" />
			<param name="bypass" value="true" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.cli" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.core" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.dashboard.common" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.dashboard.core" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.dashboard.ui.chartcomponent" />
			<param name="bypass" value="true" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.dashboard.ui.statemachinecomponent" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.dbconcept" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.debug.ui" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.mapper" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.rms.core" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.tester.ui" />
			<param name="bypass" value="true" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.ui.editors" />
			<param name="bypass" value="true" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.ui.navigator" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.ui.statemachine" />
			<param name="bypass" value="true" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.util" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.ws" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.studio.xerces" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.thirdparty" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.tpcl" />
		</antcall>
		<antcall target="obfuscate-studio-jar">
			<param name="jarname" value="com.tibco.cep.tra" />
		</antcall>
	</target>

	<target name="obfuscate-views-jars">
		<antcall target="obfuscate-views-jar">
			<param name="jarname" value="be-dashboardagent" />
		</antcall>
		<antcall target="obfuscate-views-jar">
			<param name="jarname" value="be-dashboardagent-rt-common" />
		</antcall>
		<antcall target="obfuscate-views-jar">
			<param name="jarname" value="cep-metric" />
		</antcall>
	</target>

	<target name="obfuscate-jide-jars">
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-common" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-components" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-dialogs" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-dock" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-editor" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-grids" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-pivot" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-shortcut" />
		</antcall>
		<antcall target="obfuscate-jide-jar">
			<param name="jarname" value="jide-action" />
		</antcall>
	</target>

	<target name="obfuscate-runtime-jar">
		<antcall target="obfuscate-jar">
			<param name="jardir" value="${lib.exp}" />
			<param name="jarbasename" value="${jarname}" />
			<param name="jarname" value="${jarname}" />
		</antcall>
	</target>

	<target name="obfuscate-mm-jar">
		<antcall target="obfuscate-jar">
			<param name="jardir" value="${lib.exp}" />
			<param name="jarbasename" value="${jarname}" />
			<param name="jarname" value="${jarname}" />
		</antcall>
	</target>

	<target name="obfuscate-rms-jar">
		<antcall target="obfuscate-jar">
			<param name="jardir" value="${rms.exp}/lib" />
			<param name="jarbasename" value="${jarname}" />
			<param name="jarname" value="${jarname}" />
		</antcall>
	</target>

	<target name="obfuscate-studio-jar">
		<if>
			<or>
				<and>
					<equals arg1="${env.BYPASS_OBFUSCATE_STUDIO_ENABLE}" arg2="true" />
					<equals arg1="${bypass}" arg2="true" />
				</and>
				<equals arg1="${jarname}" arg2="com.tibco.cep.studio.ui.editors" />
				<equals arg1="${jarname}" arg2="com.tibco.cep.studio.tester.ui" />
			</or>
			<then>
			</then>
			<else>
				<antcall target="obfuscate-jar">
					<param name="jardir" value="${studio.exp}/studio/eclipse/plugins" />
					<param name="jarbasename" value="${jarname}" />
					<param name="jarname" value="${jarname}_${UI_PLUGINS_VERSION}" />
				</antcall>
			</else>
		</if>
	</target>

	<target name="obfuscate-views-jar">
		<antcall target="obfuscate-jar">
			<param name="jardir" value="${be.exp}/views/lib" />
			<param name="jarbasename" value="${jarname}" />
			<param name="jarname" value="${jarname}" />
		</antcall>
	</target>

	<target name="obfuscate-jide-jar">
		<antcall target="obfuscate-jar">
			<param name="jardir" value="${be.exp}/lib/ext/tpcl/jide" />
			<param name="jarbasename" value="${jarname}" />
			<param name="jarname" value="${jarname}" />
		</antcall>
	</target>


	<!-- ============= -->
	<!-- obfuscate-jar -->
	<!-- ============= -->

	<target name="obfuscate-jar" depends="set-all">
		<property name="srcjar" value="${jardir}/${jarname}.jar" />
		<property name="obfjar" value="${jardir}/${jarname}-obf.jar" />
		<!-- <property name="obfjar" value="${jardir}/obf/${jarname}.jar" /> -->

		<if>
			<equals arg1="${env.ISWINDOWS}" arg2="1" />
			<then>
				<property name="os" value="win" />
			</then>
			<else>
				<property name="os" value="${env.OS}" />
			</else>
		</if>

		<if>
			<equals arg1="${jarname}" arg2="jide-grids"/>
			<then>
				<property name="scriptfile" value="jgridobfscript.rgs" />
			</then>
			<else>
				<property name="scriptfile" value="obfscript.rgs" />
			</else>
		</if>

		<property name="os" value="${jardir}/${jarname}-obf.jar" />

		<if>
			<equals arg1="${env.BYPASS_OBFUSCATE_ENABLE}" arg2="true" />
			<then>
			</then>
			<else>
				<property name="logdir" value="${env.SRC_ROOT}/build/logs" />
				<mkdir dir="${logdir}" />
				<java classname="com.tibco.cep.obfuscator.ObfuscateHelper" fork="true" failonerror="true" maxmemory="512m">
					<classpath>
						<path refid="retro.classpath" />
						<path refid="tra.classpath" />
						<path refid="tpcl.classpath" />
						<path refid="rv.classpath" />
						<path refid="poi.classpath" />
						<path refid="jide.classpath" />
						<path refid="tomsawyer.rel.classpath" />
						<path refid="antlr.classpath" />
						<path refid="eclipse.classpath" />
						<path refid="bw.classpath" />
						<path refid="apache.commons.classpath" />
						<path refid="httpcomponents.classpath" />
						<path refid="bdbje.classpath" />
						<path refid="hawk.classpath" />
						<path refid="oracle.classpath" />
						<path refid="sb.classpath" />
						<path refid="tomcat.classpath" />
						<path refid="tangosol.classpath" />
						<path refid="javassist.classpath" />
						<path refid="as.classpath" />
						<path refid="xdoclet.classpath" />
						<path refid="studio.classpath" />
						<path refid="stringtemplate.classpath" />
						<path refid="castor.classpath" />
						<path refid="velocity.classpath" />
						<path refid="jackson.classpath" />
						<path location="${obfuscator.bld}" />
						<path location="${kernel.bld}" />
						<path location="${base.bld}" />
						<path location="${common.bld}" />
						<path location="${drivers.bld}" />
						<path location="${functions.bld}" />
						<path location="${studiofunctions.bld}" />
						<path location="${container.bld}" />
						<path location="${datagrid-oracle.bld}" />
						<path location="${engine.bld}" />
						<path location="${bpmn.bld}" />
						<path location="${interpreter.bld}" />
						<path location="${query.bld}" />
						<path location="${backingstore.bld}" />
						<path location="${metricengine.bld}" />
						<path location="${modules.bld}" />
						<path location="${security.bld}" />
						<path location="${analytics.bld}" />
						<path location="${ftl.bld}" />
					</classpath>
					<arg line="${srcjar} ${obfjar} ${obfuscator.src}/${scriptfile} ${logdir}/${jarbasename}-obf-${os}.log" />
				</java>

				<!-- <delete file="${srcjar}" /> -->
				<mkdir dir="${jardir}/un-obf" />
				<move file="${srcjar}" todir="${jardir}/un-obf" />
				<move file="${obfjar}" tofile="${srcjar}" />
			</else>
		</if>
	</target>

	<target name="zip-obfuscation-logs" depends="set-all">
		<property name="logdir" value="${env.SRC_ROOT}/build/logs" />
		<if>
			<equals arg1="${env.ISWINDOWS}" arg2="1" />
			<then>
				<property name="os" value="win" />
			</then>
			<else>
				<property name="os" value="${env.OS}" />
			</else>
		</if>
		<zip destfile="${logdir}/obfuscation-logs-${os}.zip" basedir="${logdir}" includes="**/*-obf-${os}.log">
		</zip>
		<delete>
			<fileset dir="${logdir}" includes="**/*-obf-${os}.log" />
		</delete>
	</target>

	<!-- ================ -->
	<!-- build-assemblies -->
	<!-- ================ -->

	<target name="build-assemblies" depends="set-all">
		<subant target="build-assemblies" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="build-assemblies-hotfix" depends="set-all, build-assemblies">
		<subant target="build-assemblies-hotfix" inheritall="true">
			<property file="${be.basedir}/version_hf.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="repackage-all-hotfix" depends="clean-doc, import-doc,
                                                    build-assemblies-hotfix">
	</target>

	<target name="build-assemblies-servicepack" depends="set-all, build-assemblies">
		<subant target="build-assemblies-servicepack" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="clean-assemblies-servicepack" depends="set-all">
		<subant target="clean-assemblies-servicepack" inheritall="true">
			<property file="${be.basedir}/version.properties" />
			<fileset dir="." includes="assemble.xml" />
		</subant>
	</target>

	<target name="repackage-all-servicepack" depends="clean-doc, import-doc,
                                                    build-assemblies-servicepack">
	</target>



	<target name="repackage-all" depends="clean-doc,
                                          import-doc,
                                          build-assemblies">
	</target>


	<!-- =================== -->
	<!-- build-release-tools -->
	<!-- =================== -->

	<target name="build-release-tools" depends="set-all">

		<mkdir dir="${releasetools.exp}"/>

		<javac srcdir="${releasetools.src}"
               destdir="${releasetools.exp}"
               debug="on"
               source="${javacSource}"
               encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<classpath>
				<path refid="tra.classpath" />
				<path refid="svnkit.classpath" />
			</classpath>
			<include name="**/*.java"/>
		</javac>

		<copy todir="${releasetools.exp}">
			<fileset dir="${releasetools.src}">
				<include name="**/*"/>
			</fileset>
		</copy>

	</target>

	<!-- ========================== -->
	<!-- build-assemble-file-base -->
	<!-- ========================== -->

	<target name="build-assemble-file-base">
		<copy file="${env.SRC_ROOT}/build/tools/releases/src/com/tibco/cep/releases/be/assembleTemplate.xml" tofile="${env.SRC_ROOT}/build/assemble.xml" overwrite="true"/>
	</target>

	<!-- ========================== -->
	<!-- build-assemble-file-hotfix -->
	<!-- ========================== -->

	<target name="build-assemble-file-hotfix" depends="build-release-tools">
		<if>
			<os family="windows"/>
			<then>
				<java maxmemory="128m"
                      classname="com.tibco.cep.releases.be.BeAssembleProvider"
                      fork="true"
                      logerror="true"
                      output="${env.SRC_ROOT}/build/assemble.xml">
					<classpath>
						<path refid="tra.classpath"/>
						<path refid="svnkit.jna.classpath"/>
						<path location="${releasetools.exp}"/>
					</classpath>
					<arg value="http://svn.tibco.com/be"/>
					<arg value="${BE_VERSION_MAJOR}.${BE_VERSION_MINOR}"/>
					<arg value="54089"/>
					<arg value="${env.BE_REVISION}"/>
					<arg value="HOTFIX"/>
				</java>
			</then>
			<else>
				<java maxmemory="128m"
                      classname="com.tibco.cep.releases.be.BeAssembleProvider"
                      fork="true"
                      logerror="true"
                      output="${env.SRC_ROOT}/build/assemble.xml">
					<classpath>
						<path refid="tra.classpath"/>
						<path refid="svnkit.classpath"/>
						<path location="${releasetools.exp}"/>
					</classpath>
					<arg value="http://svn.tibco.com/be"/>
					<arg value="${BE_VERSION_MAJOR}.${BE_VERSION_MINOR}"/>
					<arg value="54089"/>
					<arg value="${env.BE_REVISION}"/>
					<arg value="HOTFIX"/>
				</java>
			</else>
		</if>
	</target>


	<!-- =============================== -->
	<!-- build-assemble-file-servicepack -->
	<!-- =============================== -->

	<target name="build-assemble-file-servicepack" depends="build-release-tools">
		<if>
			<os family="windows"/>
			<then>
				<java maxmemory="128m"
                      classname="com.tibco.cep.releases.be.BeAssembleProvider"
                      fork="true"
                      logerror="true"
                      output="${env.SRC_ROOT}/build/assemble.xml">
					<classpath>
						<path refid="tra.classpath"/>
						<path refid="svnkit.jna.classpath"/>
						<path location="${releasetools.exp}"/>
					</classpath>
					<arg value="http://svn.tibco.com/be"/>
					<arg value="${BE_VERSION_MAJOR}.${BE_VERSION_MINOR}"/>
					<arg value="54089"/>
					<arg value="${env.BE_REVISION}"/>
					<arg value="SERVICE_PACK"/>
				</java>
			</then>
			<else>
				<java maxmemory="128m"
                      classname="com.tibco.cep.releases.be.BeAssembleProvider"
                      fork="true"
                      logerror="true"
                      output="${env.SRC_ROOT}/build/assemble.xml">
					<classpath>
						<path refid="tra.classpath"/>
						<path refid="svnkit.classpath"/>
						<path location="${releasetools.exp}"/>
					</classpath>
					<arg value="http://svn.tibco.com/be"/>
					<arg value="${BE_VERSION_MAJOR}.${BE_VERSION_MINOR}"/>
					<arg value="54089"/>
					<arg value="${env.BE_REVISION}"/>
					<arg value="SERVICE_PACK"/>
				</java>
			</else>
		</if>
	</target>

	<!-- ******** -->
	<!-- import-* -->
	<!-- ******** -->

	<!-- ============ -->
	<!-- import-antlr -->
	<!-- ============ -->

	<target name="import-antlr" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${ANTLR_LIB}">
				<include name="antlr-${env.ANTLR_VERSION}.jar" />
			</fileset>
		</copy>
	</target>
	
	<target name="import-jaxb" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JAXB_LIB}">
				<include name="jaxb-api-2.3.1.jar" />
			</fileset>
			<fileset dir="${JAXB_IMPL_LIB}">
				<include name="jaxb-impl.jar" />
			</fileset>
			<fileset dir="${JAXB_CORE_LIB}">
				<include name="jaxb-core.jar" />
			</fileset>
		</copy>
	</target>
	
	<target name="import-jaxws" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JAXWS_LIB}">
				<include name="jakarta.xml.soap-api.jar" />
				<include name="saaj-impl.jar" />
				<include name="stax-ex.jar" />
				<include name="stax2-api.jar" />
			</fileset>
			
		</copy>
	</target>
	
	<target name="import-javax-activation" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JAVAX_ACTIVATION_LIB}">
				<include name="javax.activation-1.2.0.jar" />
			</fileset>
		</copy>
	</target>
	
	
	<!-- ============== -->
	<!-- import-jackson -->
	<!-- ============== -->

	<target name="import-jackson" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JACKSON_LIB}">
				<include name="**/*.jar" />
				<exclude name="**/*-javadoc.jar" />
				<exclude name="**/*-sources.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ==================== -->
	<!-- import-be-engine-xml -->
	<!-- ==================== -->

	<target name="import-be-engine-xml" depends="set-all">
		<mkdir dir="${lib.exp}/com/tibco/deployment" />
		<copy todir="${lib.exp}/com/tibco/deployment">
			<fileset dir="${env.SRC_ROOT}/build">
				<include name="be-engine.xml" />
			</fileset>
		</copy>
	</target>

	<!-- ========== -->
	<!-- import-doc -->
	<!-- ========== -->

	<target name="import-doc" depends="set-all">
		<!-- Doing nothing here as there is a need to remove docs from assemblies, imort doc target should be removed on final decision -->
		<!-- We still would need to bundle eclipse jars, this is done in assemble.xml -->

		<!--<copy verbose="${verbose}" todir="${doc.exp}/doc_be">
                <fileset dir="${env.DOC_HOME}/businessevents-standard/${BE_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be/doc/standard">
                <fileset dir="${env.DOC_HOME}/businessevents-standard/${BE_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />
                </fileset>
            </copy>

            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_data_mod">
                <fileset dir="${env.DOC_HOME}/businessevents-datamodeling/${BE_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_data_mod/doc/data_modeling">
                <fileset dir="${env.DOC_HOME}/businessevents-datamodeling/${BE_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />
                </fileset>
            </copy>

            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_dec_man">
                <fileset dir="${env.DOC_HOME}/businessevents-decisionmanager/${BE_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_dec_man/doc/decision_manager">
                <fileset dir="${env.DOC_HOME}/businessevents-decisionmanager/${BE_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />

                </fileset>
            </copy>

            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_esp">
                <fileset dir="${env.DOC_HOME}/businessevents-eventstreamprocessing/${BE_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_esp/doc/event_stream_processing">
                <fileset dir="${env.DOC_HOME}/businessevents-eventstreamprocessing/${BE_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />
                </fileset>
            </copy>

            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_process">
                <fileset dir="${env.DOC_HOME}/businessevents-process/${BE_BPMN_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_process/doc/process_orchestration">
                <fileset dir="${env.DOC_HOME}/businessevents-process/${BE_BPMN_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />
                </fileset>
            </copy>

            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_views">
                <fileset dir="${env.DOC_HOME}/businessevents-views/${BE_VERSION}">
                    <include name="license/**" />
                    <include name="release/**" />
                </fileset>
            </copy>
            <copy verbose="${verbose}" todir="${doc.exp}/doc_be_views/doc/views">
                <fileset dir="${env.DOC_HOME}/businessevents-views/${BE_VERSION}/doc">
                    <include name="html/**" />
                    <include name="pdf/**" />
                </fileset>
            </copy>-->

	</target>

	<!-- ================ -->
	<!-- import-gwt -->
	<!-- ================ -->

	<target name="import-gwt" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/gwt" />
		<copy todir="${lib.exp}/ext/tpcl/gwt">
			<fileset dir="${GWT_LIB}">
				<include name="gwt-*.jar" />
				<include name="validation-api-*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ================ -->
	<!-- import-javassist -->
	<!-- ================ -->

	<target name="import-javassist" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JAVASSIST_LIB}">
				<include name="javassist.jar" />
			</fileset>
		</copy>
	</target>

	<!-- =========== -->
	<!-- import-jpmml -->
	<!-- =========== -->

	<target name="import-jpmml" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/pmml" />
		<copy todir="${lib.exp}/ext/tpcl/pmml">
			<fileset dir="${JPMML_LIB}">
				<include name="commons-math3.jar" />
				<include name="pmml*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- =========== -->
	<!-- import-jsch -->
	<!-- =========== -->

	<target name="import-jsch" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${JSCH_LIB}">
				<include name="jsch-${env.JSCH_VERSION}.jar" />
			</fileset>
		</copy>
	</target>


	<!-- =========== -->
	<!-- import-jide -->
	<!-- =========== -->

	<target name="import-jide" depends="set-all">
		<antcall target="clean-jide" />
		<mkdir dir="${lib.exp}/ext/tpcl/jide" />
		<copy todir="${lib.exp}/ext/tpcl/jide">
			<fileset dir="${JIDE_LIB}">
				<include name="jide-action.jar" />
				<include name="jide-common.jar" />
				<include name="jide-components.jar" />
				<include name="jide-dialogs.jar" />
				<include name="jide-dock.jar" />
				<include name="jide-editor.jar" />
				<include name="jide-grids.jar" />
				<include name="jide-pivot.jar" />
				<include name="jide-shortcut.jar" />
			</fileset>
		</copy>
	</target>

	<!-- =============== -->
	<!-- import-httpcore -->
	<!-- =============== -->

	<target name="import-httpcore" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${HTTPCORE_LIB}">
				<include name="httpcore-nio-${env.HTTPCORE_VERSION}.jar" />
				<include name="httpcore-${env.HTTPCORE_VERSION}.jar" />
			</fileset>
			<fileset dir="${HTTPCORE_CLIENT_LIB}">
				<include name="httpclient-${env.HTTPCORE_CLIENT_VERSION}.jar" />
				<include name="httpmime-${env.HTTPCORE_CLIENT_VERSION}.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ====================== -->
	<!-- import-apache-commons -->
	<!-- ====================== -->

	<target name="import-apache-commons" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${APACHE_COMMONS_COLLECTIONS_LIB}" includes="*${env.APACHE_COMMONS_COLLECTIONS_VERSION}.jar" />
			<fileset dir="${APACHE_COMMONS_JEXL_LIB}" includes="*${env.APACHE_COMMONS_JEXL_VERSION}.jar" />
			<fileset dir="${APACHE_COMMONS_LANG_LIB}" includes="*${env.APACHE_COMMONS_LANG_VERSION}.jar" />
		</copy>
	</target>

	<!-- ============ -->
	<!-- import-log4j -->
	<!-- ============ -->

	<target name="import-log4j" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${LOG4J_LIB}">
				<include name="log4j-${env.LOG4J_VERSION}.jar" />
			</fileset>
			<fileset dir="${env.SRC_ROOT}/build">
				<include name="log4j.xml" />
			</fileset>
		</copy>
	</target>

	<!-- ========== -->
	<!-- import-poi -->
	<!-- ========== -->

	<target name="import-poi" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${POI_LIB}">
				<include name="poi-${POI_VERSION_DATE}.jar" />
				<include name="poi-ooxml-${POI_VERSION_DATE}.jar" />
				<include name="poi-ooxml-schemas-${POI_VERSION_DATE}.jar" />
				<include name="poi-scratchpad-${POI_VERSION_DATE}.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ===================== -->
	<!-- import-stringtemplate -->
	<!-- ===================== -->
	<!-- [TODO] - We probably shouldn't need StringTemplate, as this conflicts with Antlr -->
	<target name="import-stringtemplate" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${ST_LIB}">
				<include name="stringtemplate.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ========= -->
	<!-- import-as -->
	<!-- ========= -->

	<target name="import-as" depends="set-all">
		<mkdir dir="${lib.exp}/ext" />
		<copy todir="${lib.exp}/ext">
			<fileset dir="${AS_LIB}">
				<include name="**/as*" />
				<exclude name="**/as-agent*" />
				<include name="**/libas*" />
			</fileset>
		</copy>
	</target>

	<!-- ========= -->
	<!-- import-aws -->
	<!-- ========= -->

	<target name="import-aws" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/aws" />
		<copy todir="${lib.exp}/ext/tpcl/aws">
			<fileset dir="${AWS_JAVA_SDK_LIB}">
				<include name="aws-java-sdk-${env.AWS_JAVA_SDK_VERSION}.jar" />
			</fileset>
			<fileset dir="${AWS_JAVA_SDK_THIRD_PARTY_LIB}">
				<include name="commons-codec-1.10.jar" />
				<include name="ion-java-1.0.2.jar" />
				<include name="jackson-dataformat-cbor-2.6.7.jar" />
				<include name="joda-time-2.8.1.jar" />
			</fileset>
			<fileset dir="${PROTOBUF-JAVA_LIB}">
				<include name="protobuf-java-3.6.0.jar" />
			</fileset>
			<fileset dir="${TEA_AGENT_LIB}">
				<include name="guava-22.0.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ============ -->
	<!-- import-slf4j -->
	<!-- ============ -->

	<target name="import-slf4j" depends="set-all">
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${env.SLF4J_HOME}">
				<include name="slf4j-api-${env.SLF4J_VERSION}.jar" />
				<include name="slf4j-log4j12-${env.SLF4J_VERSION}.jar" />
			</fileset>
		</copy>
	</target>

	<!-- =============== -->
	<!-- import-tangosol -->
	<!-- =============== -->

	<!--
    <target name="import-tangosol" depends="set-all">
        <mkdir dir="${lib.exp}/ext"/>
        <mkdir dir="${tangosol.bld}"/>
        <mkdir dir="${tangosol.bld}/tangosol"/>
        <mkdir dir="${tangosol.bld}/coherence"/>
        <mkdir dir="${tangosol.bld}/patches"/>

        <unjar dest="${tangosol.bld}/coherence">
            <fileset dir="${TANGOSOL_LIB}">
                <include name="coherence.jar"/>
            </fileset>
        </unjar>
        <unjar dest="${tangosol.bld}/patches">
            <fileset dir="${env.TANGOSOL_HOME}/patches">
                <include name="*-*-patch-${env.TANGOSOL_PATCH_NUM}.jar"/>
            </fileset>
        </unjar>
        <copy file="${bld.config}/tangosol-coherence.xml" tofile="${tangosol.bld}/coherence/tangosol-coherence.xml" overwrite="true"/>
        <copy file="${bld.config}/coherence-cache-config.xml" tofile="${tangosol.bld}/coherence/coherence-cache-config.xml" overwrite="true"/>
        <copy file="${bld.config}/coherence-cache-config-jdbc.xml" tofile="${tangosol.bld}/coherence/coherence-cache-config-jdbc.xml" overwrite="true"/>

        <jar destfile="${lib.exp}/ext/coherence.jar" basedir="${tangosol.bld}/coherence" manifest="${tangosol.bld}/coherence/META-INF/MANIFEST.MF"/>
        <echo message="Applying patches...coherence.jar"/>
        <jar update="true" destfile="${lib.exp}/ext/coherence.jar">
            <fileset dir="${tangosol.bld}/patches">
                <exclude name="tangosol-coherence.xml"/>
                <exclude name="coherence-cache-config.xml"/>
                <exclude name="coherence-cache-config-jdbc.xml"/>
            </fileset>
        </jar>
        <echo message="Adding be cache configs..."/>
    </target>
    -->

	<!-- ============= -->
	<!-- import-tomcat -->
	<!-- ============= -->

	<target name="import-tomcat" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${env.TOMCAT_HOME}/embedded">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${env.TOMCAT_HOME}/lib">
				<include name="catalina-ha.jar" />
				<include name="catalina-tribes.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ==================== -->
	<!-- import-tomsawyer-dev -->
	<!-- ==================== -->

	<target name="import-tomsawyer-dev" depends="set-all">
		<antcall target="clean-tomsawyer" />
		<mkdir dir="${lib.exp}/ext/tpcl/tomsawyer" />
		<copy todir="${lib.exp}/ext/tpcl/tomsawyer">
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}">
				<include name="tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dev.jar" />
				<include name="tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dev.jar" />
			</fileset>
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}/thirdparty">
				<include name="*.jar" />
				<exclude name="poi.jar" />
				<exclude name="xalan.jar" />
				<exclude name="xercesImpl.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ==================== -->
	<!-- import-tomsawyer-dep -->
	<!-- ==================== -->

	<target name="import-tomsawyer-dep" depends="set-all">
		<antcall target="clean-tomsawyer" />
		<mkdir dir="${lib.exp}/ext/tpcl/tomsawyer" />
		<copy todir="${lib.exp}/ext/tpcl/tomsawyer">
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}">
				<include name="tsallperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
				<include name="tsgwtperspectives${_TOMSAWYER_PERSPECTIVES_VERSION}dep.jar" />
			</fileset>
			<fileset dir="${TOMSAWYER_PERSPECTIVES_LIB}/thirdparty">
				<include name="*.jar" />
				<exclude name="poi.jar" />
				<exclude name="xalan.jar" />
				<exclude name="xercesImpl.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ============== -->
	<!-- import-cep-tra -->
	<!-- ============== -->

	<target name="import-cep-tra" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tibco" />
		<copy todir="${lib.exp}/ext/tibco">
			<fileset dir="${TRA_LIB}">
				<include name="Deployment.jar" />
				<include name="TIBCOrt.jar" />
				<include name="TIBCrypt.jar" />
			</fileset>
			<!--	<fileset dir="${TXML_LIB}">
				<include name="TIBCOxml.jar" />
			</fileset> -->
			<fileset dir="${BW_LIB}">
				<include name="*/**" />
			</fileset>
			<fileset dir="${SB_LIB}">
				<include name="sbclient.jar" />
				<include name="lv-client.jar" />
				<include name="lv-client-wwwdeps.jar" />
			</fileset>
			<fileset dir="${env.DBDRIVERS_HOME}">
				<include name="TIsqlserver.jar" />
			</fileset>
		</copy>
	</target>

	<!-- =============== -->
	<!-- import-cep-tpcl -->
	<!-- =============== -->

	<target name="import-cep-tpcl" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl" />
		<copy todir="${lib.exp}/ext/tpcl">
			<fileset dir="${TPCL_LIB}">
				<!--    <include name="xalan.jar" /> -->
				<include name="xercesImpl.jar" />
				<include name="mail.jar" />
			</fileset>
			<fileset dir="${XALAN_LIB}">
				<include name="xalan.jar" />
			</fileset>
			<fileset dir="${KAFKA_LIB}">
				<include name="kafka-clients-2.3.0.jar" />
				<include name="snappy-java-1.1.7.3.jar" />
				<include name="lz4-java-1.6.0.jar" />
				<include name="kafka-streams-2.3.0.jar" />
				<include name="rocksdbjni-5.18.3.jar" />
			</fileset>
			<fileset dir="${ECLIPSE_PAHO_LIB}">
				<include name="org.eclipse.paho.client.mqttv3-1.2.0.jar" />
			</fileset>
			<fileset dir="${KINESIS_LIB}">
				<include name="amazon-kinesis-client-1.11.2.jar" />
			</fileset>
			<!--<fileset dir="${TPCL_LIB}/../ant/1.6/lib">
                <include name="mail.jar"/>
            </fileset>-->
		</copy>
		<copy todir="${lib.exp}/ext/tpcl/apache">
			<fileset dir="${TPCL_LIB}">
				<include name="commons-codec-1.3.jar" />
				<include name="commons-logging.jar" />
				<include name="jakarta-regexp-1.2.jar" />
			</fileset>
			<fileset dir="${TPCL_LIB}/httpclient_3.0">
				<include name="commons-httpclient.jar" />
			</fileset>
			<fileset dir="${APACHE_COMMONS_LANG_LIB}">
				<include name="commons-lang-2.5.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ================== -->
	<!-- import-cep-eclipse -->
	<!-- ================== -->

	<target name="import-cep-eclipse" depends="set-all">
		<mkdir dir="${lib.exp}/ext/tpcl/apache" />
		<echo message="IN IMPORT-CEP-ECLIPSE"/>
		<echo message="PORT : ${env.PORT}"/>

		<mkdir dir="${lib.exp}/ext/tpcl/emf" />
		<copy todir="${lib.exp}/ext/tpcl/emf">
			<fileset dir="${be.exp}/Final/linux26gl25/x86_64/be_eclipse/eclipse-platform/eclipse/plugins">
				<include name="org.eclipse.emf.ecore_*.jar" />
				<include name="org.eclipse.emf.common_*.jar" />
				<include name="org.eclipse.emf.ecore.xmi_*.jar" />
				<include name="org.eclipse.core.resources_*.jar" />
			</fileset>
			<fileset dir="${be.exp}/Final/linux26gl25/x86_64/be_eclipse/eclipse-platform/eclipse/dropins/eclipse/plugins">
				<include name="org.eclipse.uml2.uml_*.jar" />
				<include name="org.eclipse.uml2.common_*.jar" />
				<include name="org.eclipse.uml2.types_*.jar" />
			</fileset>
			<!--   <fileset dir="${env.ECLIPSE_HOME}/plugins">
                <include name="org.eclipse.core.resources_*.jar" />
            </fileset>-->
		</copy>
		<echo message="COPY SUCCESSFUL"/>
	</target>

	<!-- ========== -->
	<!-- import-spm -->
	<!-- ========== -->
	<target name="import-spm" depends="set-all">
		<mkdir dir="${tea.agent.exp}/lib/rta" />
		<copy todir="${tea.agent.exp}/lib/rta" overwrite="true">
			<fileset dir="${SPM_LIB}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ============= -->
	<!-- import-teasdk -->
	<!-- ============= -->
	<target name="import-teasdk" depends="set-all">
		<mkdir dir="${tea.agent.exp}/lib/teasdk" />
		<copy todir="${tea.agent.exp}/lib/teasdk" overwrite="true">
			<fileset dir="${TEA_AGENT_LIB}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<!-- not needed anymore
		<copy todir="${tea.agent.exp}/lib">
			<fileset dir="${env.SLF4J_HOME}">
				<include name="slf4j-api-${env.SLF4J_VERSION}.jar" />
				<include name="slf4j-log4j12-${env.SLF4J_VERSION}.jar" />
			</fileset>
		</copy>
-->
	</target>

	<!-- ========== -->
	<!-- import-all -->
	<!-- ========== -->

	<target name="import-all" depends="import-antlr,
                                       import-as,
                                       import-aws,
                                       import-be-engine-xml,
                                       import-doc,
                                       import-httpcore,
                                       import-apache-commons,
                                       import-gwt,
                                       import-javassist,
                                       import-jpmml,
                                       import-jsch,
                                       import-log4j,
                                       import-poi,
                                       import-cep-tra,
                                       import-cep-tpcl,
                                       import-cep-eclipse,
                                       import-stringtemplate,
    								   import-slf4j,
                                       import-tomcat,
                                       import-tomsawyer-dep,
    								   import-teasdk,
									   import-jaxb,
									   import-javax-activation,
									   import-jaxws" />

	<!-- ====== -->
	<!-- sync-* -->
	<!-- ====== -->

	<!-- ======== -->
	<!-- sync-all -->
	<!-- ======== -->

	<target name="sync-all" depends="sync-external,
                                     sync-internal" />

	<!-- ============= -->
	<!-- sync-external -->
	<!-- ============= -->

	<target name="sync-external" depends="sync-antlr,
                                          sync-apache-commons,
                                          sync-bdbje,
                                          sync-bnd,
                                          sync-castor,
                                          sync-eclipse,
                                          sync-flex-autocomplete,
                                          sync-httpcore,
                                          sync-httpcore-client,
                                          sync-javacc,
                                          sync-gwt,
                                          sync-javassist,
                                          sync-jdk,
                                          sync-jide,
                                          sync-jpmml,
                                          sync-jsch,
                                          sync-log4j,
                                          sync-poi,
                                          sync-oracle,
                                          sync-retro,
    									  sync-slf4j,
                                          sync-st,
                                          sync-svnkit,
                                          sync-tangosol,
                                          sync-tomcat,
                                          sync-tomsawyer,
                                          sync-velocity,
                                          sync-xdoclet,
                                          sync-xalan,
    									  sync-bw,
    									  sync-javamail,
    									  sync-jackson,
										  sync-kafka" />

	<!-- ======== -->
	<!-- sync-ant -->
	<!-- ======== -->

	<target name="sync-ant" depends="set-properties">
		<antcall target="_sync">
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/ant/${env.ANT_VERSION}/${env.PORT}" />
			<param name="sync.dst" value="${env.ANT_HOME}" />
		</antcall>
	</target>

	<!-- ========== -->
	<!-- sync-antlr -->
	<!-- ========== -->

	<target name="sync-antlr" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/antlr/${env.ANTLR_VERSION}" />
			<param name="sync.dst" value="${env.ANTLR_HOME}" />
		</antcall>
	</target>

	<!-- =================== -->
	<!-- sync-apache-commons -->
	<!-- =================== -->

	<target name="sync-apache-commons" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/${env.APACHE_COMMONS_COLLECTIONS_PATH}/${env.APACHE_COMMONS_COLLECTIONS_VERSION}" />
			<param name="sync.dst" value="${env.APACHE_COMMONS_COLLECTIONS_HOME}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/${env.APACHE_COMMONS_JEXL_PATH}/${env.APACHE_COMMONS_JEXL_VERSION}" />
			<param name="sync.dst" value="${env.APACHE_COMMONS_JEXL_HOME}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/${env.APACHE_COMMONS_LANG_PATH}/${env.APACHE_COMMONS_LANG_VERSION}" />
			<param name="sync.dst" value="${env.APACHE_COMMONS_LANG_HOME}" />
		</antcall>
	</target>

	<!-- ========== -->
	<!-- sync-bdbje -->
	<!-- ========== -->

	<target name="sync-bdbje" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/bdbje/${env.BDBJE_VERSION}" />
			<param name="sync.dst" value="${env.BDBJE_HOME}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-bnd -->
	<!-- ======== -->

	<target name="sync-bnd" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/bnd/${env.BND_VERSION}" />
			<param name="sync.dst" value="${env.BND_HOME}" />
		</antcall>
	</target>

	<!-- =========== -->
	<!-- sync-castor -->
	<!-- =========== -->

	<target name="sync-castor" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/castor/${env.CASTOR_VERSION}" />
			<param name="sync.dst" value="${env.CASTOR_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-eclipse -->
	<!-- ============ -->

	<target name="sync-eclipse" depends="sync-eclipse-platform,
                                        sync-eclipse-deltapack,
                                        sync-eclipse-emf,
                                        sync-eclipse-mdt,
                                        sync-eclipse-nattable,
                                        sync-eclipse-epf,
                                        sync-glazedlists">
	</target>

	<!-- ===================== -->
	<!-- sync-eclipse-platform -->
	<!-- ===================== -->

	<target name="sync-eclipse-platform" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/jee/${env.ECLIPSE_VERSION}/${env.PORT}" />
			<param name="sync.dst" value="${env.ECLIPSE_HOME}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/jee/${env.ECLIPSE_VERSION}/${env.PORT}/../x86_64" />
			<param name="sync.dst" value="${env.ECLIPSE_HOME}/../x86_64" />
		</antcall>
	</target>

	<!-- ====================== -->
	<!-- sync-eclipse-deltapack -->
	<!-- ====================== -->

	<target name="sync-eclipse-deltapack" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/deltapack/${env.ECLIPSE_DELTA_PACK_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_DELTA_PACK_HOME}" />
		</antcall>
	</target>

	<!-- ================ -->
	<!-- sync-eclipse-emf -->
	<!-- ================ -->

	<target name="sync-eclipse-emf" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/emf/${env.ECLIPSE_EMF_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_EMF_HOME}/../../../${env.ECLIPSE_EMF_VERSION}/eclipse" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/emf/sdk/${env.ECLIPSE_EMF_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_EMF_HOME}" />
		</antcall>
	</target>

	<!-- ================ -->
	<!-- sync-eclipse-mdt -->
	<!-- ================ -->

	<target name="sync-eclipse-mdt" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/mdt/uml/${env.ECLIPSE_MDT_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_MDT_HOME}/../../../${env.ECLIPSE_MDT_VERSION}/eclipse" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/mdt/uml/sdk/${env.ECLIPSE_MDT_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_MDT_HOME}" />
		</antcall>
	</target>

	<!-- ===================== -->
	<!-- sync-eclipse-nattable -->
	<!-- ===================== -->

	<target name="sync-eclipse-nattable" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/nattable/${env.ECLIPSE_NATTABLE_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_NATTABLE_HOME}" />
		</antcall>
	</target>

	<!-- ================== -->
	<!-- sync-eclipse-epf   -->
	<!-- ================== -->

	<target name="sync-eclipse-epf" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/epf/richtext/${env.ECLIPSE_EPF_VERSION}/${env.PORT}/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_EPF_HOME}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/epf/richtext/${env.ECLIPSE_EPF_VERSION}/${env.PORT}/../x86_64/eclipse" />
			<param name="sync.dst" value="${env.ECLIPSE_EPF_HOME}/../../x86_64/eclipse" />
		</antcall>
	</target>

	
	<!-- ===================== -->
	<!-- sync-flexautocomplete -->
	<!-- ===================== -->

	<target name="sync-flex-autocomplete" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="doc/**" />
			<exclude name="examples/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/adobe/flex/autocomplete/${env.FLEXAUTOCOMPLETE_VERSION}/" />
			<param name="sync.dst" value="${env.FLEXAUTOCOMPLETE_HOME}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-ftl -->
	<!-- ======== -->

	<target name="sync-ftl" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/ftl/${env.FTL_VERSION}/${env.FTL_TAG}/${env.PORT}" />
			<param name="sync.dst" value="${env.FTL_HOME}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-tea -->
	<!-- ======== -->

	<target name="sync-tea" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/tea/${env.TEA_VERSION}/${env.TEA_VERSION_TAG}/rel" />
			<param name="sync.dst" value="${env.TEA_HOME}/${env.TEA_VERSION_TAG}/rel" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/teaclient/${env.TEA_VERSION}/${env.TEA_AGENTLIB_VERSION_TAG}/lib" />
			<param name="sync.dst" value="${env.TEA_CLIENT_HOME}/${env.TEA_AGENTLIB_VERSION_TAG}/lib" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-spm -->
	<!-- ======== -->

	<target name="sync-spm" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/spm/${env.SPM_VERSION}/${env.LATEST}/rel" />
			<param name="sync.dst" value="${env.SPM_HOME}/${env.PORT}" />
		</antcall>
	</target>
	
	<!-- ======== -->
	<!-- sync-dbdrivers -->
	<!-- ======== -->

	<target name="sync-dbdrivers" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="Help/**" />
			<exclude name="SQLServer_JTA/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/dbdrivers/${env.DBDRIVERS_VERSION}/${env.DBDRIVERS_TAG}/${env.PORT}" />
			<param name="sync.dst" value="${env.DBDRIVERS_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-jackson -->
	<!-- ============ -->

	<target name="sync-jackson" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/json/jackson/${env.JACKSON_VERSION}/lib" />
			<param name="sync.dst" value="${JACKSON_LIB}" />
		</antcall>
	</target>


	<!-- ================ -->
	<!-- sync-glazedlists -->
	<!-- ================ -->

	<target name="sync-glazedlists" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/glazedlists/${env.GLAZEDLISTS_VERSION}/eclipse" />
			<param name="sync.dst" value="${env.GLAZEDLISTS_HOME}" />
		</antcall>
	</target>

	<!-- ============== -->
	<!-- sync-gwt -->
	<!-- ============== -->

	<target name="sync-gwt" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/gwt/${env.GWT_VERSION}" />
			<param name="sync.dst" value="${env.GWT_HOME}" />
		</antcall>
	</target>

	<target name="sync-smartgwt" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="apache-ant-1.7.1/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/smartgwt/${env.SMARTGWT_EE_VERSION}" />
			<param name="sync.dst" value="${env.SMARTGWT_EE_HOME}" />
		</antcall>
	</target>

	<!-- ============= -->
	<!-- sync-httpcore -->
	<!-- ============= -->

	<target name="sync-httpcore" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="tutorial/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/httpcore/${env.HTTPCORE_VERSION}" />
			<param name="sync.dst" value="${env.HTTPCORE_HOME}" />
		</antcall>
	</target>

	<!-- ==================== -->
	<!-- sync-httpcore-client -->
	<!-- ==================== -->

	<target name="sync-httpcore-client" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="tutorial/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/httpcore/client/${env.HTTPCORE_CLIENT_VERSION}" />
			<param name="sync.dst" value="${env.HTTPCORE_CLIENT_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-javamil -->
	<!-- ============ -->

	<target name="sync-javamail" depends="set-properties">
		<if>
			<isset property="env.JAVAMAIL_LIB"/>
			<then>
				<patternset id="exclude.dirs">
					<exclude name="*doc*/**" />
					<exclude name="*ample*/**" />
					<exclude name="src/**" />
					<exclude name="test/**" />
				</patternset>
				<antcall target="_sync">
					<reference refid="exclude.dirs" torefid="exclude.dirs" />
					<param name="sync.src" value="${env.SYNC_EXTERNAL}/javamail/${env.JAVAMAIL_VERSION}" />
					<param name="sync.dst" value="${env.JAVAMAIL_HOME}" />
				</antcall>
				<copy todir="${TPCL_LIB}" verbose="${verbose}">
					<fileset dir="${env.JAVAMAIL_LIB}">
						<include name="mail.jar" />
					</fileset>
				</copy>
			</then>
			<else>
				<echo message="Did not find env.JAVAMAIL_LIB defined in shared.properties"/>
			</else>
		</if>
	</target>

	<!-- =========== -->
	<!-- sync-javacc -->
	<!-- =========== -->

	<target name="sync-javacc" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/javacc/${env.JAVACC_VERSION}/lib" />
			<param name="sync.dst" value="${JAVACC_LIB}" />
		</antcall>
	</target>

	<!-- ============== -->
	<!-- sync-javassist -->
	<!-- ============== -->

	<target name="sync-javassist" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="html/**" />
			<exclude name="tutorial/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/javassist/${env.JAVASSIST_VERSION}" />
			<param name="sync.dst" value="${env.JAVASSIST_HOME}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-jdk -->
	<!-- ======== -->

	<target name="sync-jdk" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="demo/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/jdk/${env.JDK_VERSION}/${env.PORT}" />
			<param name="sync.dst" value="${env.JDK_HOME}/${env.PORT}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/jdk/${env.JDK_VERSION}/${env.PORT}/../x86_64" />
			<param name="sync.dst" value="${env.JDK_HOME}/${env.PORT}/../x86_64" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-jide -->
	<!-- ========= -->

	<target name="sync-jide" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/jide/${env.JIDE_VERSION}" />
			<param name="sync.dst" value="${env.JIDE_HOME}" />
		</antcall>
	</target>



	<!-- ========= -->
	<!-- sync-jpmml -->
	<!-- ========= -->

	<target name="sync-jpmml" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/jpmml/${env.JPMML_VERSION}" />
			<param name="sync.dst" value="${env.JPMML_HOME}" />
		</antcall>

	</target>

	<!-- ========= -->
	<!-- sync-jsch -->
	<!-- ========= -->

	<target name="sync-jsch" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/jsch/${env.JSCH_VERSION}" />
			<param name="sync.dst" value="${env.JSCH_HOME}" />
		</antcall>

	</target>

	<!-- ========== -->
	<!-- sync-log4j -->
	<!-- ========== -->

	<target name="sync-log4j" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test*/**" />
			<exclude name="contribs/**" />
			<exclude name="site/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/log4j/${env.LOG4J_VERSION}" />
			<param name="sync.dst" value="${env.LOG4J_HOME}" />
		</antcall>
	</target>

	<!-- =========== -->
	<!-- sync-oracle -->
	<!-- =========== -->

	<target name="sync-oracle" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/oracle/${env.ORACLE_VERSION}" />
			<param name="sync.dst" value="${env.ORACLE_HOME}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-poi -->
	<!-- ======== -->

	<target name="sync-poi" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/poi/${env.POI_VERSION}" />
			<param name="sync.dst" value="${env.POI_HOME}" />
		</antcall>

	</target>

	<!-- ========== -->
	<!-- sync-retro -->
	<!-- ========== -->

	<target name="sync-retro" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/retro/${env.RETRO_VERSION}" />
			<param name="sync.dst" value="${env.RETRO_HOME}" />
		</antcall>
	</target>

	<!-- ======= -->
	<!-- sync-st -->
	<!-- ======= -->

	<target name="sync-st" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/st/${env.ST_VERSION}" />
			<param name="sync.dst" value="${env.ST_HOME}" />
		</antcall>
	</target>

	<!-- =========== -->
	<!-- sync-svnkit -->
	<!-- =========== -->

	<target name="sync-svnkit" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/svnkit/${env.SVNKIT_VERSION}"/>
			<param name="sync.dst" value="${env.SVNKIT_HOME}"/>
		</antcall>
	</target>

	<!-- ============= -->
	<!-- sync-tangosol -->
	<!-- ============= -->

	<target name="sync-tangosol" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/tangosol/${env.TANGOSOL_VERSION}" />
			<param name="sync.dst" value="${env.TANGOSOL_HOME}" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-terr -->
	<!-- ========= -->

	<target name="sync-terr" depends="set-properties">
		<if>
			<or>
				<matches pattern="win" string="${env.PORT}"/>
				<matches pattern="linux26gl25" string="${env.PORT}"/>
			</or>
			<then>
				<patternset id="exclude.dirs">
					<exclude name="*doc*/**" />
					<exclude name="*ample*/**" />
					<exclude name="src/**" />
					<exclude name="test/**" />
					<exclude name="scripts/**" />
					<exclude name="lib/**" />
					<exclude name="share/**" />
					<exclude name="unins*" />
				</patternset>
				<antcall target="_sync">
					<reference refid="exclude.dirs" torefid="exclude.dirs" />
					<param name="sync.src" value="${env.SYNC_INTERNAL}/terr/${env.TERR_VERSION}/${env.LATEST}/${env.PORT}" />
					<param name="sync.dst" value="${env.TSI.TERR_HOME}/${env.LATEST}/${env.PORT}" />
				</antcall>
			</then>
			<else>
				<if>
					<matches pattern="macosx" string="${env.PORT}"/>
					<then>
						<property name="macosx_terr.bld" value="${env.TSI.TERR_HOME}/${env.LATEST}/macosx/x86_64" />
						<mkdir dir="${macosx_terr.bld}/library"/>
						<copy todir="${macosx_terr.bld}/library" verbose="${verbose}">
							<fileset dir="${env.SYNC_INTERNAL}/terr/${env.TERR_VERSION}/${env.LATEST}/linux26gl25/x86_64/library">
								<include name="**" />
							</fileset>
						</copy>
					</then>
				</if>
			</else>
		</if>
	</target>


	<!-- =========== -->
	<!-- sync-tomcat -->
	<!-- =========== -->

	<target name="sync-tomcat" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="webapps/*doc*/**" />
			<exclude name="webapps/*ample*/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/tomcat/${env.TOMCAT_VERSION}" />
			<param name="sync.dst" value="${env.TOMCAT_HOME}" />
		</antcall>
	</target>

	<!-- ============== -->
	<!-- sync-tomsawyer -->
	<!-- ============== -->

	<target name="sync-tomsawyer" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="install/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/tomsawyer/perspectives/${env.TOMSAWYER_PERSPECTIVES_VERSION}" />
			<param name="sync.dst" value="${env.TOMSAWYER_PERSPECTIVES_HOME}" />
		</antcall>
	</target>

	<!-- ============== -->
	<!-- sync-velocity -->
	<!-- ============== -->

	<target name="sync-velocity" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="build/**" />
			<exclude name="convert/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/velocity/${env.VELOCITY_VERSION}" />
			<param name="sync.dst" value="${env.VELOCITY_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-xdoclet -->
	<!-- ============ -->

	<target name="sync-xdoclet" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/xdoclet/${env.XDOCLET_VERSION}" />
			<param name="sync.dst" value="${env.XDOCLET_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-xalan -->
	<!-- ============ -->

	<target name="sync-xalan" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/xalan/${env.XALAN_VERSION}" />
			<param name="sync.dst" value="${env.XALAN_HOME}" />
		</antcall>
	</target>

	<!-- ============ -->
	<!-- sync-kafka -->
	<!-- ============ -->
	<target name="sync-kafka" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/apache/kafka/${env.KAFKA_VERSION}" />
			<param name="sync.dst" value="${env.KAFKA_HOME}" />
		</antcall>
	</target>
	
	<!-- ============ -->
		<!-- sync-eclipse-paho -->
		<!-- ============ -->
		<target name="sync-eclipse-paho" depends="set-properties">
			<patternset id="exclude.dirs">
				<exclude name="*doc*/**" />
				<exclude name="*ample*/**" />
				<exclude name="src/**" />
				<exclude name="test/**" />
			</patternset>
			<antcall target="_sync">
				<reference refid="exclude.dirs" torefid="exclude.dirs" />
				<param name="sync.src" value="${env.SYNC_EXTERNAL}/eclipse/paho/mqttv3/${env.ECLIPSE_PAHO_VERSION}" />
				<param name="sync.dst" value="${env.ECLIPSE_PAHO_HOME}" />
			</antcall>
		</target>

	<!-- ============= -->
	<!-- sync-internal -->
	<!-- ============= -->

	<target name="sync-internal" depends="sync-admin,
                                          sync-as,
                                          sync-bw,
                                          sync-doc,
                                          sync-hawk,
                                          sync-login,
                                          sync-rv,
    									  sync-sb,
                                          sync-tpcl,
                                          sync-tra,
                                          sync-txml,
                                          sync-user,
                                          sync-wrap,
                                          sync-ftl,
                                          sync-terr,
    									  sync-tea,
            							  sync-spm,
										  sync-dbdrivers" />

	<!-- ========== -->
	<!-- sync-admin -->
	<!-- ========== -->

	<target name="sync-admin" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="UMPlugInSamples/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/admin/${env.ADMIN_VERSION}/${env.LATEST}/${env.PORT}/rel" />
			<param name="sync.dst" value="${env.ADMIN_HOME}/${env.LATEST}/${env.PORT}/rel" />
		</antcall>
	</target>

	<!-- ======= -->
	<!-- sync-as -->
	<!-- ======= -->

	<target name="sync-as" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="activespaces_docs/**" />
			<exclude name="activespaces_runtime/asmm/**" />
			<exclude name="activespaces_runtime/bin/**" />
			<exclude name="activespaces_runtime/include/**" />
			<exclude name="activespaces_samples/**" />
		</patternset>

		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/as/${env.AS_VERSION}/${env.AS_BUILD}/${env.PORT}" />
			<param name="sync.dst" value="${env.AS_ROOT}/${env.PORT}" />
		</antcall>

		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/as/${env.AS_VERSION}/${env.AS_BUILD}/${env.PORT}/../x86_64" />
			<param name="sync.dst" value="${env.AS_ROOT}/${env.PORT}/../x86_64" />
		</antcall>
	</target>
	
	<!-- ======= -->
	<!-- sync-as3x -->
	<!-- ======= -->

	<target name="sync-as3x" depends="set-properties">
		<echo>${env.AS3x_VERSION}</echo>
		<patternset id="exclude.dirs">
			<exclude name="samples/**" />
			<exclude name="scripts/**" />
			<exclude name="bin/**" />
			<exclude name="include/**" />
			<exclude name="monitor/**" />
			<exclude name="product_info/**" />
			<exclude name="ftl**" />
		</patternset>

		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/as/${env.AS3x_VERSION}/${env.AS3x_BUILD}/${env.PORT}" />
			<param name="sync.dst" value="${env.AS3x_ROOT}/${env.PORT}" />
		</antcall>

		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/as/${env.AS3x_VERSION}/${env.AS3x_BUILD}/${env.PORT}/../x86_64" />
			<param name="sync.dst" value="${env.AS3x_ROOT}/${env.PORT}/../x86_64" />
		</antcall>
	</target>

	<!-- ======= -->
	<!-- sync-bw -->
	<!-- ======= -->

	<target name="sync-bw" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/bw/${env.BW_VERSION}/${env.BW_TAG}/${env.PORT}" />
			<param name="sync.dst" value="${env.BW_HOME}/${env.BW_TAG}/${env.PORT}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/bw/${env.BW_VERSION}/${env.BW_TAG}/${env.PORT}/../x86_64" />
			<param name="sync.dst" value="${env.BW_HOME}/${env.BW_TAG}/${env.PORT}/../x86_64" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-doc -->
	<!-- ======== -->

	<target name="sync-doc" depends="set-properties">
		<patternset id="exclude.dirs" />
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-standard/${BE_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-standard/${BE_VERSION}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-datamodeling/${BE_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-datamodeling/${BE_VERSION}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-decisionmanager/${BE_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-decisionmanager/${BE_VERSION}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-eventstreamprocessing/${BE_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-eventstreamprocessing/${BE_VERSION}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-process/${BE_BPMN_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-process/${BE_BPMN_VERSION}" />
		</antcall>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.DOC_ROOT}/businessevents-views/${BE_VERSION}" />
			<param name="sync.dst" value="${env.DOC_HOME}/businessevents-views/${BE_VERSION}" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-hawk -->
	<!-- ========= -->

	<target name="sync-hawk" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="webconsole/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/hawk/${env.HAWK_VERSION}/${env.LATEST}/" />
			<param name="sync.dst" value="${env.HAWK_HOME}/${env.LATEST}/" />
		</antcall>
	</target>

	<!-- ========== -->
	<!-- sync-login -->
	<!-- ========== -->

	<target name="sync-login" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/login/${env.LOGIN_VERSION}" />
			<param name="sync.dst" value="${env.LOGIN_HOME}" />
		</antcall>
	</target>

	<!-- =========== -->
	<!-- sync-mapper -->
	<!-- =========== -->
	<!--
    <target name="sync-bwmapper" depends="set-properties">
        <patternset id="exclude.dirs" />
        <antcall target="_sync">
            <reference refid="exclude.dirs" torefid="exclude.dirs" />
            <param name="sync.src" value="${env.SRC_ROOT}/build/studio/plugins/mapper" />
            <param name="sync.dst" value="${env.BW_MAPPER_HOME}" />
        </antcall>
    </target>
	-->
	<!-- ======= -->
	<!-- sync-rv -->
	<!-- ======= -->

	<target name="sync-rv" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="vc8/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/rv/${env.RV_VERSION}/${env.LATEST}/${env.PORT}" />
			<param name="sync.dst" value="${env.RV_HOME}/${env.LATEST}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ========== -->
	<!-- sync-sb -->
	<!-- ========== -->

	<target name="sync-sb" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/sb-cep/${env.SB_VERSION}/${env.LATEST}/${env.PORT}" />
			<param name="sync.dst" value="${env.SB_HOME}/${env.LATEST}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ========== -->
	<!-- sync-slf4j -->
	<!-- ========== -->

	<target name="sync-slf4j" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="integration/**"/>
			<exclude name="jcl-over-slf4j/**"/>
			<exclude name="jul-to-slf4j/**"/>
			<exclude name="log4j-over-slf4j/**"/>
			<exclude name="site/**"/>
			<exclude name="slf4j-api/**"/>
			<exclude name="slf4j-ext/**"/>
			<exclude name="slf4j-jcl/**"/>
			<exclude name="slf4j-jdk14/**"/>
			<exclude name="slf4j-log4j12/**"/>
			<exclude name="slf4j-migrator/**"/>
			<exclude name="slf4j-nop/**"/>
			<exclude name="slf4j-simple/**"/>
			<exclude name="slf4j-site/**"/>
			<exclude name="src/**"/>
			<exclude name="jcl*"/>
			<exclude name="jul*"/>
			<exclude name="log4j*"/>
			<exclude name="slf4j-ext*"/>
			<exclude name="slf4j-jcl*"/>
			<exclude name="slf4j-jdk*"/>
			<exclude name="slf4j-migrator*"/>
			<exclude name="slf4j-nop*"/>
			<exclude name="slf4j-simple*"/>
			<exclude name="pom*"/>
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_EXTERNAL}/slf4j/${env.SLF4J_VERSION}" />
			<param name="sync.dst" value="${env.SLF4J_HOME}" />
		</antcall>
	</target>


	<!-- ========= -->
	<!-- sync-tpcl -->
	<!-- ========= -->

	<target name="sync-tpcl" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="include/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/tpcl/${env.TPCL_VERSION}/${env.LATEST}/${env.PORT}" />
			<param name="sync.dst" value="${env.TPCL_HOME}/${env.LATEST}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ======== -->
	<!-- sync-tra -->
	<!-- ======== -->

	<target name="sync-tra" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
			<exclude name="include/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/tra/${env.TRA_VERSION}/${env.LATEST}/${env.PORT}" />
			<param name="sync.dst" value="${env.TRA_HOME}/${env.LATEST}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-txml -->
	<!-- ========= -->

	<target name="sync-txml" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/txml/${env.TXML_VERSION}/${env.LATEST}/rel" />
			<param name="sync.dst" value="${env.TXML_HOME}/${env.LATEST}/rel" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-user -->
	<!-- ========= -->

	<target name="sync-user" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/user/${env.USER_VERSION}" />
			<param name="sync.dst" value="${env.USER_HOME}" />
		</antcall>
	</target>

	<!-- ========= -->
	<!-- sync-wrap -->
	<!-- ========= -->

	<target name="sync-wrap" depends="set-properties">
		<patternset id="exclude.dirs">
			<exclude name="*doc*/**" />
			<exclude name="*ample*/**" />
			<exclude name="src/**" />
			<exclude name="test/**" />
		</patternset>
		<antcall target="_sync">
			<reference refid="exclude.dirs" torefid="exclude.dirs" />
			<param name="sync.src" value="${env.SYNC_INTERNAL}/wrap/${env.WRAP_VERSION}/${env.LATEST}/${env.PORT}" />
			<param name="sync.dst" value="${env.WRAP_HOME}/${env.LATEST}/${env.PORT}" />
		</antcall>
	</target>

	<!-- ===== -->
	<!-- _sync -->
	<!-- ===== -->

	<target name="_do_sync" >
		<echo>
                Syncing ...

                Source     : ${sync.src}
                Destination: ${sync.dst}
            </echo>

		<mkdir dir="${sync.dst}"/>

		<if>
			<equals arg1="${env.SKIP_SYNC_DIRS}" arg2="false" />
			<then>
				<copy todir="${sync.dst}" verbose="${verbose}">
					<fileset dir="${sync.src}">
						<include name="**" />
					</fileset>
				</copy>
			</then>
			<else>
				<copy todir="${sync.dst}" verbose="${verbose}">
					<fileset dir="${sync.src}">
						<include name="**" />
						<patternset refid="exclude.dirs" />
					</fileset>
				</copy>
			</else>
		</if>
	</target>

	<target name="_sync">
		<if>
			<available file="${sync.src}" type="dir"/>
			<then>
				<runtarget target="_do_sync" />
			</then>
			<else>
				<echo>
                        Source Unavailable: ${sync.src}
                    </echo>
			</else>
		</if>
	</target>
	<!-- ######### -->
	<!-- showenv-* -->
	<!-- ######### -->

	<!-- ******* -->
	<!-- general -->
	<!-- ******* -->

	<target name="showenv-be" depends="set-properties">
		<echo message="BE_VERSION_MAJOR     = [${BE_VERSION_MAJOR}]" />
		<echo message="BE_VERSION_MINOR     = [${BE_VERSION_MINOR}]" />
		<echo message="BE_VERSION_UPDATE    = [${BE_VERSION_UPDATE}]" />
		<echo message="BE_VERSION           = [${BE_VERSION}]" />
		<echo message="env.BE_BUILD         = [${env.BE_BUILD}]" />
		<echo message="env.BE_LICENSE       = [${env.BE_LICENSE}]" />
		<echo message="BE_HOME              = [${BE_HOME}]" />
		<echo message="BE_LIB               = [${BE_LIB}]" />
	</target>

	<target name="showenv-general" depends="set-properties">
		<echo message="BE_BRANCH            = [${BE_BRANCH}]" />
		<echo message="BE_COMPANY           = [${BE_COMPANY}]" />
		<echo message="env.BE_PRODUCT       = [${env.BE_PRODUCT}]" />
		<echo message="env.BE_EDITION       = [${env.BE_EDITION}]" />
		<echo message="env.EXTERNAL         = [${env.EXTERNAL}]" />
		<echo message="env.INTERNAL         = [${env.INTERNAL}]" />
		<echo message="env.ISLINUX          = [${env.ISLINUX}]" />
		<echo message="env.ISMACOSX         = [${env.ISMACOSX}]" />
		<echo message="env.ISUNIX           = [${env.ISUNIX}]" />
		<echo message="env.ISWINDOWS        = [${env.ISWINDOWS}]" />
		<echo message="env.ISLOCAL          = [${env.ISLOCAL}]" />
		<echo message="env.OS               = [${env.OS}]" />
		<echo message="env.PORT             = [${env.PORT}]" />
		<echo message="env.SRC_ROOT         = [${env.SRC_ROOT}]" />
		<echo message="env.SYNC_EXTERNAL    = [${env.SYNC_EXTERNAL}]" />
		<echo message="env.SYNC_INTERNAL    = [${env.SYNC_INTERNAL}]" />
		<echo message="env.SYNC_ROOT        = [${env.SYNC_ROOT}]" />
		<echo message="env.TSI_ROOT         = [${env.TSI_ROOT}]" />
		<echo message="PRODUCT              = [${PRODUCT}]" />
		<echo message="user.name            = [${user.name}]" />
	</target>

	<!-- ******** -->
	<!-- external -->
	<!-- ******** -->

	<target name="showenv-ant" depends="set-properties">
		<echo message="env.ANT_VERSION        = [${env.ANT_VERSION}]" />
		<echo message="env.ANT_HOME           = [${env.ANT_HOME}]" />
		<echo message="env.ANT_OPTS           = [${env.ANT_OPTS}]" />
		<echo message="ANT_LIB                = [${ANT_LIB}]" />
	</target>

	<target name="showenv-antlr" depends="set-properties">
		<echo message="env.ANTLR_VERSION      = [${env.ANTLR_VERSION}]" />
		<echo message="env.ANTLR_HOME         = [${env.ANTLR_HOME}]" />
		<echo message="ANTLR_LIB              = [${ANTLR_LIB}]" />
	</target>

	<target name="showenv-apache-commons-collections" depends="set-properties">
		<echo message="env.APACHE_COMMONS_COLLECTIONS_PATH    = [${env.APACHE_COMMONS_COLLECTIONS_PATH}]" />
		<echo message="env.APACHE_COMMONS_COLLECTIONS_VERSION = [${env.APACHE_COMMONS_COLLECTIONS_VERSION}]" />
		<echo message="env.APACHE_COMMONS_COLLECTIONS_HOME    = [${env.APACHE_COMMONS_COLLECTIONS_HOME}]" />
		<echo message="APACHE_COMMONS_COLLECTIONS_LIB         = [${APACHE_COMMONS_COLLECTIONS_LIB}]" />
	</target>

	<target name="showenv-apache-commons-jexl" depends="set-properties">
		<echo message="env.APACHE_COMMONS_JEXL_PATH           = [${env.APACHE_COMMONS_JEXL_PATH}]" />
		<echo message="env.APACHE_COMMONS_JEXL_VERSION        = [${env.APACHE_COMMONS_JEXL_VERSION}]" />
		<echo message="env.APACHE_COMMONS_JEXL_HOME           = [${env.APACHE_COMMONS_JEXL_HOME}]" />
		<echo message="APACHE_COMMONS_JEXL_LIB                = [${APACHE_COMMONS_JEXL_LIB}]" />
	</target>

	<target name="showenv-apache-commons-lang" depends="set-properties">
		<echo message="env.APACHE_COMMONS_LANG_PATH           = [${env.APACHE_COMMONS_LANG_PATH}]" />
		<echo message="env.APACHE_COMMONS_LANG_VERSION        = [${env.APACHE_COMMONS_LANG_VERSION}]" />
		<echo message="env.APACHE_COMMONS_LANG_HOME           = [${env.APACHE_COMMONS_LANG_HOME}]" />
		<echo message="APACHE_COMMONS_LANG_LIB                = [${APACHE_COMMONS_LANG_LIB}]" />
	</target>

	<target name="showenv-bdbje" depends="set-properties">
		<echo message="env.BDBJE_VERSION      = [${env.BDBJE_VERSION}]" />
		<echo message="env.BDBJE_HOME         = [${env.BDBJE_HOME}]" />
		<echo message="BDBJE_LIB              = [${BDBJE_LIB}]" />
	</target>

	<target name="showenv-bnd" depends="set-properties">
		<echo message="env.BND_VERSION        = [${env.BND_VERSION}]" />
		<echo message="env.BND_HOME           = [${env.BND_HOME}]" />
		<echo message="BND_LIB                = [${BND_LIB}]" />
	</target>

	<target name="showenv-castor" depends="set-properties">
		<echo message="env.CASTOR_VERSION     = [${env.CASTOR_VERSION}]" />
		<echo message="env.CASTOR_HOME        = [${env.CASTOR_HOME}]" />
		<echo message="CASTOR_LIB             = [${CASTOR_LIB}]" />
	</target>

	<target name="showenv-eclipse-platform" depends="set-properties">
		<echo message="env.ECLIPSE_VERSION                      = [${env.ECLIPSE_VERSION}]" />
		<echo message="env.ECLIPSE_HOME                         = [${env.ECLIPSE_HOME}]" />
		<echo message="env.PDE_VERSION                          = [${env.PDE_VERSION}]" />
		<echo message="env.OSGI_VERSION                         = [${env.OSGI_VERSION}]" />
		<echo message="env.EQUINOX_LAUNCHER_VERSION             = [${env.EQUINOX_LAUNCHER_VERSION}]" />
		<echo message="env.EQUINOX_LAUNCHER_WIN32_WIN32_VERSION = [${env.EQUINOX_LAUNCHER_WIN32_WIN32_VERSION}]" />
		<echo message="env.EQUINOX_LAUNCHER_GTK_LINUX_VERSION   = [${env.EQUINOX_LAUNCHER_GTK_LINUX_VERSION}]" />
	</target>

	<target name="showenv-eclipse-deltapack" depends="set-properties">
		<echo message="env.ECLIPSE_DELTA_PACK_VERSION = [${env.ECLIPSE_DELTA_PACK_VERSION}]" />
		<echo message="env.ECLIPSE_DELTA_PACK_HOME    = [${env.ECLIPSE_DELTA_PACK_HOME}]" />
	</target>

	<target name="showenv-eclipse-emf" depends="set-properties">
		<echo message="env.ECLIPSE_EMF_VERSION = [${env.ECLIPSE_EMF_VERSION}]" />
		<echo message="env.ECLIPSE_EMF_HOME    = [${env.ECLIPSE_EMF_HOME}]" />
	</target>

	<target name="showenv-eclipse-mdt" depends="set-properties">
		<echo message="env.ECLIPSE_MDT_VERSION = [${env.ECLIPSE_MDT_VERSION}]" />
		<echo message="env.ECLIPSE_MDT_HOME    = [${env.ECLIPSE_MDT_HOME}]" />
	</target>

	<target name="showenv-eclipse-nattable" depends="set-properties">
		<echo message="env.ECLIPSE_NATTABLE_VERSION = [${env.ECLIPSE_NATTABLE_VERSION}]" />
		<echo message="env.ECLIPSE_NATTABLE_HOME    = [${env.ECLIPSE_NATTABLE_HOME}]" />
	</target>

	<target name="showenv-eclipse-epf" depends="set-properties">
		<echo message="env.ECLIPSE_EPF_VERSION = [${env.ECLIPSE_EPF_VERSION}]" />
		<echo message="env.ECLIPSE_EPF_HOME    = [${env.ECLIPSE_EPF_HOME}]" />
	</target>

	<target name="showenv-glazedlists" depends="set-properties">
		<echo message="env.GLAZEDLISTS_VERSION = [${env.GLAZEDLISTS_VERSION}]" />
		<echo message="env.GLAZEDLISTS_HOME    = [${env.GLAZEDLISTS_HOME}]" />
	</target>

	<target name="showenv-httpcore" depends="set-properties">
		<echo message="env.HTTPCORE_VERSION   = [${env.HTTPCORE_VERSION}]" />
		<echo message="env.HTTPCORE_HOME      = [${env.HTTPCORE_HOME}]" />
		<echo message="HTTPCORE_LIB           = [${HTTPCORE_LIB}]" />
	</target>

	<target name="showenv-httpcore-client" depends="set-properties">
		<echo message="env.HTTPCORE_CLIENT_VERSION = [${env.HTTPCORE_CLIENT_VERSION}]" />
		<echo message="env.HTTPCORE_CLIENT_HOME    = [${env.HTTPCORE_CLIENT_HOME}]" />
		<echo message="HTTPCORE_CLIENT_LIB         = [${HTTPCORE_CLIENT_LIB}]" />
	</target>

	<target name="showenv-javacc" depends="set-properties">
		<echo message="env.JAVACC_VERSION     = [${env.JAVACC_VERSION}]" />
		<echo message="env.JAVACC_HOME        = [${env.JAVACC_HOME}]" />
		<echo message="JAVACC_LIB             = [${JAVACC_LIB}]" />
	</target>

	<target name="showenv-javassist" depends="set-properties">
		<echo message="env.JAVASSIST_VERSION  = [${env.JAVASSIST_VERSION}]" />
		<echo message="env.JAVASSIST_HOME     = [${env.JAVASSIST_HOME}]" />
		<echo message="JAVASSIST_LIB          = [${JAVASSIST_LIB}]" />
	</target>

	<target name="showenv-jdk" depends="set-properties">
		<echo message="env.JDK_VERSION        = [${env.JDK_VERSION}]" />
		<echo message="env.JDK_HOME           = [${env.JDK_HOME}]" />
		<echo message="env.JAVA_HOME          = [${env.JAVA_HOME}]" />
		<echo message="JDK_LIB                = [${JDK_LIB}]" />
	</target>

	<target name="showenv-jide" depends="set-properties">
		<echo message="env.JIDE_VERSION       = [${env.JIDE_VERSION}]" />
		<echo message="env.JIDE_HOME          = [${env.JIDE_HOME}]" />
		<echo message="JIDE_LIB               = [${JIDE_LIB}]" />
	</target>

	<target name="showenv-jpmml" depends="set-properties">
		<echo message="env.JPMML_VERSION       = [${env.JPMML_VERSION}]" />
		<echo message="env.JPMML_HOME          = [${env.JPMML_HOME}]" />
		<echo message="JPMML_LIB               = [${JPMML_LIB}]" />
	</target>

	<target name="showenv-jsch" depends="set-properties">
		<echo message="env.JSCH_VERSION       = [${env.JSCH_VERSION}]" />
		<echo message="env.JSCH_HOME          = [${env.JSCH_HOME}]" />
		<echo message="JSCH_LIB               = [${JSCH_LIB}]" />
	</target>

	<target name="showenv-log4j" depends="set-properties">
		<echo message="env.LOG4J_VERSION      = [${env.LOG4J_VERSION}]" />
		<echo message="env.LOG4J_HOME         = [${env.LOG4J_HOME}]" />
		<echo message="LOG4J_LIB              = [${LOG4J_LIB}]" />
	</target>

	<target name="showenv-oracle" depends="set-properties">
		<echo message="env.ORACLE_VERSION     = [${env.ORACLE_VERSION}]" />
		<echo message="env.ORACLE_HOME        = [${env.ORACLE_HOME}]" />
		<echo message="ORACLE_LIB             = [${ORACLE_LIB}]" />
	</target>

	<target name="showenv-poi" depends="set-properties">
		<echo message="env.POI_VERSION        = [${env.POI_VERSION}]" />
		<echo message="env.POI_HOME           = [${env.POI_HOME}]" />
		<echo message="POI_LIB                = [${POI_LIB}]" />
		<echo message="POI_VERSION_DATE       = [${POI_VERSION_DATE}]" />
	</target>

	<target name="showenv-retro" depends="set-properties">
		<echo message="env.RETRO_VERSION      = [${env.RETRO_VERSION}]" />
		<echo message="env.RETRO_HOME         = [${env.RETRO_HOME}]" />
		<echo message="RETRO_LIB              = [${RETRO_LIB}]" />
	</target>

	<target name="showenv-st" depends="set-properties">
		<echo message="env.ST_VERSION         = [${env.ST_VERSION}]" />
		<echo message="env.ST_HOME            = [${env.ST_HOME}]" />
		<echo message="ST_LIB                 = [${ST_LIB}]" />
	</target>

	<target name="showenv-svnkit" depends="set-properties">
		<echo message="env.SVNKIT_VERSION     = [${env.SVNKIT_VERSION}]"/>
		<echo message="env.SVNKIT_HOME        = [${env.SVNKIT_HOME}]"/>
		<echo message="SVNKIT_LIB             = [${SVNKIT_LIB}]"/>
	</target>

	<target name="showenv-tangosol" depends="set-properties">
		<echo message="env.TANGOSOL_VERSION   = [${env.TANGOSOL_VERSION}]" />
		<echo message="env.TANGOSOL_HOME      = [${env.TANGOSOL_HOME}]" />
		<echo message="TANGOSOL_LIB           = [${TANGOSOL_LIB}]" />
	</target>

	<target name="showenv-tomcat" depends="set-properties">
		<echo message="env.TOMCAT_VERSION     = [${env.TOMCAT_VERSION}]" />
		<echo message="env.TOMCAT_HOME        = [${env.TOMCAT_HOME}]" />
	</target>

	<target name="showenv-tomsawyer" depends="set-properties">
		<echo message="env.TOMSAWYER_PERSPECTIVES_VERSION  = [${env.TOMSAWYER_PERSPECTIVES_VERSION}]" />
		<echo message="env.TOMSAWYER_PERSPECTIVES_HOME = [${env.TOMSAWYER_PERSPECTIVES_HOME}]" />
		<echo message="TOMSAWYER_PERSPECTIVES_LIB      = [${TOMSAWYER_PERSPECTIVES_LIB}]" />
	</target>

	<target name="showenv-velocity" depends="set-properties">
		<echo message="env.VELOCITY_VERSION     = [${env.VELOCITY_VERSION}]" />
		<echo message="env.VELOCITY_HOME        = [${env.VELOCITY_HOME}]" />
		<echo message="VELOCITY_LIB             = [${VELOCITY_LIB}]" />
	</target>

	<target name="showenv-xdoclet" depends="set-properties">
		<echo message="env.XDOCLET_VERSION    = [${env.XDOCLET_VERSION}]" />
		<echo message="env.XDOCLET_HOME       = [${env.XDOCLET_HOME}]" />
		<echo message="XDOCLET_LIB            = [${XDOCLET_LIB}]" />
	</target>

	<target name="showenv-external" depends="showenv-ant,
                                             showenv-antlr,
                                             showenv-apache-commons-collections,
                                             showenv-apache-commons-jexl,
                                             showenv-apache-commons-lang,
                                             showenv-bdbje,
                                             showenv-bnd,
                                             showenv-castor,
                                             showenv-eclipse-platform,
                                             showenv-eclipse-deltapack,
                                             showenv-eclipse-emf,
                                             showenv-eclipse-mdt,
                                             showenv-eclipse-nattable,
                                             showenv-eclipse-epf,
                                             showenv-glazedlists,
                                             showenv-httpcore,
                                             showenv-httpcore-client,
                                             showenv-javacc,
                                             showenv-javassist,
                                             showenv-jdk,
                                             showenv-jide,
                                             showenv-jsch,
                                             showenv-log4j,
                                             showenv-oracle,
                                             showenv-poi,
                                             showenv-retro,
                                             showenv-st,
                                             showenv-tangosol,
                                             showenv-tomcat,
                                             showenv-tomsawyer,
                                             showenv-velocity,
                                             showenv-xdoclet" />

	<!-- ******** -->
	<!-- internal -->
	<!-- ******** -->

	<target name="showenv-admin" depends="set-properties">
		<echo message="env.ADMIN_VERSION      = [${env.ADMIN_VERSION}]" />
		<echo message="env.ADMIN_HOME         = [${env.ADMIN_HOME}]" />
		<echo message="ADMIN_LIB              = [${ADMIN_LIB}]" />
	</target>

	<target name="showenv-as" depends="set-properties">
		<echo message="env.AS_VERSION          = [${env.AS_VERSION}]" />
		<echo message="env.AS_HOME             = [${env.AS_HOME}]" />
		<echo message="AS_LIB                  = [${AS_LIB}]" />
	</target>

	<target name="showenv-bw" depends="set-properties">
		<echo message="env.BW_VERSION         = [${env.BW_VERSION}]" />
		<echo message="env.BW_HOME            = [${env.BW_HOME}]" />
		<echo message="BW_LIB                 = [${BW_LIB}]" />
	</target>

	<target name="showenv-doc" depends="set-properties">
		<echo message="env.DOC_ROOT           = [${env.DOC_ROOT}]" />
		<echo message="env.DOC_HOME           = [${env.DOC_HOME}]" />
	</target>

	<target name="showenv-hawk" depends="set-properties">
		<echo message="env.HAWK_VERSION       = [${env.HAWK_VERSION}]" />
		<echo message="env.HAWK_HOME          = [${env.HAWK_HOME}]" />
		<echo message="HAWK_LIB               = [${HAWK_LIB}]" />
	</target>

	<target name="showenv-login" depends="set-properties">
		<echo message="env.LOGIN_VERSION      = [${env.LOGIN_VERSION}]" />
		<echo message="env.LOGIN_HOME         = [${env.LOGIN_HOME}]" />
	</target>

	<target name="showenv-rv" depends="set-properties">
		<echo message="env.RV_VERSION         = [${env.RV_VERSION}]" />
		<echo message="env.RV_HOME            = [${env.RV_HOME}]" />
		<echo message="RV_LIB                 = [${RV_LIB}]" />
	</target>

	<target name="showenv-sb" depends="set-properties">
		<echo message="env.SB_VERSION         = [${env.SB_VERSION}]" />
		<echo message="env.SB_HOME            = [${env.SB_HOME}]" />
		<echo message="SB_LIB                 = [${SB_LIB}]" />
	</target>

	<target name="showenv-tpcl" depends="set-properties">
		<echo message="env.TPCL_VERSION       = [${env.TPCL_VERSION}]" />
		<echo message="env.TPCL_HOME          = [${env.TPCL_HOME}]" />
		<echo message="TPCL_LIB               = [${TPCL_LIB}]" />
	</target>

	<target name="showenv-tra" depends="set-properties">
		<echo message="env.TRA_VERSION        = [${env.TRA_VERSION}]" />
		<echo message="env.TRA_HOME           = [${env.TRA_HOME}]" />
		<echo message="TRA_LIB                = [${TRA_LIB}]" />
	</target>

	<target name="showenv-txml" depends="set-properties">
		<echo message="env.TXML_VERSION       = [${env.TXML_VERSION}]" />
		<echo message="env.TXML_HOME          = [${env.TXML_HOME}]" />
		<echo message="TXML_LIB               = [${TXML_LIB}]" />
	</target>

	<target name="showenv-user" depends="set-properties">
		<echo message="env.USER_VERSION       = [${env.USER_VERSION}]" />
		<echo message="env.USER_HOME          = [${env.USER_HOME}]" />
	</target>

	<target name="showenv-wrap" depends="set-properties">
		<echo message="env.WRAP_VERSION       = [${env.WRAP_VERSION}]" />
		<echo message="env.WRAP_HOME          = [${env.WRAP_HOME}]" />
		<echo message="WRAP_LIB               = [${WRAP_LIB}]" />
	</target>
	<target name="showenv-tea" depends="set-properties">
		<echo message="env.TEA_HOME       = [${env.TEA_HOME}]" />
		<echo message="TEA_AGENT_LIB  = [${TEA_AGENT_LIB}]" />
	</target>

	<target name="showenv-internal" depends="showenv-admin,
                                             showenv-as,
                                             showenv-bw,
                                             showenv-doc,
                                             showenv-hawk,
                                             showenv-login,
                                             showenv-rv,
                                             showenv-sb,
                                             showenv-tpcl,
                                             showenv-tra,
                                             showenv-txml,
                                             showenv-user,
                                             showenv-wrap,
					     showenv-tea" />

	<target name="showenv-all" depends="showenv-be,
                                        showenv-general,
                                        showenv-external,
                                        showenv-internal" />

	<target name="showenv" depends="showenv-all" />

	<target name="showenv-home" depends="set-properties">
		<shellscript shell="sh" inputstring="set_build.sh ${env.ADMIN_HOME}" outputproperty="ADMIN_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.BW_HOME}" outputproperty="BW_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.HAWK_HOME}" outputproperty="HAWK_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.TPCL_HOME}" outputproperty="TPCL_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.TRA_HOME}" outputproperty="TRA_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.TXML_HOME}" outputproperty="TXML_BUILD">
		</shellscript>
		<shellscript shell="sh" inputstring="set_build.sh ${env.WRAP_HOME}" outputproperty="WRAP_BUILD">
		</shellscript>
		<echo message="env.ANT_HOME                        = [${env.ANT_HOME}]" />
		<echo message="env.ANTLR_HOME                      = [${env.ANTLR_HOME}]" />
		<echo message="env.APACHE_COMMONS_COLLECTIONS_HOME = [${env.APACHE_COMMONS_COLLECTIONS_HOME}]" />
		<echo message="env.APACHE_COMMONS_JEXL_HOME        = [${env.APACHE_COMMONS_JEXL_HOME}]" />
		<echo message="env.APACHE_COMMONS_LANG_HOME        = [${env.APACHE_COMMONS_LANG_HOME}]" />
		<echo message="env.BDBJE_HOME                      = [${env.BDBJE_HOME}]" />
		<echo message="env.BND_HOME                        = [${env.BND_HOME}]" />
		<echo message="env.CASTOR_HOME                     = [${env.CASTOR_HOME}]" />
		<echo message="env.ECLIPSE_HOME                    = [${env.ECLIPSE_HOME}]" />
		<echo message="env.ECLIPSE_EMF_HOME                = [${env.ECLIPSE_EMF_HOME}]" />
		<echo message="env.ECLIPSE_MDT_HOME                = [${env.ECLIPSE_MDT_HOME}]" />
		<echo message="env.ECLIPSE_DELTA_PACK_HOME         = [${env.ECLIPSE_DELTA_PACK_HOME}]" />
		<echo message="env.HTTPCORE_HOME                   = [${env.HTTPCORE_HOME}]" />
		<echo message="env.HTTPCORE_CLIENT_HOME            = [${env.HTTPCORE_CLIENT_HOME}]" />
		<echo message="env.JAVACC_HOME                     = [${env.JAVACC_HOME}]" />
		<echo message="env.JAVASSIST_HOME                  = [${env.JAVASSIST_HOME}]" />
		<echo message="env.JDK_HOME                        = [${env.JDK_HOME}]" />
		<echo message="env.JIDE_HOME                       = [${env.JIDE_HOME}]" />
		<echo message="env.JPMML_HOME                      = [${env.JPMML_HOME}]" />
		<echo message="env.JSCH_HOME                       = [${env.JSCH_HOME}]" />
		<echo message="env.LOG4J_HOME                      = [${env.LOG4J_HOME}]" />
		<echo message="env.ORACLE_HOME                     = [${env.ORACLE_HOME}]" />
		<echo message="env.POI_HOME                        = [${env.POI_HOME}]" />
		<echo message="env.RETRO_HOME                      = [${env.RETRO_HOME}]" />
		<echo message="env.ST_HOME                         = [${env.ST_HOME}]" />
		<echo message="env.TANGOSOL_HOME                   = [${env.TANGOSOL_HOME}]" />
		<echo message="env.TOMSAWYER_PERSPECTIVES_HOME     = [${env.TOMSAWYER_PERSPECTIVES_HOME}]" />
		<echo message="env.XDOCLET_HOME                    = [${env.XDOCLET_HOME}]" />
		<echo message="env.ADMIN_HOME                      = [${env.ADMIN_HOME}/${ADMIN_BUILD}]" />
		<echo message="env.AS_HOME                         = [${env.AS_HOME}/${env.LATEST}]" />
		<echo message="env.BW_HOME                         = [${env.BW_HOME}/${BW_BUILD}]" />
		<echo message="env.DOC_HOME                        = [${env.DOC_HOME}]" />
		<echo message="env.HAWK_HOME                       = [${env.HAWK_HOME}/${HAWK_BUILD}]" />
		<echo message="env.LOGIN_HOME                      = [${env.LOGIN_HOME}]" />
		<echo message="env.RV_HOME                         = [${env.RV_HOME}]" />
		<echo message="env.SB_HOME                         = [${env.SB_HOME}]" />
		<echo message="env.TPCL_HOME                       = [${env.TPCL_HOME}/${TPCL_BUILD}]" />
		<echo message="env.TRA_HOME                        = [${env.TRA_HOME}/${TRA_BUILD}]" />
		<echo message="env.TXML_HOME                       = [${env.TXML_HOME}/${TXML_BUILD}]" />
		<echo message="env.USER_HOME                       = [${env.USER_HOME}]" />
		<echo message="env.WRAP_HOME                       = [${env.WRAP_HOME}/${WRAP_BUILD}]" />
	</target>


	<!-- ************ -->
	<!-- studio-tools -->
	<!-- ************ -->

	<target name="build-ear-rms" depends="setup-studio-tools, build-rms">
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/modules/rms/bin/RMS.ear" />
			<param name="project-path" value="${env.SRC_ROOT}/runtime/modules/rms/project/studio-project/BRMS" />
			<param name="extended-classpath" value="${be.exp}/rms/lib/cep-rms.jar"/>
		</antcall>
	</target>

	<target name="build-ear-rms-nodep" depends="set-all, set-studio-tools-properties">
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/modules/rms/bin/RMS.ear" />
			<param name="project-path" value="${env.SRC_ROOT}/runtime/modules/rms/project/studio-project/BRMS" />
			<param name="extended-classpath" value="${be.exp}/rms/lib/cep-rms.jar"/>
		</antcall>
	</target>

	<target name="build-ear-mm" depends="setup-studio-tools, build-mm">
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/mm/em/bin/MM.ear" />
			<param name="project-path" value="${env.SRC_ROOT}/runtime/mm/em/project/emonitor" />
			<param name="extended-classpath" value="${be.exp}/mm/lib/be-mm.jar"/>
		</antcall>
	</target>

	<target name="build-ear-mm-nodep" depends="set-all, set-studio-tools-properties">
		<antcall target="build-ear">
			<param name="ear-fqpath" value="${env.SRC_ROOT}/runtime/mm/em/bin/MM.ear" />
			<param name="project-path" value="${env.SRC_ROOT}/runtime/mm/em/project/emonitor" />
			<param name="extended-classpath" value="${be.exp}/mm/lib/be-mm.jar"/>
		</antcall>
	</target>

	<target name="build-ear">
		<if>
			<equals arg1="${STUDIO_TOOLS_BYPASS_BUILD_EAR}" arg2="true" />
			<then>
				<echo message="Skipping build-ear for ${ear-fqpath}" />
			</then>
			<else>
				<copy file="${project-path}/.beproject" tofile="${project-path}/.beproject_orig" />
				<replace file="${project-path}/.beproject" token="%TIBCO_BE_HOME_ESC%" value="${STUDIO_TOOLS_BE_EXP}" />
				<var name="cp-arg" value=""/>
				<if>
					<not>
						<equals arg1="${extended-classpath}" arg2=""/>
					</not>
					<then>
						<var name="cp-arg" value="-cp ${extended-classpath}"/>
					</then>
				</if>
				<antcall target="studio-tools">
					<param name="options" value="-clean -initialize" />
				</antcall>
				<antcall target="studio-tools">
					<param name="options" value="-core buildEar -x -o ${ear-fqpath} -p ${project-path} ${cp-arg}" />
				</antcall>
				<move file="${project-path}/.beproject_orig" tofile="${project-path}/.beproject" />
			</else>
		</if>
	</target>

	<target name="setup-studio-tools" depends="set-all, build-studio, set-studio-tools-properties">
		<delete dir="${STUDIO_TOOLS_LOCAL_EXP}" />

		<subant target="setup-eclipse-platform" inheritall="true">
			<property file="studio/build.properties" />
			<property name="arch" value="${STUDIO_TOOLS_ARCH}" />
			<property name="port" value="${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>

		<copy todir="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse">
			<fileset dir="${STUDIO_TOOLS_BE_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse">
				<include name="*/**" />
			</fileset>
		</copy>

		<chmod dir="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse" perm="755" maxparallel="100" includes="**/*" />
		<echo message="STUDIO_TOOLS_BE_EXP=${STUDIO_TOOLS_BE_EXP}" />
		<echo message="STUDIO_TOOLS_LOCAL_EXP=${STUDIO_TOOLS_LOCAL_EXP}" />
		<copy file="${STUDIO_TOOLS_BE_EXP}/studio/eclipse/configuration/studio.tra" tofile="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" />
		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" token="TIBCO_SECURITY_VENDOR %TIBCO_SECURITY_VENDOR%" value="TIBCO_SECURITY_VENDOR j2se" />

		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" token="%TIBCO_BE_HOME_ESC%" value="${STUDIO_TOOLS_BE_EXP}" />
		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" token="%PS%" value="${env.PSP}" />
		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" token="%TIBCO_AS_HOME_ESC%" value="${env.AS_ROOT}/${env.PORT}/activespaces_runtime" />
		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" token="TIBCO.BE.function.catalog.coherence=false" value="TIBCO.BE.function.catalog.coherence=true" />

	</target>

	<target name="set-studio-tools-properties">
		<if>
			<not>
				<isset property="STUDIO_TOOLS_OS" />
			</not>
			<then>
				<property name="STUDIO_TOOLS_OS" value="linux26gl25" />
			</then>
		</if>
		<if>
			<not>
				<isset property="STUDIO_TOOLS_ARCH" />
			</not>
			<then>
				<property name="STUDIO_TOOLS_ARCH" value="x86_64" />
			</then>
		</if>
		<if>
			<not>
				<isset property="STUDIO_TOOLS_BE_EXP" />
			</not>
			<then>
				<property name="STUDIO_TOOLS_BE_EXP" value="${be.exp}" />
			</then>
		</if>
		<if>
			<not>
				<isset property="STUDIO_TOOLS_LOCAL_EXP" />
			</not>
			<then>
				<property name="STUDIO_TOOLS_LOCAL_EXP" value="${be.exp}/studio-tools-exp" />
			</then>
		</if>
		<if>
			<not>
				<isset property="TIBCO.BE.function.catalog.getbyuri" />
			</not>
			<then>
				<property name="TIBCO.BE.function.catalog.getbyuri" value="true" />
			</then>
		</if>
	</target>

	<target name="studio-tools" depends="set-all, set-studio-tools-properties">
		<replace file="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse/eclipse-platform/eclipse/dropins/TIBCOBusinessEvents-Studio-plugins.link" token="%TIBCO_BE_HOME_ESC%" value="${STUDIO_TOOLS_BE_EXP}" />

		<if>
			<os family="mac" />
			<then>
				<property name="studio.startonfirstthread" value="-XstartOnFirstThread" />
			</then>
			<else>
				<property name="studio.startonfirstthread" value="-Dvoidarg=donotuse" />
			</else>
		</if>

		<java classname="org.eclipse.equinox.launcher.Main" dir="${STUDIO_TOOLS_LOCAL_EXP}" fork="true" maxmemory="2048m" failonerror="true">
			<arg value="-application" />
			<arg value="com.tibco.cep.studio.cli.studio-tools" />
			<arg value="-consoleLog" />
			<arg value="-data" />
			<arg value="${STUDIO_TOOLS_LOCAL_EXP}/studio-tools-workspace" />
			<arg line="${options}" />
			<!--
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=5192,suspend=y,server=y"/>
            -->
			<jvmarg value="${studio.startonfirstthread}" />
			<jvmarg value="-Dstudio.console=true" />
			<jvmarg value="-Xbootclasspath/a:${TANGOSOL_LIB}/coherence.jar"/>
			<jvmarg value="-DBE_HOME=${STUDIO_TOOLS_BE_EXP}" />
			<jvmarg value="-DJDK_LIB=${JDK_LIB}" />
			<jvmarg value="-Dstudio.extended.classpath=${TANGOSOL_LIB}" />
			<jvmarg value="-Dstudio.wrapper.tra.file=${STUDIO_TOOLS_LOCAL_EXP}/studio.tra" />
			<jvmarg value="-DTIBCO.BE.function.catalog.coherence=true" />
			<jvmarg value="-DTIBCO_SECURITY_VENDOR=j2se" />
			<classpath>
				<path location="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse/eclipse-platform/eclipse/plugins/org.eclipse.equinox.launcher_${env.EQUINOX_LAUNCHER_VERSION}.jar" />
				<path location="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse/eclipse-platform/eclipse/plugins" />
				<path location="${STUDIO_TOOLS_LOCAL_EXP}/Final/${STUDIO_TOOLS_OS}/${STUDIO_TOOLS_ARCH}/be_eclipse/eclipse-platform/dropins/eclipse/plugins" />
				<!-- <path location="${env.ECLIPSE_HOME}/plugins" /> -->
				<path location="${STUDIO_TOOLS_BE_EXP}/studio/eclipse/plugins" />
			</classpath>
		</java>
	</target>

	<!-- ******************* -->
	<!-- build-engg-testbase -->
	<!-- ******************* -->

	<target name="build-engg-testbase-all" depends="set-all, import-all, deployTS, build-assemblies, build-engg-testbase">
	</target>

	<target name="build-engg-testbase" depends="set-all, build-assemblies">
		<echo message="Test Base will be created at: ${ENGG_TESTBASE}" />
		<delete dir="${ENGG_TESTBASE}" />
		<mkdir dir="${ENGG_TESTBASE}" />

		<copy todir="${ENGG_TESTBASE}">
			<fileset dir="${be.exp}/Final/${env.PORT}/be_backingstore">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_datamodeling_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_dbconcepts">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_decisionmanager">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_decisionmanager_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_eclipse">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_eventstreamprocessing_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_monitoringandmanagement">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_pattern">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_process_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_process_editor">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_process_server">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_query">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_rulesmanagement">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_server">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_standard_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_statemodeler">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_studio">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_views_documentation">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/${env.PORT}/be_views_modeler">
				<include name="*/**" />
			</fileset>
			<fileset dir="${be.exp}/Final/be_views_server">
				<include name="*/**" />
			</fileset>
		</copy>

		<if>
			<not>
				<isset property="ENGG_TESTBASE_VALUE" />
			</not>
			<then>
				<property name="ENGG_TESTBASE_VALUE" value="${ENGG_TESTBASE}" />
			</then>
		</if>

		<replace dir="${ENGG_TESTBASE}" value="${ENGG_TESTBASE_VALUE}">
			<include name="bin/be-engine.tra" />
			<include name="studio/eclipse/configuration/studio.tra" />
			<include name="studio/eclipse/studio.ini" />
			<include name="eclipse-platform/eclipse/links/TIBCOBusinessEvents-Studio-plugins.link" />
			<replacetoken>%TIBCO_BE_HOME_ESC%</replacetoken>
		</replace>
		<replace dir="${ENGG_TESTBASE}" value="${env.JDK_HOME}/${env.PORT}/jre/bin/client">
			<include name="studio/eclipse/studio.ini" />
			<replacetoken>%TIBCO_JVM_LIB_DIR_ESC%</replacetoken>
		</replace>
	</target>
	<target name="generate-ini">
		<touch file="eclipse_config.ini">
			<fileset dir="${baseDir}" />
		</touch>
		<echo file="${baseDir}/eclipse_config.ini">#This configuration file was written by: org.eclipse.equinox.internal.frameworkadmin.equinox.EquinoxFwConfigFileParser
org.eclipse.update.reconcile=false
eclipse.p2.profile=epp.package.jee
osgi.instance.area.default=@user.home/workspace
osgi.framework=file\:plugins/org.eclipse.osgi_${env.OSGI_VERSION}.jar
eclipse.buildId=20140612-0600
osgi.bundles=reference\:file\:org.eclipse.equinox.simpleconfigurator_1.1.0.v20131217-1203.jar@1\:start
org.eclipse.equinox.simpleconfigurator.configUrl=file\:org.eclipse.equinox.simpleconfigurator/bundles.info
eclipse.product=com.tibco.cep.studio.application.product
osgi.splashPath=file\:../../studio/eclipse/plugins/com.tibco.cep.studio.application
eclipse.p2.data.area=@config.dir/../p2
osgi.bundles.defaultStartLevel=4
equinox.use.ds=true
osgi.framework.extensions=
eclipse.application=org.eclipse.ui.ide.workbench</echo>
		<touch file="studio_config.ini">
			<fileset dir="${baseDir}" />
		</touch>
		<echo file="${baseDir}/studio_config.ini">#This configuration file was written by: org.eclipse.equinox.internal.frameworkadmin.equinox.EquinoxFwConfigFileParser
org.eclipse.update.reconcile=false
eclipse.p2.profile=epp.package.jee
osgi.instance.area.default=@user.home/workspace
osgi.framework=file\:plugins/org.eclipse.osgi_${env.OSGI_VERSION}.jar
eclipse.buildId=20140612-0600
osgi.bundles=reference\:file\:org.eclipse.equinox.simpleconfigurator_1.1.0.v20131217-1203.jar@1\:start
org.eclipse.equinox.simpleconfigurator.configUrl=file\:org.eclipse.equinox.simpleconfigurator/bundles.info
eclipse.product=com.tibco.cep.studio.application.product
osgi.splashPath=file\:../../../studio/eclipse/plugins/com.tibco.cep.studio.application
eclipse.p2.data.area=@config.dir/../p2
osgi.bundles.defaultStartLevel=4
equinox.use.ds=true
osgi.framework.extensions=
eclipse.application=org.eclipse.ui.ide.workbench</echo>
		<!-- <copy file="${baseDir}/eclipse_config.ini" tofile="${baseDir}/studio_config.ini"/> -->
	</target>

	<target name="generate-ini-aix61" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/aix61/power_64"/>
		</antcall>
	</target>
	<target name="generate-ini-hpux" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/hpux112/ia64"/>
		</antcall>
	</target>
	<target name="generate-ini-linux24gl23" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux24gl23/x86"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux24gl23/x86_64"/>
		</antcall>
	</target>
	<target name="generate-ini-linux26gl23" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux26gl23/x86"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux26gl23/x86_64"/>
		</antcall>
	</target>
	<target name="generate-ini-linux26gl24" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux26gl24/s390x"/>
		</antcall>
	</target>
	<target name="generate-ini-linux26gl25" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux26gl25/x86"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/linux26gl25/x86_64"/>
		</antcall>
	</target>
	<target name="generate-ini-macosx" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/macosx/x86_64"/>
		</antcall>
	</target>
	<target name="generate-ini-sol" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/sol/sparc"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/sol/sparc_64"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/sol/x86_64"/>
		</antcall>
	</target>
	<target name="generate-ini-win" depends="set-all">
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/win/x86"/>
		</antcall>
		<antcall target="generate-ini">
			<param name="baseDir" value="${ini.src}/win/x86_64"/>
		</antcall>
	</target>

	<target name="build-p2repo" depends="set-all">
		<subant target="build-p2repo" inheritall="true">
			<property file="studio/build.properties" />
			<fileset dir="." includes="studio/studio.xml" />
		</subant>
	</target>

	<!-- ================== -->
	<!-- build-maven-pom-genereator  -->
	<!-- ================== -->

	<target name="build-maven-pom-genereator" depends="set-all">

		<if>
			<equals arg1="${env.TAG_FILTERING}" arg2="on" />
			<then>
				<antcall target="pre-pom-generator" />
			</then>
			<else>
			</else>
		</if>

		<mkdir dir="${be-pomgenerator.bld}" />
		<mkdir dir="${lib.exp}" />
		<echo message="${pomgenerator.src}"/>
		<javac srcdir="${pomgenerator.src}" destdir="${be-pomgenerator.bld}" debug="on" source="${javacSource}" target="${javacTarget}" encoding="iso-8859-1">
			<compilerarg line="${env.COMPILER_LINE_ARG}" />
			<include name="**/*.java" />
		</javac>

		<jar destfile="${be-pomgenerator.jar}" basedir="${be-pomgenerator.bld}">
			<manifest>
				<attribute name="Main-Class" value="com.tibco.be.maven.version.cep_pomGeneratorVersion" />
			</manifest>
		</jar>
	</target>

	<!-- ================== -->
	<!-- build-maven-plugin  -->
	<!-- ================== -->
	<target name="build-maven-plugin" depends="set-all">
		<copy todir="${be-maven-plugin.bld}">
			<fileset dir="${bemavenplugin.src}">
			</fileset>
		</copy>
		<if>
			<equals arg1="${env.ISWINDOWS}" arg2="1" />
			<then>
				<exec dir="${be-maven-plugin.bld}" executable="cmd">
					<env key="JAVA_HOME" value="${env.JAVA_HOME}"/>
					<arg line="/c ${env.MAVEN_HOME}/bin/mvn clean package" />
				</exec>
			</then>
			<else>
				<exec dir="${be-maven-plugin.bld}" executable="sh">
					<env key="JAVA_HOME" value="${env.JAVA_HOME}"/>
					<arg line="-c '${env.MAVEN_HOME}/bin/mvn clean package'" />
				</exec>
			</else>
		</if>


		<mkdir dir="${be.exp}/maven/bin"/>
		<copy todir="${be.exp}/maven/bin">
			<fileset dir="${be-maven-plugin.bld}/target">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${be-maven-plugin.bld}">
				<include name="pom.xml"/>
			</fileset>
			<fileset dir="${env.SRC_ROOT}/maven/bin">
			</fileset>
		</copy>
	</target>


	<!-- ================== -->
	<!-- spotbugs     -->
	<!-- ================== -->


	<target name="set-spotbugs" depends="set-properties">
		<echo message="env.SPOTBUGS_VERSION      = [${env.SPOTBUGS_VERSION}]" />
		<echo message="env.SPOTBUGS_HOME         = [${env.SPOTBUGS_HOME}]" />
		<echo message="SPOTBUGS_LIB              = [${env.SPOTBUGS_LIB}]" />

		<property name="SPOTBUGS_ANT.jar" value="${env.SPOTBUGS_LIB}/spotbugs-ant.jar" />
		<taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpath="${SPOTBUGS_ANT.jar}" />
	</target>
	<target name="report-dir" depends="set-spotbugs,set-all">
		<property name="SPOTBUG_REPORTS" value="${be.exp}/reports/${BE_VERSION}_${env.BE_BUILD}" />
		<mkdir dir="${SPOTBUG_REPORTS}" />
	</target>
	<target name="spotbugs-all" depends="report-dir,spotbugs-tea-agent-jar,spotbugs-rms-jar,spotbugs-maven-plugin-jar,spotbugs-designtime-jars,spotbugs-runtime-jars" />

	<target name="spotbugs-tea-agent-jar">
		<!-- BE TEA Agent -->
		<antcall target="spotbugs-tea-agent">

		</antcall>
	</target>

	<target name="spotbugs-rms-jar">
		<!-- BE RMS -->
		<antcall target="spotbugs-rms">

		</antcall>
	</target>
	<target name="spotbugs-maven-plugin-jar">
		<!-- BE Maven plugin -->
		<antcall target="spotbugs-maven-plugin">

		</antcall>
	</target>
	<target name="spotbugs-designtime-jars">
		<!-- BE Admin -->
		<antcall target="spotbugs-designtime">
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${studio.src}" />
		</antcall>
	</target>
	<target name="spotbugs-runtime-jars">
		<!-- BE Admin -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tra.classpath};${tpcl.classpath;${admin.classpath};${hawk.classpath}" />
			<param name="sourcepath" value="${admin.src}" />
			<param name="jarname" value="be-admin" />
		</antcall>
		<!-- BE functions -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${functions.src}" />
			<param name="jarname" value="be-functions" />
		</antcall>
		<!-- BE studio functions -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${studiofunctions.src}" />
			<param name="jarname" value="be-studiofunctions" />
		</antcall>
		<!-- BE analytics-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${analytics.be.src}" />
			<param name="jarname" value="cep-analytics" />
		</antcall>
		<!-- BE analytics Core-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${analytics.core.src}" />
			<param name="jarname" value="cep-analytics" />
		</antcall>
		<!-- AS3 Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${as3-channel.src}" />
			<param name="jarname" value="cep-as3-channel" />
		</antcall>
		<!-- AS Channel -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${as-channel.src}" />
			<param name="jarname" value="cep-as-channel" />
		</antcall>
		<!-- CEP backing store -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${backingstore.src}" />
			<param name="jarname" value="cep-backingstore" />
		</antcall>
		<!-- CEP backing store bdb -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${backingstore-bdb.src}" />
			<param name="jarname" value="cep-backingstore-bdb" />
		</antcall>

		<!--CEP Base -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${APACHE_COMMONS_JEXL_LIB}/commons-jexl-${env.APACHE_COMMONS_JEXL_VERSION}.jar" />
			<param name="sourcepath" value="${base.be.src}" />
			<param name="jarname" value="cep-base" />
		</antcall>
		<!-- CEP BPMN-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${EMS_LIB}/jms-2.0.jar" />
			<param name="sourcepath" value="${bpmn.src}" />
			<param name="jarname" value="cep-bpmn" />
		</antcall>
		<!-- CEP BPMN Common-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${env.ECLIPSE_HOME}/plugins/org.eclipse.emf.edit_2.12.0.v20160526-0356.jar" />
			<param name="sourcepath" value="${env.SRC_ROOT}/common/com.tibco.cep.bpmn.common/src" />
			<param name="jarname" value="cep-bpmn-common" />
		</antcall>

		<!--CEP Channel API-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${channel-api.src}" />
			<param name="jarname" value="cep-channel-api" />
		</antcall>
		<!-- CEP Common-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${EMS_LIB}/jms-2.0.jar;${JDK_LIB}/tools.jar;${BDBJE_LIB}/je-${env.BDBJE_VERSION}.jar" />
			<param name="sourcepath" value="${common.src}" />
			<param name="jarname" value="cep-common" />
		</antcall>
		<!--CEP Container-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${HAWK_LIB}/;${RV_LIB}/tibrvj.jar" />
			<param name="sourcepath" value="${container.src}" />
			<param name="jarname" value="cep-container" />
		</antcall>
		<!-- CEP Data grid Oracle-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${lib.exp};${EMS_LIB}/" />
			<param name="sourcepath" value="${datagrid-oracle.src}" />
			<param name="jarname" value="cep-datagrid-oracle" />
		</antcall>
		<!-- CEP Data grid-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${lib.exp};${EMS_LIB}/" />
			<param name="sourcepath" value="${datagrid-tibco.src}" />
			<param name="jarname" value="cep-datagrid-tibco" />
		</antcall>
		<!-- CEP Docker -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${docker.src}" />
			<param name="jarname" value="cep-docker" />
		</antcall>
		<!--CEP drivers-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${drivers.src}" />
			<param name="jarname" value="cep-drivers" />
		</antcall>
		<!--CEP FTL-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${ftl.src}" />
			<param name="jarname" value="cep-ftl" />
		</antcall>
		<!--CEP HAWK Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${hawk-channel.src}" />
			<param name="jarname" value="cep-hawk-channel" />
		</antcall>

		<!--CEP HAWK Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${interpreter.src}" />
			<param name="jarname" value="cep-interpreter" />
		</antcall>

		<!-- CEP KAFKA Inbuild Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${kafka-channel-inbuilt.src}" />
			<param name="jarname" value="cep-kafka" />
		</antcall>

		<!--CEP KAFKA Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${tomcat.classpath}" />
			<param name="sourcepath" value="${kafka-channel.src}" />
			<param name="jarname" value="cep-kafka-channel" />
		</antcall>

		<!-- CEP kernel -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${kernel.src}" />
			<param name="jarname" value="cep-kernel" />
		</antcall>

		<!-- CEP Kinesis -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${kinesis.src}" />
			<param name="jarname" value="cep-kinesis" />
		</antcall>

		<!-- CEP LiveView -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${liveview.src}" />
			<param name="jarname" value="cep-liveview" />
		</antcall>
		<!-- CEP LiveView -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${loadbalancer.src}" />
			<param name="jarname" value="cep-loadbalancer" />
		</antcall>

		<!-- CEP Maven-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${pomgenerator.src}" />
			<param name="jarname" value="cep-maven" />
		</antcall>

		<!-- CEP Migration-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${migration.src}" />
			<param name="jarname" value="cep-migration" />
		</antcall>

		<!-- CEP Modules -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp};${ORACLE_LIB}/ojdbc7.jar;${ORACLE_LIB}/ucp.jar" />
			<param name="sourcepath" value="${modules.src}" />
			<param name="jarname" value="cep-modules" />
		</antcall>

		<!-- CEP MQTTT Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${mqtt-channel.src}" />
			<param name="jarname" value="cep-mqtt-channel" />
		</antcall>

		<!-- CEP Pattern  -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${pattern.src}" />
			<param name="jarname" value="cep-pattern" />
		</antcall>

		<!-- CEP Query-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${query.src}" />
			<param name="jarname" value="cep-query" />
		</antcall>


		<!-- CEP SB Channel-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${sb-channel.src}" />
			<param name="jarname" value="cep-sb-channel" />
		</antcall>

		<!-- CEP Security -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${security.src}" />
			<param name="jarname" value="cep-security" />
		</antcall>

		<!-- CEP Store -->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${store.src}" />
			<param name="jarname" value="cep-store" />
		</antcall>


		<!-- CEP UI RT Common-->
		<antcall target="spotbugs">
			<param name="jardir" value="${lib.exp}" />
			<param name="auxclasspath" value="${lib.exp}" />
			<param name="sourcepath" value="${studiort.src}" />
			<param name="jarname" value="cep-ui-rt-common" />
		</antcall>
	</target>

	<target name="spotbugs-designtime" depends="set-tpsdep">
		<spotbugs home="${env.SPOTBUGS_HOME}" output="html" outputFile="${SPOTBUG_REPORTS}/business_events-report.html">
			<auxClasspath path="${auxclasspath}" />
			<sourcePath path="${studio.src}/plugins" />
			<class location="${be.exp}/studio/eclipse/plugins" />
		</spotbugs>
	</target>

	<target name="spotbugs-rms" depends="set-tpsdep">
		<spotbugs home="${env.SPOTBUGS_HOME}" output="html" outputFile="${SPOTBUG_REPORTS}/rms-report.html">
			<auxClasspath path="${auxclasspath}" />
			<sourcePath path="${rms.src}" />
			<class location="${be.exp}/rms/lib" />
		</spotbugs>
	</target>
	<target name="spotbugs-tea-agent" depends="set-tpsdep">
		<spotbugs home="${env.SPOTBUGS_HOME}" output="html" outputFile="${SPOTBUG_REPORTS}/teagent-report.html">
			<auxClasspath path="${tea.agent.classpath}" />
			<sourcePath path="${tea.agent.src}" />
			<class location="${be-tea-agent.jar}" />
		</spotbugs>
	</target>
	<target name="spotbugs-maven-plugin" depends="set-tpsdep">
		<spotbugs home="${env.SPOTBUGS_HOME}" output="html" outputFile="${SPOTBUG_REPORTS}/maven-plugin-report.html">
			<auxClasspath path="${auxclasspath}" />
			<sourcePath path="${bemavenplugin.src}" />
			<class location="${be.exp}/maven/bin" />
		</spotbugs>
	</target>

	<target name="spotbugs" depends="set-tpsdep">
		<echo message="Scanning... ${jarname}" />
		<echo message="Classpath... ${auxclasspath}" />
		<spotbugs home="${env.SPOTBUGS_HOME}" output="html" outputFile="${SPOTBUG_REPORTS}/${jarname}-report.html">
			<auxClasspath path="${auxclasspath}" />
			<sourcePath path="${sourcepath}" />
			<class location="${jardir}/${jarname}.jar" />
		</spotbugs>
	</target>
	<!--<target name="update-bundlesinfo">
		
		Updating bundles.info for new 3.10.2 osgi -->

	<!-- <replace file="${be.exp}/Final/linux26gl25/x86_64/be_eclipse/eclipse-platform/eclipse/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info" 
			token="org.eclipse.osgi,3.10.1.v20140909-1633,plugins/org.eclipse.osgi_3.10.1.v20140909-1633.jar,-1,true" 
			value="org.eclipse.osgi,3.10.2.v20141020-1740,plugins/org.eclipse.osgi_3.10.2.v20141020-1740.jar,-1,true" />
	</target> -->
</project>
