package com.tibco.cep.studio.ui.wizards.export;

import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.ui.IExportWizard;
import org.eclipse.ui.IWorkbench;

import com.tibco.cep.studio.ui.StudioUIPlugin;
import com.tibco.cep.studio.ui.build.JDBCDeployJob;
import com.tibco.cep.studio.ui.build.JDBCDeployJobManifest;
import com.tibco.cep.studio.ui.util.Messages;
import com.tibco.cep.studio.ui.util.StudioResourceUtils;

public class JDBCDeployExportWizard extends Wizard implements IExportWizard {

	private static final String EXPORT_JDBC_DEPLOY_DIALOG_SETTINGS = "ExportJdbcDeployment"; //$NON-NLS-1$

	//Default driver that is to be used in-case migration scripts are being generated by specifying the connection properties on the fly (no sharedresource).
	//TODO: Ideally a field should be added on UI for dbdriver, then this Map can go away.
	public static final Map<String,String> DBTYPE_DRIVER_MAP = new LinkedHashMap<String, String>(); 

	static {
		DBTYPE_DRIVER_MAP.put("oracle", "oracle.jdbc.OracleDriver");
		DBTYPE_DRIVER_MAP.put("sqlserver", "com.microsoft.sqlserver.jdbc.SQLServerDriver");
		DBTYPE_DRIVER_MAP.put("db2", "com.ibm.db2.jcc.DB2Driver");
		DBTYPE_DRIVER_MAP.put("mysql", "com.mysql.jdbc.Driver");
		DBTYPE_DRIVER_MAP.put("postgresql", "org.postgresql.Driver");
	}

	public static final Map<String, Set<Object>> DBTYPE_COMPATIBLE_DRIVERS_MAP = new LinkedHashMap<String, Set<Object>>();
	static {
		DBTYPE_COMPATIBLE_DRIVERS_MAP.put("oracle", new HashSet<>());
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("oracle").add(DBTYPE_DRIVER_MAP.get("oracle"));
		
		DBTYPE_COMPATIBLE_DRIVERS_MAP.put("sqlserver", new HashSet<>());
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("sqlserver").add(DBTYPE_DRIVER_MAP.get("sqlserver"));
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("sqlserver").add("tibcosoftwareinc.jdbc.sqlserver.SQLServerDriver");
		
		DBTYPE_COMPATIBLE_DRIVERS_MAP.put("db2", new HashSet<>());
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("db2").add(DBTYPE_DRIVER_MAP.get("db2"));
		
		DBTYPE_COMPATIBLE_DRIVERS_MAP.put("mysql", new HashSet<>());
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("mysql").add(DBTYPE_DRIVER_MAP.get("mysql"));
		
		DBTYPE_COMPATIBLE_DRIVERS_MAP.put("postgresql", new HashSet<>());
		DBTYPE_COMPATIBLE_DRIVERS_MAP.get("postgresql").add(DBTYPE_DRIVER_MAP.get("postgresql"));
	}

	protected JDBCDeployExportBasicWizardPage basicPage;

	protected JDBCDeployExportMigrationWizardPage migrationPage;

	private IStructuredSelection fSelection = null;

	private IProject project;

	public IFile jdbcResourceFile;

	private Point size;
	private boolean sizeChanged = false;
	private ToolBar buttonToolbar;

	public JDBCDeployExportWizard() {
		setWindowTitle(Messages.getString("jdbc.scripts.export.wizard.title")); //$NON-NLS-1$
		setHelpAvailable(false);
		StudioUIPlugin plugin = StudioUIPlugin.getDefault();
		IDialogSettings workbenchSettings = plugin.getDialogSettings();
		IDialogSettings settings = workbenchSettings.getSection(EXPORT_JDBC_DEPLOY_DIALOG_SETTINGS);
		if (settings == null) {
			settings = workbenchSettings.addNewSection(EXPORT_JDBC_DEPLOY_DIALOG_SETTINGS);
		}
		setDialogSettings(settings);
	}

	@Override
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		try {
			this.project = StudioResourceUtils.getProjectForWizard(selection);
			if (project == null) {
				MessageDialog.openError(getShell(), Messages.getString("jdbc.scripts.export.wizard.project.selection.error"), //$NON-NLS-1$
						Messages.getString("jdbc.scripts.export.wizard.project.selection.error.msg")); //$NON-NLS-1$
				return;
			}
			this.fSelection = selection;
		} catch (Exception e) {
			StudioUIPlugin.log(e);
		}
	}

	@Override
	public void addPages() {
		if (fSelection != null) {
			basicPage = new JDBCDeployExportBasicWizardPage(project, DBTYPE_DRIVER_MAP.keySet()); //$NON-NLS-1$
			addPage(basicPage);
			migrationPage = new JDBCDeployExportMigrationWizardPage(project); //$NON-NLS-1$
			addPage(migrationPage);
		}
	}

	@Override
	public IWizardPage getNextPage(IWizardPage page) {
		IWizardPage nextPage = super.getNextPage(page);
		if (nextPage == migrationPage) {
			migrationPage.setDataBaseType(basicPage.getDatabaseType(), DBTYPE_DRIVER_MAP.get(basicPage.getDatabaseType()));
		}
		return nextPage;
	}

	@Override
	public boolean performFinish() {
		JDBCDeployJobManifest manifest = new JDBCDeployJobManifest(project);
		manifest.setDatabaseType(basicPage.getDatabaseType());
		manifest.setDatabaseDriver(DBTYPE_DRIVER_MAP.get(basicPage.getDatabaseType()));
		manifest.setAnsi(basicPage.isANSI());
		manifest.setOptimize(basicPage.isOptimize());
		manifest.setExpandMaxStringSize(basicPage.isExpandMaxStringSize());
		manifest.setCdd(basicPage.getCDDPath());
		manifest.setOutputFolder(basicPage.getOutputDirectory());
		manifest.setOutputFilePrefix(basicPage.getOutputFileName());
//		manifest.setBaseTypeFile(basicPage.getBaseTypeFileName());
		if (migrationPage.isMigrationEnabled() == true) {
			if (migrationPage.getDatabaseDriver() != null) {
				manifest.setDatabaseDriver(migrationPage.getDatabaseDriver());//Use the correct driver from shared resource.
			}
			manifest.setDbURL(migrationPage.getDBURL());
			manifest.setDbUserName(migrationPage.getDBUserName());
			manifest.setDbPassword(migrationPage.getDBPassword());
//			manifest.setPopulateObjectTable(migrationPage.isPopulateObjectTable());
			if (migrationPage.getSSLConnectionInfo() != null) {
				manifest.setSSLConnectionInfo(migrationPage.getSSLConnectionInfo());
			}
		}
		JDBCDeployJob builderJob = new JDBCDeployJob(manifest);
		builderJob.schedule();
		return true;
	}

	@Override
	public boolean isHelpAvailable() {
		return false;
	}

	public boolean isSizeChanged() {
		return sizeChanged;
	}

	public void setSizeChanged(boolean sizeChanged) {
		this.sizeChanged = sizeChanged;
	}

	public Point getSize() {
		return size;
	}

	public ToolBar getButtonToolbar() {
		return buttonToolbar;
	}

	public void setButtonToolbar(ToolBar buttonToolbar) {
		this.buttonToolbar = buttonToolbar;
	}
}