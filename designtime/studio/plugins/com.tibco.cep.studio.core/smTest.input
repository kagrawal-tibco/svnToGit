statemachine StateMachine {
   composite state RootState {
      concurrent state Concurrent {
         region state Region_1 {
            /**
             * @desc = "...."
             * @any other extended attribute we think appropriate
             * @<anotation properties>
             */
            simple state Simple {
                   onEntry() {
                   }
                   onExit() {
                   }
                   onTimeOut() {
                   }
            }
            /**
             * @desc = "...."
             * @any other extended attribute we think appropriate
             * @<anotation properties>
             */
            pseudo-end state End {
	               onEntry() {
	               }
            }
            pseudo-start state Start {
                 onExit() {
                 }
            }
	           onEntry() {
	           }
	           onExit() {
	           }
	           onTimeOut() {
	           }
         }

         /**
         *  @desc="the methods are not implemented, so not shown here"
         *
         **/
         region state Region {
            simple state Simple {
            }
            pseudo-end state End {
            }
            pseudo-start state Start {
            }
         }
      }
   }

   /**
   * @desc="...."
   * @label="..."
   * @fromState="Concurrent"
   * @toState="End" (fqsn)
   * @priority = 5
   */
   transition StateMachine_Transition_14(Concurrent, End) {
      declare {
         Ontology.NewConcept newconcept;
      }
      when {

      }
      then {

      }

   }

   /**
   * @desc="...."
   * @label="..."
   * @fromState="Simple"
   * @toState="End" (fqsn)
   * @priority = 5
   */
   transition StateMachine_Transition_13(Simple, End) {
      declare {
         Ontology.NewConcept newconcept;
      }
      when {

      }
      then {

      }

   }


}
