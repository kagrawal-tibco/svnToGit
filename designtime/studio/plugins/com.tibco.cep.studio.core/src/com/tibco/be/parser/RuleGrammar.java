/* Generated By:JavaCC: Do not edit this line. RuleGrammar.java */
package com.tibco.be.parser;

import java.util.ArrayList;
import com.tibco.be.parser.tree.*;
import com.tibco.be.parser.semantic.NodeTransformation;
import com.tibco.be.parser.impl.RuleTemplateParser;
import java.io.InputStream;
import java.io.Reader;

public class RuleGrammar implements RuleGrammarConstants {
    ParserClient client;

    ParseSyntaxTree mParseTree = new ParseSyntaxTree();

    public void setParserClient(ParserClient client) {
        this.client = client;
    }

    public void setTabSize(int tabSize) {
        jj_input_stream.setTabSize(tabSize);
    }

    public void re_init(Reader reader) {
        ReInit(reader);
        mParseTree.reset();
    }

    public void re_init(InputStream stream) {
        ReInit(stream);
        mParseTree.reset();
    }

    //skips past the past token, skips to (but doesn't consume) the to token
    //arguments that are -1 will be ignored
    //<EOF> will never be skipped past
    //returns the last token skipped
    protected Token error_skip_token(int past, int to) {
        return error_skip_tokens(past == -1 ? null : new int[] {past}, to == -1 ? null : new int[] {to});
    }

    //skips past the past tokens, skips to (but doesn't consume) the to tokens
    //null arguments will be ignored
    //<EOF> will never be skipped past
    //returns the last token skipped
    protected Token error_skip_tokens(int[] past, int[] to) {
    Token t = getToken(0);
    while(true) {
        if(getToken(1).kind == EOF || contains_int(to, getToken(1))) {
            //System.out.println(t.image + " -- " + getToken(1).image);
            return t;
        }
        //catch ParseError
        //on the first iteration, getNextToken() returns the token that caused the error
        t = getNextToken();
        if(contains_int(past, t)) {
            //System.out.println(t.image + " -- " + getToken(1).image);
            return t;
         }
      }
    }

    protected boolean contains_int(int[] array, Token token) {
        if(array == null || token == null) return false;
        for(int ii = 0; ii < array.length; ii++) {
            if(array[ii] == token.kind) return true;
        }
        return false;
    }

    protected void reportError(ParseException pe) {
        client.addError(pe);

        //System.out.println(pe.getMessage());
    }

    protected void reportError(ParseException pe, String message) {
        client.addError(pe, message);
    }

/***********************************************
 * THE Business Event Rule Grammar Begins here *
 ***********************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        RuleDeclaration();
      }
      jj_consume_token(0);
    } catch (ParseException pe) {
    reportError(pe);
    //Print a message that the parser will not continue past this error
    //not trying to recover any errors caught at this level
    //throw pe;

    }
  }

//used for checking the condition in RuleChecker
  final public void ConditionBlock() throws ParseException {
    try {
      Predicates();
      jj_consume_token(0);
    } catch (ParseException pe) {
      Token start = getToken(0);
      Token end = error_skip_tokens(new int[]{SEMICOLON}, new int[]{});
      reportError(pe, CompileErrors.predicateExpected());
    }
  }

//Used for checking the action in RuleCompiler
  final public void ActionBlock() throws ParseException {
    try {
      ThenStatements(SourceType.RULE_ACTION);
      jj_consume_token(0);
    } catch (ParseException pe) {
        Token start = getToken(0);
        Token end = error_skip_tokens(new int[]{SEMICOLON}, new int[]{});
        reportError(pe, CompileErrors.statementExpected());
    }
  }

//used for getting the type of an expression
  final public void StandaloneExpression(SourceType srcType) throws ParseException {
    RootNode node = null;
    Token end = null;
    try {
      node = Predicate(srcType);
                               end = getToken(0);
      jj_consume_token(0);
    } catch (ParseException pe) {
      //Token start = getToken(0);
      //Token end = error_skip_tokens(new int[]{SEMICOLON}, new int[]{});
      node = null;
      if(pe.expectedTokenSequences.length > 0 && pe.expectedTokenSequences[0].length > 0 && pe.expectedTokenSequences[0][0] == RuleGrammarConstants.EOF && pe.currentToken != null && pe.currentToken.next != null && pe.currentToken.next.image != null && pe.currentToken.next.image.length() > 0) {
        reportError(pe, "unexpected symbol: \"" + pe.currentToken.next.image + '"');
      } else {
        reportError(pe);
      }
    } finally {
      if(node != null) node.setLastToken(end);
    }
  }

  final public void StandaloneThenStatement(SourceType srcType) throws ParseException {
    Token start = null;
    Token end = null;
    RootNode root = null;
    try {
      start = getToken(1);
      ThenStatement();
     end = getToken(0);
      jj_consume_token(0);
        if(!mParseTree.isEmpty()) {
            Node node = mParseTree.popNode();
            root = new RootNode(srcType, start, end);
            root.prependChild(node);
            client.addThenTree(root);
        }
    } catch (ParseException pe) {
       if(pe.expectedTokenSequences.length > 0 && pe.expectedTokenSequences[0].length > 0 && pe.expectedTokenSequences[0][0] == RuleGrammarConstants.EOF && pe.currentToken != null && pe.currentToken.next != null && pe.currentToken.next.image != null && pe.currentToken.next.image.length() > 0) {
         reportError(pe, "unexpected symbol: \"" + pe.currentToken.next.image + '"');
       } else {
         reportError(pe);
       }
    }
  }

  final public void RuleFunctionBody(SourceType sourceType) throws ParseException {
    try {
      ThenStatements(sourceType);
      jj_consume_token(0);
    } catch (ParseException pe) {
        Token start = getToken(0);
        Token end = error_skip_tokens(new int[]{SEMICOLON}, new int[]{});
        reportError(pe, CompileErrors.statementExpected());
    }
  }

  final public String Identifier() throws ParseException {
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
      token = jj_consume_token(CALL);
      break;
    case CREATE:
      token = jj_consume_token(CREATE);
      break;
    case MODIFY:
      token = jj_consume_token(MODIFY);
      break;
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ProductionNode.newNode(mParseTree, token, Node.NODE_NULL_RELATION);
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public String XSLTLiteral() throws ParseException {
    Token token;
    token = jj_consume_token(XSLT_LITERAL);
    ProductionNode.newNode(mParseTree, token, Node.NODE_NULL_RELATION);
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public void RuleDeclaration() throws ParseException {
    NameNode fullName;
          ((RuleFileParserClient)client).newRule();
    jj_consume_token(RULE);
    fullName = Name();
                                   ((RuleFileParserClient)client).setName(fullName.toName());
    jj_consume_token(LBRACE);
    RuleNT();
    jj_consume_token(RBRACE);
  }

/** 
 * RuleNT (NT => Non Terminal Identifier. The RuleNT is specified as
 * Rule := "(AttributeNT | DeclareNT | WhenNT | ThenNT )*
 * The grammar does have a weakness that you can declare Attribute n nos of times, 
 * the Whenblock can be declared n nos
 * time. Need to change the grammar at some time.
 */
  final public void RuleNT() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
      case SCOPE:
      case BODY:
      case DECL:
      case WHEN:
      case THEN:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
        AttributeNT();

        break;
      case SCOPE:
      case DECL:
        DeclareNT();

        break;
      case WHEN:
        WhenNT();

        break;
      case BODY:
      case THEN:
        ThenNT();

        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AttributeNT() throws ParseException {
    jj_consume_token(ATTR);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQUEUE:
      case PRIORITY:
      case LASTMOD:
      case FORWARD_CHAIN:
      case RANK_FUNCTION:
      case VALIDITY:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      AttributeBodyDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  final public void AttributeBodyDeclaration() throws ParseException {
  Token attr;
  Token value = null;
  NameNode declName = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIORITY:
        attr = jj_consume_token(PRIORITY);
        jj_consume_token(ASSIGN);
        value = IntegerLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case REQUEUE:
        attr = jj_consume_token(REQUEUE);
        jj_consume_token(ASSIGN);
        value = BooleanLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case LASTMOD:
        attr = jj_consume_token(LASTMOD);
        jj_consume_token(ASSIGN);
        value = StringLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case VALIDITY:
        attr = jj_consume_token(VALIDITY);
        jj_consume_token(ASSIGN);
        value = StringLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case FORWARD_CHAIN:
        attr = jj_consume_token(FORWARD_CHAIN);
        jj_consume_token(ASSIGN);
        value = BooleanLiteral();
        jj_consume_token(SEMICOLON);
        break;
      case RANK_FUNCTION:
        attr = jj_consume_token(RANK_FUNCTION);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
          value = NullLiteral();
          break;
        case CALL:
        case CREATE:
        case MODIFY:
        case IDENTIFIER:
          declName = Name();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if(declName != null) {
                        ((RuleFileParserClient)client).addAttribute(attr, declName.toName());
                } else {
                        ((RuleFileParserClient)client).addAttribute(attr, value.image);
                }
    } catch (ParseException pe) {
        reportError(pe);
        error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
    }
  }

  final public void DeclareNT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECL:
      jj_consume_token(DECL);
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case CREATE:
        case MODIFY:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        Declarator();
      }
      jj_consume_token(RBRACE);
      break;
    case SCOPE:
      jj_consume_token(SCOPE);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case CREATE:
        case MODIFY:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        Declarator();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Declarator() throws ParseException {
    NameNode declName;
    Token varName;
    try {
      declName = Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
        varName = jj_consume_token(CALL);
        break;
      case CREATE:
        varName = jj_consume_token(CREATE);
        break;
      case MODIFY:
        varName = jj_consume_token(MODIFY);
        break;
      case IDENTIFIER:
        varName = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
            ((RuleFileParserClient)client).addDeclaration(declName.toName(), varName.image);
    } catch (ParseException pe) {
        reportError(pe);
        error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
    }
  }

  final public void WhenNT() throws ParseException {
    jj_consume_token(WHEN);
    jj_consume_token(LBRACE);
    Predicates();
    jj_consume_token(RBRACE);

  }

  final public void Predicates() throws ParseException {
    RootNode node;
    Token end;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case INSTANCEOF:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case GT:
      case LT:
      case BANG:
      case EQ:
      case LE:
      case GE:
      case NE:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      node = Predicate(SourceType.RULE_CONDITION);
      end = jj_consume_token(SEMICOLON);
          if(node != null) node.setLastToken(end);
    }
  }

  final public RootNode Predicate(SourceType srcType) throws ParseException {
    mParseTree = new ParseSyntaxTree();
    Token start = null;
    //try {
        start = getToken(1);
    //} catch (TokenMgrError tme) {}
    RootNode root = null;
    try {
      Expression();
            root = new RootNode(srcType, start, start);
            mParseTree.buildTree(root);
            Node endNode = root.getLastChild();
            if(endNode != null) root.setLastToken(endNode.getLastToken());
            client.addWhenTree(root);
            //System.out.println(root.getSourceText());

    } catch (ParseException pe) {
        reportError(pe);
        error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
        root = null;
    } finally {
        {if (true) return root;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
   Token t = null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(SC_OR);
      ConditionalAndExpression();
                ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
    }

  }

  final public void ConditionalAndExpression() throws ParseException {
    Token t = null;
    EqualityExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(SC_AND);
      EqualityExpression();
                ProductionNode.newNode(mParseTree, t,Node.NODE_BINARY_RELATION);
    }

  }

  final public void EqualityExpression() throws ParseException {
    Token t = null;
    if (jj_2_1(2147483647)) {
      DomainSpec();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case PLUS:
      case MINUS:
        RelationalExpression();
        break;
      case INSTANCEOF:
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
        ComparisonNoLHS();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_2(2147483647)) {
        DomainSpec();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          RelationalExpression();
          break;
        case INSTANCEOF:
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NE:
          ComparisonNoLHS();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            ProductionNode.newNode(mParseTree, t,Node.NODE_BINARY_RELATION);
    }
  }

  final public void ComparisonNoLHS() throws ParseException {
    Token t = null;
    Token newToken = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(2147483647)) {
        DomainSpec();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          UnaryExpression();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            //above expression is contained inside a unary comparison node, which is contained inside a unary MISSING_LHS node
            ProductionNode.newNode(mParseTree, t,Node.NODE_UNARY_RELATION);
            newToken = Token.newToken(RuleGrammarConstants.MISSING_LHS, "missing LHS", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            ProductionNode.newNode(mParseTree, newToken, Node.NODE_UNARY_RELATION);
      break;
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
      Type();
            ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
            newToken = Token.newToken(RuleGrammarConstants.MISSING_LHS, "missing LHS", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            ProductionNode.newNode(mParseTree, newToken, Node.NODE_UNARY_RELATION);
      break;
    case GT:
    case LT:
    case LE:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
            ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
            newToken = Token.newToken(RuleGrammarConstants.MISSING_LHS, "missing LHS", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            ProductionNode.newNode(mParseTree, newToken, Node.NODE_UNARY_RELATION);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DomainSpec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
      RangeExpression();
      break;
    case LBRACE:
      SetMembershipExpression();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RangeExpression() throws ParseException {
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Token start = null;
    Token end = null;
    boolean hasStart = false;
    boolean hasEnd = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      start = jj_consume_token(LBRACKET);
      break;
    case LPAREN:
      start = jj_consume_token(LPAREN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
                                                  hasStart = true;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
                                                                                          hasEnd = true;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACKET:
      end = jj_consume_token(RBRACKET);
      break;
    case RPAREN:
      end = jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        ProductionNodeListNode node = mParseTree.buildProductionNodeListNode(start, end, ProductionNodeListNode.RANGE_TYPE);
        if(!hasStart) {
            node.prependChild(NodeTransformation.OPEN_RANGE);
        }
        if(!hasEnd) {
            Node startNode = node.removeFirstChild();
            node.prependChild(NodeTransformation.OPEN_RANGE);
            node.prependChild(startNode);
        }

        tree.pushNode(node);
        mParseTree.reset();
        mParseTree = tree;
  }

  final public void SetMembershipExpression() throws ParseException {
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Token start = null;
    Token end = null;
    start = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    end = jj_consume_token(RBRACE);
        tree.pushNode(mParseTree.buildProductionNodeListNode(start, end, ProductionNodeListNode.SET_MEMBERSHIP_TYPE));
        mParseTree.reset();
        mParseTree = tree;
  }

  final public void RelationalExpression() throws ParseException {
    Token t = null;
    AdditiveExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          t = jj_consume_token(LT);
          break;
        case GT:
          t = jj_consume_token(GT);
          break;
        case LE:
          t = jj_consume_token(LE);
          break;
        case GE:
          t = jj_consume_token(GE);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
        break;
      case INSTANCEOF:
        t = jj_consume_token(INSTANCEOF);
        Type();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
    }

  }

  final public void AdditiveExpression() throws ParseException {
    Token t = null;
    MultiplicativeExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
            ProductionNode.newNode(mParseTree, t,Node.NODE_BINARY_RELATION);
    }

  }

  final public void MultiplicativeExpression() throws ParseException {
    Token t = null;
    UnaryExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case PCNT:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case PCNT:
        t = jj_consume_token(PCNT);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
            ProductionNode.newNode(mParseTree, t,Node.NODE_BINARY_RELATION);
    }

  }

  final public void UnaryExpression() throws ParseException {
Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case BANG:
        t = jj_consume_token(BANG);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
        ProductionNode.newNode(mParseTree, t,Node.NODE_UNARY_RELATION);
      break;
    case TRUE:
    case FALSE:
    case NULL:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
    //a.b.c ... is all one expression name
    a.b.c ... > 5
    
    //a.b.c.lala single method invocation (primary) the .d is fieldaccess
    a.b.c.lala().d

*/
  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
      case AT:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      PrimarySuffix();
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[39] = jj_gen;
      if (jj_2_4(2147483647)) {
        ArrayLiteral();
      } else if (jj_2_5(2147483647)) {
        ArrayAllocator();
      } else if (jj_2_6(2147483647)) {
        MethodName();
        ArgumentsSuffix();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case CREATE:
        case MODIFY:
        case IDENTIFIER:
          ExpressionName();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayAccessSuffix();
      break;
    case DOT:
    case AT:
      FieldAccessSuffix();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayAccessSuffix() throws ParseException {
    Token start;
    Token end;
    start = jj_consume_token(LBRACKET);
    Expression();
    end = jj_consume_token(RBRACKET);
        Token t = Token.newToken(RuleGrammarConstants.ARRAY_ACCESS, "[]", start.beginLine, start.beginColumn, end.endLine, end.endColumn);
            ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
  }

  final public void FieldAccessSuffix() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      t = jj_consume_token(DOT);
      break;
    case AT:
      t = jj_consume_token(AT);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Identifier();
        ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
  }

  final public void ArgumentsSuffix() throws ParseException {
    //Backup the current ParseTree
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Token t= null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case XSLT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      ArgumentList();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    NameNode fnName = (NameNode) tree.popNode();
    //System.out.println(mParseTree);
    FunctionNode n = mParseTree.buildFunctionNode(fnName);
    tree.pushNode(n);
    mParseTree.reset();
    mParseTree = tree;
  }

  final public void ArgumentList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    case XSLT_LITERAL:
      XSLTLiteral();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Token Literal() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
      t = IntegerLiteral();
                               {if (true) return t;}
      break;
    case DOUBLE_LITERAL:
      t = FloatingPointLiteral();
                                     {if (true) return t;}
      break;
    case STRING_LITERAL:
      t = StringLiteral();
                              {if (true) return t;}
      break;
    case TRUE:
    case FALSE:
      t = BooleanLiteral();
                               {if (true) return t;}
      break;
    case NULL:
      t = NullLiteral();
                            {if (true) return t;}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token StringLiteral() throws ParseException {
  Token t;
    t = jj_consume_token(STRING_LITERAL);
        ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token IntegerLiteral() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_INT_LITERAL:
      t = jj_consume_token(DECIMAL_INT_LITERAL);
      break;
    case HEX_INT_LITERAL:
      t = jj_consume_token(HEX_INT_LITERAL);
      break;
    case DECIMAL_LONG_LITERAL:
      t = jj_consume_token(DECIMAL_LONG_LITERAL);
      break;
    case HEX_LONG_LITERAL:
      t = jj_consume_token(HEX_LONG_LITERAL);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token FloatingPointLiteral() throws ParseException {
    Token t;
    t = jj_consume_token(DOUBLE_LITERAL);
            ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token BooleanLiteral() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token NullLiteral() throws ParseException {
 Token t;
    t = jj_consume_token(NULL);
               ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
  {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//Token This()  :
//{Token t;}
//{
//  t = <THIS> 
//  { 
//    ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
//    return t;
//  }
//}

/******************
******* Then Body Specification begins
*/
  final public void ThenNT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THEN:
      jj_consume_token(THEN);
      jj_consume_token(LBRACE);
      ThenStatements(SourceType.RULE_ACTION);
      jj_consume_token(RBRACE);

      break;
    case BODY:
      jj_consume_token(BODY);
      jj_consume_token(LBRACE);
      ThenStatements(SourceType.RULE_ACTION);
      jj_consume_token(RBRACE);

      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ThenStatements(SourceType sourceType) throws ParseException {
    ParseSyntaxTree tree;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case IF:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case THROW:
      case TRY:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_16;
      }
      try {
                //Backup the current ParseTree
                tree = mParseTree;
                mParseTree = new ParseSyntaxTree();

                Token start = null;
                //try {
                    start = getToken(1);
                //} catch (TokenMgrError tme) {}

        ThenStatement();
                if(!mParseTree.isEmpty()) {
                    Node node = mParseTree.popNode();
                    //Statement() already calls buildTree
                    //mParseTree.buildTree(statement);
                    RootNode root = new RootNode(sourceType, start, getToken(0));
                    root.prependChild(node);
                    client.addThenTree(root);
                }
                mParseTree.reset();
                mParseTree = tree;
                //statement.dump("");

      } catch (ParseException pe) {
            reportError(pe);
            error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
      }
    }

  }

  final public void ThenStatement() throws ParseException {
    if (jj_2_7(2147483647)) {
      CallStatement();
    } else if (jj_2_8(2147483647)) {
      CreateStatement();
    } else if (jj_2_9(2147483647)) {
      ModifyStatement();
    } else if (jj_2_10(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case IF:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case THROW:
      case TRY:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Statement() throws ParseException {
    Token t = getToken(1);
    Token statementToken;
    //Backup the current ParseTree
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    int arity = 1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case THROW:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
        arity = LineStatement();
                                      statementToken = Token.newToken(RuleGrammarConstants.LINE_STATEMENT, "line statement", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
        break;
      case IF:
      case WHILE:
      case FOR:
      case TRY:
      case LBRACE:
        arity = BlockStatement();
                                       statementToken = Token.newToken(RuleGrammarConstants.BLOCK_STATEMENT, "block statement", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            ProductionNode statement = new ProductionNode(statementToken, Node.NODE_NULL_RELATION);
            mParseTree.buildTree(statement, arity);
            tree.pushNode(statement);
    } catch (ParseException pe) {
        reportError(pe);
        error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
        //if there was an error, add an empty statement to the tree
        tree.pushNode(new ProductionNode(statementToken = Token.newToken(RuleGrammarConstants.LINE_STATEMENT, "line statement", t.beginLine, t.beginColumn, t.beginLine, t.beginColumn), Node.NODE_NULL_RELATION));
    } finally {
        //restore parse tree;
        mParseTree.reset();
        mParseTree = tree;
    }
  }

  final public int LineStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      EmptyStatement();
      break;
    default:
      jj_la1[53] = jj_gen;
      if (jj_2_11(2147483647)) {
        CallStatement();
      } else if (jj_2_12(2147483647)) {
        CreateStatement();
      } else if (jj_2_13(2147483647)) {
        ModifyStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
        case RETURN:
          ReturnStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  final public int BlockStatement() throws ParseException {
  int arity = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      If();
      break;
    case WHILE:
      While();
      break;
    case FOR:
      For();
      break;
    case LBRACE:
      Block();
      break;
    case TRY:
      arity = TryCatchFinally();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return arity;}
    throw new Error("Missing return statement in function");
  }

  final public void EmptyStatement() throws ParseException {
    Token t;
    t = jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    Token t=null;
    if (jj_2_14(2147483647)) {
      MethodName();
      ArgumentsSuffix();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
      case AT:
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSEQ:
      case MINUSEQ:
      case SLASHEQ:
      case STAREQ:
      case PCNTEQ:
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case DOT:
          case AT:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_17;
          }
          PrimarySuffix();
        }
        AssignmentSuffix();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        PrimaryExpression();
        AssignmentSuffix();
        break;
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          t = jj_consume_token(INCR);
          break;
        case DECR:
          t = jj_consume_token(DECR);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PrimaryExpression();
      ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssignmentSuffix() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSEQ:
    case MINUSEQ:
    case SLASHEQ:
    case STAREQ:
    case PCNTEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        break;
      case PLUSEQ:
        t = jj_consume_token(PLUSEQ);
        break;
      case MINUSEQ:
        t = jj_consume_token(MINUSEQ);
        break;
      case STAREQ:
        t = jj_consume_token(STAREQ);
        break;
      case SLASHEQ:
        t = jj_consume_token(SLASHEQ);
        break;
      case PCNTEQ:
        t = jj_consume_token(PCNTEQ);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
      break;
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        t = jj_consume_token(INCR);
        break;
      case DECR:
        t = jj_consume_token(DECR);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(t.kind == INCR) {
        t = Token.newToken(POST_INCR, "++", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
        ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
    } else if(t.kind == DECR) {
        t = Token.newToken(POST_DECR, "--", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
        ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
    } else {
        ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
    }
  }

  final public void ReturnStatement() throws ParseException {
    Token t;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
      jj_consume_token(SEMICOLON);
                           ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
              ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BreakStatement() throws ParseException {
    Token t;
    t = jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
     ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
  }

  final public void ContinueStatement() throws ParseException {
    Token t;
    t = jj_consume_token(CONTINUE);
    jj_consume_token(SEMICOLON);
     ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
  }

  final public void ThrowStatement() throws ParseException {
    Token t;
    t = jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
     ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
  }

  final public void Block() throws ParseException {
    Token start, end;
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    start = jj_consume_token(LBRACE);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case IF:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case THROW:
      case TRY:
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case DECIMAL_LONG_LITERAL:
      case HEX_LONG_LITERAL:
      case DECIMAL_INT_LITERAL:
      case HEX_INT_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_18;
      }
      if (jj_2_15(2147483647)) {
        Statement();
      } else if (jj_2_16(2147483647)) {
        Statement();
      } else if (jj_2_17(2147483647)) {
        Statement();
      } else if (jj_2_18(2147483647)) {
        LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case IF:
        case WHILE:
        case FOR:
        case CONTINUE:
        case BREAK:
        case RETURN:
        case THROW:
        case TRY:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          Statement();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    end = jj_consume_token(RBRACE);
        tree.pushNode(mParseTree.buildProductionNodeListNode(start, end, ProductionNodeListNode.BLOCK_TYPE));
        mParseTree.reset();
           mParseTree = tree;
  }

  final public void StatementExpressionList() throws ParseException {
    Token start = getToken(1);
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    StatementExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
        tree.pushNode(mParseTree.buildProductionNodeListNode(start, getToken(0), ProductionNodeListNode.STATEMENT_EXPRESSION_LIST_TYPE));
        mParseTree.reset();
        mParseTree = tree;
  }

  final public void If() throws ParseException {
  Token t;
  boolean hasElse = false;
    t = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
                                            hasElse = true;
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
        ProductionNode.newNode(mParseTree, t, hasElse ? 3 : Node.NODE_BINARY_RELATION);
  }

  final public void While() throws ParseException {
  Token t;
    t = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
        ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
  }

  final public void For() throws ParseException {
    Token t;
    //two Semicolon and one Statement node are guaranteed
    int arity = 3;
    t = jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      if (jj_2_19(2147483647)) {
        LocalVariableDeclaration();
                                                                      arity++;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpressionList();
                                          arity++;
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    Semicolon();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
                         arity++;
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    Semicolon();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      StatementExpressionList();
                                      arity++;
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    Statement();
        ProductionNode.newNode(mParseTree, t, arity);
  }

  final public int TryCatchFinally() throws ParseException {
int arity = 0;
    Try();
               arity++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      Catch();
                  arity++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        Finally();
                                          arity++;
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      break;
    case FINALLY:
      Finally();
                  arity++;
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return arity;}
    throw new Error("Missing return statement in function");
  }

  final public void Try() throws ParseException {
  Token t;
    t = jj_consume_token(TRY);
    Block();
        ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
  }

  final public void Catch() throws ParseException {
  Token t;
    t = jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    Type();
    Identifier();
    jj_consume_token(RPAREN);
    Block();
        ProductionNode.newNode(mParseTree, t, 3);
  }

  final public void Finally() throws ParseException {
  Token t;
    t = jj_consume_token(FINALLY);
    Block();
        ProductionNode.newNode(mParseTree, t, Node.NODE_UNARY_RELATION);
  }

//this is only used in the For() production
//all other semicolons can be matched directly
  final public void Semicolon() throws ParseException {
    Token t;
    t = jj_consume_token(SEMICOLON);
        ProductionNode.newNode(mParseTree, t, Node.NODE_NULL_RELATION);
  }

//NameNode Name(NameNode.NameType type, NameNode.NameType finalType) :
  final public NameNode Name() throws ParseException {
    //Backup the current ParseTree
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Identifier();
    label_20:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_20;
      }
      Dot();
      Identifier();
    }
    //NameNode nameNode = mParseTree.buildNameNode(type, finalType);
    NameNode nameNode = mParseTree.buildNameNode();
    tree.pushNode(nameNode);
    mParseTree.reset();
    mParseTree = tree; // restore
    {if (true) return nameNode;}
    throw new Error("Missing return statement in function");
  }

  final public void Dot() throws ParseException {
    Token dot;
    dot = jj_consume_token(DOT);
        ProductionNode.newNode(mParseTree, dot, Node.NODE_NULL_RELATION);
  }

  final public void ExpressionName() throws ParseException {
    NameNode nameNode;
    //Name(NameNode.AMBIGUOUS_NAME, NameNode.EXPRESSION_NAME)
        nameNode = Name();
        Token t = nameNode.getIds()[0];
        Token statementToken = Token.newToken(RuleGrammarConstants.EXPRESSION_NAME, "expression name", t.beginLine, t.beginColumn, t.endLine, t.endColumn);
        ProductionNode.newNode(mParseTree, statementToken, Node.NODE_UNARY_RELATION);
  }

  final public void MethodName() throws ParseException {
    Name();
  }

  final public void TypeName() throws ParseException {
    Name();
  }

/*
void PackageName() :
{}
{
    Name(NameNode.PACKAGE_NAME, NameNode.PACKAGE_NAME)
}

void PackageOrTypeName() :
{}
{
    Name(NameNode.PACKAGE_OR_TYPE_NAME, NameNode.PACKAGE_OR_TYPE_NAME)
}

void AmbiguousName() :
{}
{
	Name(NameNode.AMBIGUOUS_NAME, NameNode.AMBIGUOUS_NAME)
}
*/
  final public void Type() throws ParseException {
    TypeAdditionalArrayDim(0);
  }

  final public void TypeAdditionalArrayDim(int additionalArrayDim) throws ParseException {
    int arrayDimension = additionalArrayDim;
    Token lastBracketPair = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
    case CREATE:
    case MODIFY:
    case IDENTIFIER:
      TypeName();
      break;
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
      PrimitiveType();
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRACKET_PAIR:
      lastBracketPair = jj_consume_token(BRACKET_PAIR);
                                                              arrayDimension++;
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
        TypeNode node = new TypeNode((NameNode)mParseTree.popNode(), arrayDimension, lastBracketPair);
        mParseTree.pushNode(node);
  }

//this production is needed because these tokens can't
// be used as general identifiers due to their being java keywords
  final public void PrimitiveType() throws ParseException {
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        ProductionNode.newNode(mParseTree, token, Node.NODE_NULL_RELATION);
        NameNode node = mParseTree.buildNameNode();
        tree.pushNode(node);
        mParseTree.reset();
        mParseTree = tree;
  }

  final public void LocalVariableDeclaration() throws ParseException {
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    Type();
    VariableDeclarator();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
    tree.pushNode(mParseTree.buildDeclarationNode());
    mParseTree.reset();
    mParseTree = tree;
  }

  final public void VariableDeclarator() throws ParseException {
    Token t;
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      if (jj_2_21(2147483647)) {
        LocalInitializerArrayLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case INSTANCEOF:
        case CALL:
        case CREATE:
        case MODIFY:
        case INT:
        case LONG:
        case DOUBLE:
        case BOOLEAN:
        case DECIMAL_LONG_LITERAL:
        case HEX_LONG_LITERAL:
        case DECIMAL_INT_LITERAL:
        case HEX_INT_LITERAL:
        case DOUBLE_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case GT:
        case LT:
        case BANG:
        case EQ:
        case LE:
        case GE:
        case NE:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ProductionNode.newNode(mParseTree, t, Node.NODE_BINARY_RELATION);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
  }

  final public void LocalInitializerArrayLiteral() throws ParseException {
    Token start;
    Token end;
    ParseSyntaxTree tree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    start = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INSTANCEOF:
    case CALL:
    case CREATE:
    case MODIFY:
    case INT:
    case LONG:
    case DOUBLE:
    case BOOLEAN:
    case DECIMAL_LONG_LITERAL:
    case HEX_LONG_LITERAL:
    case DECIMAL_INT_LITERAL:
    case HEX_INT_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case GT:
    case LT:
    case BANG:
    case EQ:
    case LE:
    case GE:
    case NE:
    case PLUS:
    case MINUS:
      Expression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    end = jj_consume_token(RBRACE);
        tree.pushNode(mParseTree.buildProductionNodeListNode(start, end, ProductionNodeListNode.ARRAY_LITERAL_TYPE));
        mParseTree.reset();
        mParseTree = tree;
  }

//this is an expression
  final public void ArrayLiteral() throws ParseException {
    Token t = getToken(1);
    Type();
    LocalInitializerArrayLiteral();
        ProductionNode.newNode(mParseTree, Token.newToken(RuleGrammarConstants.ARRAY_LITERAL, "array_literal", t.beginLine, t.beginColumn, t.endLine, t.endColumn), Node.NODE_BINARY_RELATION);
  }

  final public void ArrayAllocator() throws ParseException {
    Token start, end;
    TypeAdditionalArrayDim(1);
    jj_consume_token(LBRACKET);
    Expression();
    jj_consume_token(RBRACKET);
    start = jj_consume_token(LBRACE);
    end = jj_consume_token(RBRACE);
        ProductionNode.newNode(mParseTree, Token.newToken(RuleGrammarConstants.ARRAY_ALLOCATOR, "array_allocator", start.beginLine, start.beginColumn, end.endLine, end.endColumn), Node.NODE_BINARY_RELATION);
  }

/* RULE TEMPLATE */
  final public void RTDeclaration() throws ParseException {
    NameNode fullName;
          ((RuleFileParserClient)client).newRule();
    jj_consume_token(RULE_TEMPLATE);
    fullName = Name();
          ((RuleFileParserClient)client).setName(fullName.toName());
    jj_consume_token(LBRACE);
    AttributeNT();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIEWS:
      ViewsNT();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINDINGS:
      BindingsNT();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISPLAY:
      DisplayNT();
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    RTDeclareNT();
    WhenNT();
    ActionContextNT();
    jj_consume_token(RBRACE);
  }

  final public void ViewsNT() throws ParseException {
    jj_consume_token(VIEWS);
    jj_consume_token(LBRACE);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case MODIFY:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_23;
      }
      View();
    }
    jj_consume_token(RBRACE);
  }

  final public void View() throws ParseException {
    Name();
    jj_consume_token(SEMICOLON);
  }

  final public void BindingsNT() throws ParseException {
    jj_consume_token(BINDINGS);
    jj_consume_token(LBRACE);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case MODIFY:
      case INT:
      case LONG:
      case DOUBLE:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_24;
      }
      Binding();
    }
    jj_consume_token(RBRACE);
  }

  final public void Binding() throws ParseException {
    final ParseSyntaxTree backupTree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    final Token start = getToken(1);
    try {
      Type();
      VariableDeclarator();
                final BindingNode node = mParseTree.buildBindingNode();
                backupTree.pushNode(node);

                final RootNode root = new RootNode(SourceType.RT_BINDINGS, start, getToken(0));
                root.prependChild(node);
                ((RuleTemplateParser) client).addBindingTree(root);

                mParseTree.reset();
                mParseTree = backupTree;
    } catch (ParseException pe) {
        reportError(pe);
        error_skip_tokens(new int[]{SEMICOLON}, new int[]{RBRACE});
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      IgnoredDomain();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void IgnoredDomain() throws ParseException {
    ParseSyntaxTree backup = mParseTree;
    mParseTree = new ParseSyntaxTree();
    jj_consume_token(LPAREN);
    Name();
    jj_consume_token(RPAREN);
        mParseTree = backup;
  }

  final public void DisplayNT() throws ParseException {
    jj_consume_token(DISPLAY);
    jj_consume_token(LBRACE);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case MODIFY:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_25;
      }
      Display();
    }
    jj_consume_token(RBRACE);
  }

  final public void Display() throws ParseException {
    Name();
    jj_consume_token(ASSIGN);
    StringLiteral();
    jj_consume_token(SEMICOLON);
  }

  final public void RTDeclareNT() throws ParseException {
    jj_consume_token(DECL);
    jj_consume_token(LBRACE);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case MODIFY:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_26;
      }
      Declarator();
    }
    jj_consume_token(RBRACE);
  }

  final public void ActionContextNT() throws ParseException {
    jj_consume_token(ACTIONCTX);
    jj_consume_token(LBRACE);
    ThenStatements(SourceType.RULE_ACTION);
    jj_consume_token(RBRACE);
  }

  final public void ActionContextStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
      CallStatement();
      break;
    case CREATE:
      CreateStatement();
      break;
    case MODIFY:
      ModifyStatement();
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CallStatement() throws ParseException {
    final ParseSyntaxTree backupTree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    jj_consume_token(CALL);
    MethodName();
        final NameNode nameNode = (NameNode) mParseTree.popNode();
        mParseTree.pushNode(new FunctionNode(nameNode));
    Identifier();
    jj_consume_token(SEMICOLON);
        final TemplatedDeclarationNode templatedDeclarationNode =
            mParseTree.buildTemplatedDeclarationNode(TemplatedDeclarationNode.Mode.CALL);
        backupTree.pushNode(templatedDeclarationNode);
        mParseTree.reset();
        mParseTree = backupTree;
  }

  final public void CreateStatement() throws ParseException {
    final ParseSyntaxTree backupTree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    jj_consume_token(CREATE);
    Type();
    VariableDeclarator();
    jj_consume_token(SEMICOLON);
        backupTree.pushNode(mParseTree.buildTemplatedDeclarationNode(TemplatedDeclarationNode.Mode.CREATE));
        mParseTree.reset();
        mParseTree = backupTree;
  }

  final public void ModifyStatement() throws ParseException {
    final ParseSyntaxTree backupTree = mParseTree;
    mParseTree = new ParseSyntaxTree();
    jj_consume_token(MODIFY);
    Identifier();
    jj_consume_token(SEMICOLON);
        backupTree.pushNode(mParseTree.buildTemplatedProductionNode(
            token, Node.NODE_UNARY_RELATION, TemplatedProductionNode.Mode.MODIFY));
        mParseTree.reset();
        mParseTree = backupTree;
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_3R_58() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) return true;
    }
    }
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(XSLT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    }
    }
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_28()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(BRACKET_PAIR)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    }
    }
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(MODIFY)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(COMMA)) return true;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(MODIFY)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_28()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(MODIFY)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    }
    }
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_32()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_30()) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_28()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public RuleGrammarTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[91];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80000,0x0,0x3f00000,0x3f00000,0x0,0x0,0x0,0x0,0x0,0xa00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0xe0000,0x0,0x0,0xf8000000,0xe0010,0xf8000000,0xe0000,0xe0000,0x0,0xe0000,0xfe101c,0x0,0x0,0xfe101c,0x0,0x0,0xfe101c,0x0,0xfe001c,0x0,0x1000,0x0,0x0,0xfe101c,0xfe101c,0x0,0x0,0xfe101c,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0xfe001c,0x0,0x1c,0xe0000,0x0,0x0,0xfe101c,0x0,0xfe101c,0x1c,0x0,0xc,0x0,0xfe6fbc,0xfe6fbc,0xfe6fbc,0x0,0xfe2e1c,0x41a0,0x0,0x0,0x0,0xfe001c,0x0,0x0,0x0,0xfe101c,0xfe6fbc,0xfe6fbc,0x0,0x40,0xfe001c,0xfe001c,0xfe101c,0xfe001c,0x10000,0x18000,0xfe0000,0x0,0xf00000,0x0,0xfe101c,0x0,0x0,0xfe101c,0x0,0x0,0x0,0xe0000,0xfe0000,0x0,0xe0000,0xe0000,0xe0000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x8000,0x0,0x0,0x0,0x8000,0x0,0x8000,0x8000,0x0,0x8000,0x802a8be0,0x0,0x0,0x80028be0,0x0,0x0,0x80028be0,0x0,0x28be0,0x80000000,0x80000000,0x2a0000,0x220000,0x802a8be0,0x802a8be0,0x440000,0x1000000,0x802a8be0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x28be0,0x6200000,0x20be0,0x8000,0x6200000,0x6000000,0x802aabe0,0x1000000,0x802aabe0,0xbe0,0x1e0,0x0,0x0,0x8a8be0,0x8a8be0,0x8a8be0,0x800000,0x28be0,0x80000,0x6200000,0x46200000,0x0,0x28be0,0x40000000,0x0,0x40000000,0x80aa8be0,0x8a8be0,0x8a8be0,0x1000000,0x0,0x28be0,0x28be0,0x802a8be0,0x28be0,0x0,0x0,0x8000,0x8000000,0x0,0x1000000,0x802a8be0,0x40000000,0x1000000,0x802a8be0,0x0,0x0,0x0,0x8000,0x8000,0x20000,0x8000,0x8000,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1803f,0x40,0x80,0x1803f,0x24,0x24,0x1803f,0x24,0x18002,0x19,0x3d,0x0,0x0,0x1803f,0x1803f,0x0,0x0,0x1803f,0x19,0x19,0x19,0x18000,0x18000,0xe0000,0xe0000,0x18002,0x18002,0x0,0x0,0x0,0x0,0x0,0x1803f,0x0,0x1803f,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x0,0x300,0x0,0x0,0x7f00,0x300,0x300,0x7c00,0x300,0x7f00,0x1803f,0x300,0x300,0x0,0x0,0x300,0x300,0x1803f,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x1803f,0x0,0x0,0x1803f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[21];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public RuleGrammar(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RuleGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RuleGrammar(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RuleGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RuleGrammar(RuleGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(RuleGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[162];
    for (int i = 0; i < 162; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 91; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 162; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
