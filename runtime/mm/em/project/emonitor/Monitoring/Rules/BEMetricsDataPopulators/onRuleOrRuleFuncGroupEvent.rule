/**
 * @description 
 * @author 
 */
rule Monitoring.Rules.BEMetricsDataPopulators.onRuleOrRuleFuncGroupEvent {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		Monitoring.Events.bemetrics.RuleOrRuleFuncGroupEvent	metricevent;
		
	}
	when {
		metricevent.hostName != null && String.length(String.trim(metricevent.hostName)) != 0 && metricevent.metricName != null && String.length(String.trim(metricevent.metricName)) != 0;
	}
	then {
		Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Got RuleOrRuleFuncGroupEvent[id="+metricevent@id+",name="+metricevent.metricName+",idx="+metricevent.index+",size="+metricevent.batchSize+",batchStart="+metricevent.isBatchStart+",batchEnd="+metricevent.isBatchEnd+"]");
		Shared.Concepts.MonitorableEntity[] entities = searchMonitorableEntities(metricevent.hostName);
		if (entities == null){
		    Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","No entities found matching "+metricevent);
		    Event.consumeEvent(metricevent);
		    return;
		}
		int idx = String.lastIndexOfString(metricevent.metricName,0,":");
		String cType = String.substring(metricevent.metricName,idx+1,String.length(metricevent.metricName));
		for (int i = 0 ; i < entities@length ; i = i + 1) {
		    String componentConfigMapId = getComponentConfigMapId(entities[i],cType);
		    String[] seriesNames = Util.HashMap.getObject(componentConfigMapId,"seriesnames");
		    String monitorableFQName = getFQName(entities[i]);
		    String viewExtId = monitorableFQName+":"+cType;
		    Shared.Concepts.AbstractMonitorView view = Instance.getByExtId(viewExtId);
		    if (view != null) {
		        Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Going to use View[extId="+view@extId+",type="+view.type+"]...");
		        String seriesDataExtId = view@extId+":"+seriesNames[0];
		        Shared.Concepts.SeriesData seriesData = Instance.getByExtId(seriesDataExtId);
		        if (seriesData == null){
		            seriesData = Instance.newInstance("/Shared/Concepts/SeriesData",seriesDataExtId);
		            seriesData.name = seriesNames[0];
		            seriesData.threshold = Util.HashMap.getObject(componentConfigMapId,"threshold");
		            view.seriesdata[view.seriesdata@length] = seriesData;
		            Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Created SeriesData[extId"+seriesDataExtId+",name"+seriesNames[0]+"] under View[extId="+view@extId+",type="+view.type+"]...");
		        }
		        else {
		            Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Updating SeriesData[extId"+seriesDataExtId+",name"+seriesNames[0]+"] under View[extId="+view@extId+",type="+view.type+"]...");
		        }
		        if (metricevent.isBatchStart == true){
		            Instance.PropertyArray.clear(seriesData.categories);
		            Instance.PropertyArray.clear(seriesData.values);
		            Instance.PropertyArray.clear(seriesData.rawValues);
		            int max = seriesData.threshold;
		            if (metricevent.batchSize < max){
		                max = metricevent.batchSize;
		            }
		            Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Resetting SeriesData[extId"+seriesDataExtId+",name"+seriesNames[0]+"] with count as "+max+"under View[extId="+view@extId+",type="+view.type+"]...");
		            for (int j = 0 ; j < max ; j = j + 1){
		                seriesData.categories[j] = null;
		                seriesData.values[j] = null;
		                seriesData.rawValues[j] = null;
		            }
		        }
		        String subName = String.substring(metricevent.metricName,0,idx);
		        idx = String.lastIndexOfString(subName,0,":");
		        String shortName = getShortName(String.substring(subName,idx+1,String.length(subName)));
		        idx = String.lastIndexOfString(shortName,0,".");
		        if ( idx != -1){
		            shortName = String.substring(shortName,idx+1,String.length(shortName));
		        }
		        String[] avgArray = null;
		        if(metricevent.avgList != null)
		        	avgArray = String.tokenize(metricevent.avgList, ";");
		        try{
		        	String[] categoriesArray = String.tokenize(metricevent.categories,";");
		            for(int k=0;k<avgArray@length;k = k+1){
				        seriesData.categories[k] = categoriesArray[k];
				        seriesData.values[k] = avgArray[k];
				        seriesData.rawValues[k] = avgArray[k];
		            }
		        }
		        catch(Exception e){
		        	//catch the index out of bound exception.
		        }
		    }
		    else {
		        Shared.RuleFunctions.log("onRuleOrRuleFuncGroupEvent","DEBUG","Found no view matching "+viewExtId+"...");
		    }
		}
		Event.consumeEvent(metricevent);
	}
}