/**
 * @description 
 */
Object rulefunction Shared.RuleFunctions.topology.searchMonitorableEntitiesByTypeAndProps {
	attribute {
		validity = ACTION;
	}
	scope {
		String	typePath;
		Object	properties;
	}
	body {
		if (Shared.Concepts.GlobalScoreCard.siteID == null){
		   Shared.RuleFunctions.log("searchMonitorableEntitiesByTypeAndProps","DEBUG","Site id is null"); 
		   return null;
		}
		String activeValue = null;
		String healthValue = null;
		if (properties != null){
		    Object[] propertiesArray = properties;
		    for (int i = 0 ; i < propertiesArray@length ; i = i + 1){
		        String[] property = propertiesArray[i];
		        if (property[0] == "active"){
		            activeValue = property[1];
		        }
		        else if (property[0] == "healthLevel"){
		            healthValue = property[1];
		        }
		        else {
		            Shared.RuleFunctions.log("searchMonitorableEntitiesByTypeAndProps","WARNING","Unknown property["+property[0]+"] specified for "+typePath);
		        }
		    }
		}
		Shared.RuleFunctions.log("searchMonitorableEntitiesByTypeAndProps","DEBUG","Going to search "+typePath+" with active value as "+activeValue+" and health value as "+healthValue);
		int totalEntities = 0;
		int matchingEntities = 0;
		String[] pathElements = String.split(typePath,"/");
		String searchType = pathElements[pathElements@length-1];
		String parentType = null;
		if (searchType == "*" && pathElements@length > 1){
		    parentType = pathElements[pathElements@length-2];
		}
		BEMMUtil.LinkedList.createList("searchbytypestack");
		BEMMUtil.LinkedList.add("searchbytypestack",0,Instance.getByExtId(Shared.Concepts.GlobalScoreCard.siteID));
		while (BEMMUtil.LinkedList.isEmpty("searchbytypestack") == false){
		    //remove the top most element
		    Shared.Concepts.MonitorableEntity entity = BEMMUtil.LinkedList.removeByIndex("searchbytypestack",0);
		    if (entity.purged == true){
		        continue;
		    }
		    boolean applyFilter = entity.type == searchType;
		    if (applyFilter == false && entity.parent != null){
		        applyFilter = entity.parent.type == parentType;
		    }
		    if (applyFilter){
		        //we have a base hit , increment totalcount
		        totalEntities = totalEntities + 1;
		        //do a property based filter
		        boolean activeMatch = true;
		        if (activeValue != null) {
		            activeMatch = (activeValue == String.valueOfBoolean(entity.active));
		        }
		        boolean healthMatch = true;
		        if (healthValue != null) {
		            healthMatch = (healthValue == entity.healthLevel);
		        }
		        if (activeMatch && healthMatch){
		            //we have a full match
		            Shared.RuleFunctions.log("searchMonitorableEntitiesByTypeAndProps","DEBUG",getFQName(entity)+" matches "+typePath+"...");
		            matchingEntities = matchingEntities + 1;
		        }
		    }
		    else {
		        //add child to the stack
		        int childCnt = entity.children@length;
		        for (int i = 0 ; i < childCnt ; i = i + 1){
		            //add the child to the bottom of the stack
		            if (entity.children[i].purged == false) {
		                BEMMUtil.LinkedList.add("searchbytypestack", BEMMUtil.LinkedList.size("searchbytypestack"),entity.children[i]);
		            }
		        }
		    }
		}
		int[] results = int[2]{};
		results[0] = totalEntities;
		results[1] = matchingEntities;
		Object resultsObj = results;
		return resultsObj;
	}
}