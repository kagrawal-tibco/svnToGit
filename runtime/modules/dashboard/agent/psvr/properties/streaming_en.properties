# standard set of arguments
# 0 = token
# 1 = user id
# 2 = preferred role
# 3 = all roles
# 4 = exception message
# 5.. = custom arguments

service.mbean.instancealreadyexisting.failure = Could not register {5} against {6} since {6} is already bound

service.mbean.registration.failure = Failed to register {5} against {6}

service.mbean.noncompliantbean.failure = {5} is not a compliant mbean

security.lookup.failure = Could not lookup 'security' service

server.paused = <psvrhealth><errorcode>paused</errorcode><errormessage>The server has been paused</errormessage></psvrhealth>

server.resumed = <psvrhealth><errorcode>resumed</errorcode><errormessage>The server has been resumed</errormessage></psvrhealth>

server.shutdown = <psvrhealth><errorcode>shutdown</errorcode><errormessage>The server has been shutdown</errormessage></psvrhealth>

token.deleted = <psvrhealth><errorcode>signedout</errorcode><errormessage>You have been signed out</errormessage></psvrhealth>

token.expired = <psvrhealth><errorcode>timeout</errorcode><errormessage>Your session has expired</errormessage></psvrhealth><psvrhealth>

subscription.interpret.data.failure = Could not interpret subscription request [{6}] on {5} for {1}/{2} identified by {0} due to data failure - {4}

subscription.interpret.plugin.failure = Could not interpret subscription request [{6}] on {5} for {1}/{2} identified by {0} due to plug-in failure - {4}

#updatescommunicator.management.lookup.failure = Could not look up 'management' service

updatescommunicator.pushsubscription.initialization.failure = Could not initialize 'push subscription' service

updatescommunicator.pushsubscription.addsubscription.failure = Could not process subscription request for {6} on {5}

updatescommunicator.pushsubscriptionhandler.shutdown.failure = Could not shutdown push subscription handler for {5}

#updatescommunicator.pushsubscription.removesubscription.failure = Could not process unsubscription request

stream.publisher.queue.size.update = Increased the size of the streaming buffer for {1}/{2} identified by {0} from {6} to {7} while queueing {5}

stream.publisher.dequeuing.failure = could not dequeue data update notice for {6} on {5} for {1}/{2} identified by {0} due to interruption

stream.publisher.io.failure = could not stream data update corresponding to {6} on {5} for {1}/{2} identified by {0}

stream.publisher.streaming.failure = could not process stream data update corresponding to {6} on {5} for {1}/{2} identified by {0}

stream.publisher.marshalling.failure = could not marshal stream data update corresponding to {6} on {5} for {1}/{2} identified by {0}

stream.steadypublisher.toolow.burstperiod = the value specified for {6}[{7}] is too low for steady streaming, defaulting to periodic streaming on {5} for {1}/{2} identified by {0}

stream.steadypublisher.lesser.burstperiod = the value specified for {8}[{9}] is less then the value specified for {6}[{7}], defaulting to periodic streaming on {5} for {1}/{2} identified by {0}

stream.steadypublisher.batchqueuing.failure = could not queue batched data update notice(s) for {6} on {5} for {1}/{2} identified by {0}
