<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical"
	xmlns:ns1="bridge.*"
	width="100%"
	height="100%"
	paddingTop="0"
	paddingLeft="0"
	paddingRight="0"
	paddingBottom="0"
	backgroundColor="#FFFFFF"
	creationComplete="init()"
>
	<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import mx.controls.Text;
			
			import com.tibco.be.views.user.components.chart.BEVChartComponent;
			import com.tibco.be.views.core.ui.dashboard.UnknownComponent;
			import com.tibco.be.views.core.ui.dashboard.BEVComponent;
			import com.tibco.be.views.core.ui.dashboard.BEVComponentFactory;
			
			private var _component:BEVComponent;			
			private var _configXML:XML;
			private var _dataXML:XML;
			private var _completeXML:XML;
			
			private function init():void {
				if(ExternalInterface.available == false){
					buildAndDisplayMessage("Preview is disabled due to technical limitations.");
				}
				else{
					try{
						ExternalInterface.addCallback("setChartConfigAndData",setChartConfigAndData);
						ExternalInterface.addCallback("setChartConfig",setChartConfig);
						ExternalInterface.addCallback("updateChartData",updateChartData);
						ExternalInterface.call("previewReady","");
					}
					catch(securityError:SecurityError){
						var msgText:Text = buildAndDisplayMessage("Preview is disabled due to security sandbox. <br><a href=\"event:opensecuritysettings\">Open Security Settings</a>");
						msgText.addEventListener(TextEvent.LINK, handleLinkClick);	
						trace(securityError.getStackTrace());					
					}
					catch(error:Error){
						buildAndDisplayMessage("Preview is not supported");
						trace(error.getStackTrace());
					}
				}
			}
			
			public function handleLinkClick(e:TextEvent):void{
				if(e.type == TextEvent.LINK){
					if(e.text == "opensecuritysettings"){
						Security.showSettings(SecurityPanel.SETTINGS_MANAGER);
					}
				}
			}
			
			public function setChartConfigAndData(configAndDataXMLStr:String):void{
				try{
					_completeXML = new XML(configAndDataXMLStr);
					extractConfigFromComplete();
					extractDataFromComplete();
					buildAndDisplayComponent();
				}
				catch(error:Error){
					buildAndDisplayMessage("Failed to set config and data. <br>"+error.message);
					trace(error.getStackTrace());
				}
			}
			
			public function setChartConfig(configXMLStr:String):void{
				try{
					_configXML = new XML(configXMLStr);
					buildAndDisplayComponent();
					_completeXML = null;
				}
				catch(error:Error){
					buildAndDisplayMessage("Failed to set config. <br>"+error.message);
					trace(error.getStackTrace());
				}
			}
			
			public function updateChartData(dataXMLStr:String):void{
				try{
					var dataXML:XML = new XML(dataXMLStr);
					if(_dataXML == null){
						_component.componentData = dataXML;
					}
					else{
						_component.updateData(dataXML);	
					}
					_dataXML = dataXML;
					_completeXML = null;
				}
				catch(error:Error){
					buildAndDisplayMessage("Failed to update data. <br>"+error.message);
					trace(error.getStackTrace());
				}
			}
			
			/**
			 * Removes children of visualizationdata whose templatetype is "data"
			 */
			private function extractConfigFromComplete():void{
				if(_completeXML == null){ return; }
				_configXML = new XML(_completeXML);
				if(_completeXML.visualizationdata == undefined || _completeXML.visualizationdata.length() == 0 || _completeXML.visualizationdata.datarow == undefined){
					return;
				}
				var dataRows:XMLList = _configXML.visualizationdata.datarow.(@templatetype == "data");
				for(var i:int=0; i < dataRows.length(); i++){
					delete dataRows[i--];
				}
			}
			
			/**
			 * Creates a visualizationdata node whose children consist of the "data" templatetype
			 * nodes from the completeXML.
			 */
			private function extractDataFromComplete():void{
				if(_completeXML == null){ return; }
				if(_completeXML.visualizationdata == undefined || _completeXML.visualizationdata.length() == 0){
					_dataXML = new XML();
					return;
				}
				_dataXML = new XML(_completeXML.visualizationdata[0]);
				var headerRows:XMLList = _dataXML.datarow.(@templatetype == "header");
				for(var i:int=0; i < headerRows.length(); i++){
					delete headerRows[i--];
				}
			}
			
			private function buildAndDisplayMessage(message:String):Text{
	        	//clear previous component
				removeAllChildren();
				var topLabel:Label = new Label();
				topLabel.percentHeight = 100;
				topLabel.percentWidth = 100;
				addChild(topLabel);
				
				var msgText:Text = new Text();
				msgText.percentWidth = 100;
				msgText.htmlText = message;
				msgText.setStyle("textAlign","center");
				addChild(msgText);
				
				var bottomLabel:Label = new Label();
				bottomLabel.percentHeight = 100;
				bottomLabel.percentWidth = 100;
				addChild(bottomLabel);
				
				return msgText;				
			}
			
			private function buildAndDisplayComponent():void{
	        	try{
	        		var componentType:String = new String(_configXML.@componenttype);
	        		//check if the existing component is of same type 
	        		if (_component == null || _component.componentType != componentType) {
			        	//clear previous component
			    		removeAllChildren();
			        	//build new component
						_component = BEVComponentFactory.instance.getComponent(
							new String(_configXML.@componentid),		//id
							new String(_configXML.@componentname),		//name
							new String(_configXML.@componenttype),		//title
							new String(_configXML.@componenttype),		//type
							new Rectangle(0,0,1,1)			//layout constraints
						) as BEVComponent;
						if(_component == null || _component is UnknownComponent){
							buildAndDisplayMessage("Incorrect component configuration");
							trace(
								"ERROR: Could not build component!\n" +
								"\tID: " + _configXML.@componentid +
								"\n\tName: " + _configXML.@componentname +
								"\n\tType: " + _configXML.@componenttype
							);
							return;
						}	
						if(_component is BEVChartComponent){
							(_component as BEVChartComponent).initProperties();
						}
						_component.percentWidth = 100;
						_component.percentHeight = 100;
	        		}
					_component.componentConfig = _configXML;
					if(_dataXML != null) _component.componentData = _dataXML;
					if (getChildren().length == 0) {
						addChild(_component);
					}
	        	}
	        	catch(error:Error){
	        		buildAndDisplayMessage(error.message);
	        		trace(error.getStackTrace());
	        	}
			}
			
		]]>
	</mx:Script>
</mx:Application>