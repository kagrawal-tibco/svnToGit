<?xml version="1.0" encoding="utf-8"?>
<ConditionEditor xmlns="com.tibco.be.views.user.components.drilldown.querymanager.view.*" 
	xmlns:querymanager="com.tibco.be.views.user.components.drilldown.querymanager.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%"
	dropShadowEnabled="false"
	paddingLeft="10"
	paddingTop="10"
	paddingBottom="10"
	xmlns:validators="com.tibco.be.views.user.components.drilldown.querymanager.validators.*">

	<mx:Script>
		<![CDATA[
			import mx.formatters.DateFormatter;
			import mx.events.ValidationResultEvent;
			import mx.controls.TextInput;
			import mx.collections.ArrayCollection;
			import mx.controls.ComboBox;
			import mx.controls.Text;
			import mx.containers.HBox;
			import com.tibco.be.views.utils.BEVUtils;
			import com.hillelcoren.utils.StringUtils;
			import mx.utils.StringUtil;
			import mx.controls.Label;
			
			private var dateStr1:String = "";
			private var dateStr2:String = ""; 
			
			private var dateFormatter:DateFormatter;
			
			private var existingInTheLastConditions:ArrayCollection;
			
			private var existingNonInTheLastConditions:ArrayCollection;
			
			private var displayComponents:ArrayCollection = new ArrayCollection();
			
			override public function init(fieldID:String, fieldName:String, fieldDataType:String, sOperator:String, conditions:ArrayCollection):void{
				super.init(fieldID, fieldName, fieldDataType, sOperator, conditions);
				dateFormatter = new DateFormatter();
				dateFormatter.formatString = "YYYY-MM-DD LL:NN:SS A";	
				this.initialize();
				conditionsCb.selectedItem = sOperator;
				displayComponents.removeAll();
				// check for selected operator, show editor panel accordingly
				if(sOperator == "Is" || sOperator == "Is Before" || sOperator == "Is After"){
					var dateComponent:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent);
					var date:Date = new Date(Number(conditions[0]));
					dateComponent.initDateComponent(date, _currentConditions, -1, this, sOperator,_fieldName);
					//dateComponent.setEditor(this);
					//headerRenderer.lblCondition.text = " "+sOperator+" "+getDateString(date);
					this.conditionAsString = sOperator+" "+getDateString(date);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent));
				}
				else if(sOperator == "Is Today"){
					dateComponent = new DateDisplayComponent();
					this.addChild(dateComponent);
					date = new Date();
					dateComponent.initDateComponent(date,_currentConditions,-1,this,sOperator,_fieldName);
					//dateComponent.setEditor(this);
					dateComponent.enabled = false;
					//headerRenderer.lblCondition.text = " "+sOperator;
					this.conditionAsString = sOperator;
				}
				else if(sOperator == "Is In The Range"){
					var dateComponent1:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent1);
					var date1:Date = new Date(Number(conditions[0]));
					dateComponent1.initDateComponent(date1,_currentConditions,0,this,sOperator,_fieldName);
					//dateComponent.setEditor(this);	
					dateStr1 = getDateString(date1);
					
					var lblAnd:Label = new Label();
					lblAnd.text = "And";
					
					this.addChild(lblAnd);					
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent1));
					
					var dateComponent2:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent2);					
					var date2:Date = new Date(Number(conditions[1]));
					dateComponent2.initDateComponent(date2,_currentConditions,1,this,sOperator,_fieldName);
					dateStr2 = getDateString(date2);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent2));
					//dateComponent.setEditor(this);	
					//headerRenderer.lblCondition.text = " "+sOperator+" "+getDateString(date1)+" and "+getDateString(date2);
					this.conditionAsString = sOperator+" "+getDateString(date1)+" and "+getDateString(date2);
				}
				else if(sOperator == "Is In The Last"){
					var inThelastComponent:InTheLastDisplayComponent = new InTheLastDisplayComponent();
					this.addChild(inThelastComponent);
					inThelastComponent.initComponent(conditions[0],conditions[1],_currentConditions,this,_fieldName);
					this.conditionAsString = sOperator+ " "+conditions[0]+" "+inThelastComponent.getDisplayString(conditions[1]);
					//store the incoming in the last conditions to later use
					existingInTheLastConditions = new ArrayCollection(conditions.toArray());
					
					displayComponents.addItem(AbstractDateDisplayComponent(inThelastComponent));
				}
				else if(sOperator == "Is Any" ||sOperator == "Is Null"||sOperator == "Is Not Null"){
					var dc1:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dc1);
					date = new Date();
					dc1.initDateComponent(date, _currentConditions,-1,this,sOperator,_fieldName);
					//dateComponent.setEditor(this);	
					dc1.enabled = false;
					//headerRenderer.lblCondition.text = " "+sOperator;
					this.conditionAsString = sOperator;
				}
			}
			
			private function changeEvt(event:Event):void{
				var selectedOp:String = event.currentTarget.selectedItem;
				if (_currentOperator == "Is In The Last") {
					//we are switching from Is In The Last 
					//store the current conditions for later use in Is In The Last 
					//existingInTheLastConditions = _currentConditions;
					//we should make defensive copy
					existingInTheLastConditions[0] = _currentConditions[0];
					existingInTheLastConditions[1] = _currentConditions[1];
					//reset the _currentCondition to the existingNonInTheLastConditions
					//_currentConditions = existingNonInTheLastConditions;
					// defensive copy
					_currentConditions[0] = existingNonInTheLastConditions[0];
					if(_currentConditions.length > 1 && existingNonInTheLastConditions.length > 1) {
						_currentConditions[1] = existingNonInTheLastConditions[1];
					}
				}
				else {
					if (selectedOp == "Is In The Last"){
						//we are switching to Is In The Last 
						//store the current conditions to existingNonInTheLastCondition (for later use)
						//existingNonInTheLastConditions = _currentConditions;
						//defensive copy
						if(existingNonInTheLastConditions == null){
							existingNonInTheLastConditions = new ArrayCollection();							
						}
						existingNonInTheLastConditions.removeAll();
						existingNonInTheLastConditions.addItem(_currentConditions[0]);
						if(_currentConditions.length > 1){
							existingNonInTheLastConditions.addItem(_currentConditions[1]);
						}
						//initialize the existingInTheLastCondition if needed
						if (existingInTheLastConditions == null){
							existingInTheLastConditions = new ArrayCollection();
							existingInTheLastConditions.addItem("60");
							existingInTheLastConditions.addItem("seconds");
						}
						//set the currentCondition to the existingInTheLastCondition
						//_currentConditions = existingInTheLastConditions;
						// defensive copy
						_currentConditions[0] = existingInTheLastConditions[0];
						if(_currentConditions.length < 2) {
							_currentConditions.addItem(existingInTheLastConditions[1]);
						}
						else {
							_currentConditions[1] = existingInTheLastConditions[1];	
						}
					}
				}
				_currentOperator = selectedOp;
				redraw(selectedOp, _currentConditions);
			}
			
			override public function redraw(operator:String, conditions:ArrayCollection):void{
				conditionsCb.selectedItem = operator;
				displayComponents.removeAll();
				if(operator == "Is"){
					if(_currentConditions.length > 1){
						_currentConditions.removeItemAt(1);
					}
					var cmbBox:CustomComboBox = CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					var dateComponent:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent);
					var date:Date = new Date(Number(conditions[0]));
					dateComponent.initDateComponent(date, _currentConditions,-1,this,operator,_fieldName);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent));
					//headerRenderer.lblCondition.text = " "+operator+" "+getDateString(date);
					conditionAsString = operator+" "+getDateString(date);
				}
				else if(operator == "Is Today"){
					if(_currentConditions.length > 1){
						_currentConditions.removeItemAt(1);
					}
					cmbBox = CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					dateComponent= new DateDisplayComponent();
					this.addChild(dateComponent);
					date = new Date();
					dateComponent.initDateComponent(date, _currentConditions,-1,this,operator,_fieldName);
					dateComponent.enabled = false;
					//headerRenderer.lblCondition.text = " "+operator;
					conditionAsString = operator;
				}
				else if(operator == "Is Before"){
					if(_currentConditions.length > 1){
						_currentConditions.removeItemAt(1);
					}					
					cmbBox= CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					dateComponent= new DateDisplayComponent();
					this.addChild(dateComponent);
					date = new Date(Number(conditions[0]));
					dateComponent.initDateComponent(date, _currentConditions,-1,this,operator,_fieldName);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent));				
					//headerRenderer.lblCondition.text = " "+operator+ " "+getDateString(date);
					conditionAsString = operator+ " "+getDateString(date);
				}
				else if(operator == "Is After"){
					if(_currentConditions.length > 1){
						_currentConditions.removeItemAt(1);
					}
					cmbBox= CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					dateComponent= new DateDisplayComponent();
					this.addChild(dateComponent);
					date = new Date(Number(conditions[0]));
					dateComponent.initDateComponent(date, _currentConditions,-1,this,operator,_fieldName);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent));
					//headerRenderer.lblCondition.text = " "+operator+ " "+getDateString(date);
					conditionAsString = operator+ " "+getDateString(date);
				}
				else if(operator == "Is In The Last"){
					cmbBox= CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					var inThelastComponent:InTheLastDisplayComponent = new InTheLastDisplayComponent();
					this.addChild(inThelastComponent);
					if(conditions.length == 1){
						inThelastComponent.initComponent(conditions[0] as String,"seconds",_currentConditions, this,_fieldName);
					}
					else {
						inThelastComponent.initComponent(conditions[0] as String,conditions[1] as String,_currentConditions, this,_fieldName);					
					}
					this.addChild(inThelastComponent);
					displayComponents.addItem(AbstractDateDisplayComponent(inThelastComponent));
					conditionAsString = operator+ " "+conditions[0]+" "+conditions[1];
				}
				else if(operator == "Is Any" ||operator == "Is Null"||operator == "Is Not Null"){
					if(_currentConditions.length > 1){
						_currentConditions.removeItemAt(1);
					}
					cmbBox= CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					var dc1:DateDisplayComponent= new DateDisplayComponent();
					this.addChild(dc1);
					date = new Date();
					dc1.initDateComponent(date, _currentConditions,-1,this,operator,_fieldName);
					dc1.enabled = false;
					//headerRenderer.lblCondition.text = " "+operator;
					conditionAsString = operator;
				}
				else if(operator == "Is In The Range"){
					cmbBox= CustomComboBox(this.getChildAt(0));
					this.removeAllChildren();
					this.addChild(cmbBox);
					var dateComponent1:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent1);
					var date1:Date = new Date(Number(conditions[0]));
					dateComponent1.initDateComponent(date1, _currentConditions,0,this,operator,_fieldName);
					dateStr1 = getDateString(date1);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent1));
					
					var lblAnd:Label = new Label();
					lblAnd.text = "And";
					this.addChild(lblAnd);
					
					var dateComponent2:DateDisplayComponent = new DateDisplayComponent();
					this.addChild(dateComponent2);
					if(conditions.length == 1){
						var thisDate:Date = new Date();
						conditions.addItem(String(thisDate.time));
						//_currentConditions.addItem(String(thisDate.time));
					}
					var date2:Date = null;
					if(isNaN(conditions[1])) {
						date2 = new Date(date1);						
					}
					else {
						date2= new Date(Number(conditions[1]));	
					}
					
					dateComponent2.initDateComponent(date2, _currentConditions,1,this,operator,_fieldName);
					dateStr2 = getDateString(date2);
					displayComponents.addItem(AbstractDateDisplayComponent(dateComponent2));
					//headerRenderer.lblCondition.text = " "+operator+" "+getDateString(date1)+" and "+getDateString(date2);
					conditionAsString = operator+" "+getDateString(date1)+" and "+getDateString(date2);
				}
			}
			
			
			private function getDateString(date:Date):String{
//				var year:Number = date.getFullYear();
//				var month:Number = date.getMonth()+1;
//				var day:Number = date.getDate();
//				var hrs:Number = date.getHours();
//				var min:Number = date.getMinutes();
//				var sec:Number = date.getSeconds();
//				var ampm:String = "AM";
//				var hrsIn12:Number = hrs % 12;
//				if(hrs / 12 != 0){
//					ampm = "PM"
//				}
//				return year+"-"+month+"-"+day+" "+hrsIn12+":"+min+":"+sec+" "+ ampm;
				var str:String = dateFormatter.format(date);  
				return str;
			}
			
//			private function getDateTime(dateStr:String):Number{
//				//var newDateStr:String = StringUtil.substitute(dateStr, "-",":");
//				var newDateStr:String = BEVUtils.searchAndReplace(dateStr,"-","/");
//				//var newDateStr:String = dateStr.replace("-",":");
//				var timeinMillisec:Number = Date.parse(newDateStr);
//				return timeinMillisec;
//			}
			
//			public function updateDateChange(dateStr:String):void {
//				var timeInMilli:Number = getDateTime(dateStr);
//				// update current condition
//				// also update header
//			}
			
			public function changeDateDisplay(dateStr:String, index:int):void{
				if(index == 0){
					dateStr1 = dateStr;
				}
				else {
					dateStr2 = dateStr;
				}
				conditionAsString = " Is In The Range "+dateStr1+" and "+dateStr2;
			}
			
			public override function doValidation():ValidationResultEvent {
				if(_currentOperator == "Is In The Range" && _currentConditions.length == 2){
					return dateRangeValidator.validate(_currentConditions);
				}
//				for(var comp:AbstractDateDisplayComponent in displayComponents){
				for(var count:int; count < displayComponents.length; count++){
					var comp:AbstractDateDisplayComponent = AbstractDateDisplayComponent(displayComponents.getItemAt(count));
					var valResult:ValidationResultEvent = comp.doValidation();
					if(valResult.results != null && valResult.results.length > 0) {
						return valResult;
					}
				}
				return null;
			}
			
			override public function reset():void{
				super.reset();
				existingInTheLastConditions = null;
				existingNonInTheLastConditions = null;
			} 
			
		]]>
	</mx:Script>
	<validators:RangeValidator id="dateRangeValidator" property="text" fieldName="{_fieldName}" />
	<querymanager:CustomComboBox id="conditionsCb" change="changeEvt(event)" width="75%" >
		<mx:ArrayCollection>
			<mx:String>Is</mx:String>
			<mx:String>Is Today</mx:String>
			<mx:String>Is Before</mx:String>
			<mx:String>Is After</mx:String>
			<mx:String>Is In The Last</mx:String>
			<mx:String>Is In The Range</mx:String>
			<mx:String>Is Null</mx:String>
			<mx:String>Is Not Null</mx:String>
			<mx:String>Is Any</mx:String>
		</mx:ArrayCollection>
	</querymanager:CustomComboBox>
</ConditionEditor>