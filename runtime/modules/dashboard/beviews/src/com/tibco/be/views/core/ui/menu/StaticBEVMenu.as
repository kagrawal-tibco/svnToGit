package com.tibco.be.views.core.ui.menu{
	
	import com.tibco.be.views.core.ui.actions.IActionContextProvider;
	
	import flash.utils.Dictionary;

	/**
	 * StaticSynMenuImpl is a concrete implementation of SynMenu for stand alone mode. 
	 * StaticSynMenuImpl understands the action config XML generated by presentation server 
	 */ 
	public class StaticBEVMenu extends AbstractBEVMenu{
		
		private var _menuConfigXML:XML;
		private var _usePersistentMenu:Boolean;
		
		function StaticBEVMenu(synMenuProviderImpl:BEVMenuProvider, menuConfigXML:XML, actionContextProvider:IActionContextProvider, usePersistentMenu:Boolean=false){
			_usePersistentMenu = usePersistentMenu;
			super(synMenuProviderImpl, menuConfigXML, actionContextProvider);
		}
				
		override protected function createMenu():void{
//			if(_usePersistentMenu){
				_actualMenu = new PersistentMenu();
				configureMenu();
//			}
//			else{
//				super.createMenu();
//			}
		}
		
		override protected function parseMenuDefinitionObj(menuDefinitionObj:*):XML{
			var menuXML:XML = null;
			try{
				_menuConfigXML = menuDefinitionObj as XML;
				_menuIDToMenuConfigLookupDict = new Dictionary();
				menuXML = parseAndPrepMenuConfigXML(_menuConfigXML);
			}
			catch(error:Error){
				trace("StaticBEVMenuImpl.parseMenuDefinitionObj - " + error.message);
			}		 	
			return menuXML;
		}
				
		private function parseAndPrepMenuConfigXML(actioncfg:XML, id:String="1"):XML{
			var i:int = 0;
			var menuXML:XML = null;
			if(actioncfg.text == "ROOT") {
				menuXML = new XML("<root></root>");
			}
			else{
//				id = new String(actioncfg.@name);
//				id += "." + actioncfg.text;
				var xmlStr:String = 
					"<menuitem label=\"" + new String(actioncfg.text) + "\" " + 
						"id=\"" + id + "\" " +
						"enabled=\"" + ((actioncfg.@disabled  == true) ? "false":"true") + "\" " +
						((actioncfg.@iconColor != undefined) ? ("iconColor=\"" + actioncfg.@iconColor + "\" ") : "")  +
					"/>";
				menuXML = new XML(xmlStr);
			}
					 
		 	//check if child actionconfigs are set
		 	if(actioncfg.actionconfig.length() != 0){
		 		for each (var childActionConfig:XML in actioncfg.actionconfig){
		 			var childID:String;
		 			if(String(actioncfg.@id) != ""){
		 				childID = String(actioncfg.@id) + "." + String(childActionConfig.text);
		 			}
		 			else{
		 				childID = id + "." + i;
		 			}
		 			menuXML.appendChild(parseAndPrepMenuConfigXML(childActionConfig, childID));
		 			i++;
		 		}
		 	}
		 	else{
		 		//when no child actionconfigs are set and if this is not root
	 			registerAction(id, actioncfg);
		 	}
		
		 	return menuXML;
		}
		 
	}
}