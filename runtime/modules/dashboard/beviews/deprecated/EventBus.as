package com.tibco.be.views.core.deprecated{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	
	/**
	 * The EventBus class, while not complicated in its implementation, provides an essential  
	 * service to all objects in the BEViews system.  All events dispatched in the system are done 
	 * so via this class.  Thus, by adding specific event listeners to events dispatched by this 
	 * class, objects can effectively subscribe to any type of event generated by the system.
	 * 
	 * This class effectively acts as an event bus, on which system components can listen for events
	 * which they're expecting. Determiniation of whether or not an event picked off the bus is
	 * relevant is up to the individual component.  For example, if an HTTP Response event is put on
	 * the bus, it is up to the objects expecting a HTTP Response event to determine whether it is 
	 * the event they're looking for.  It essentially behaves like an ethernet card checking whether
	 * passing packets are destined for its MAC address.   
	 * 
	 * The class is intended to be used as a singleton via the instance property.
	 */
	public class EventBus extends EventDispatcher{
		
		private static var _instance:EventBus;
		
		/**
		 * EventProxy constructor. Use of this constructor should be avoided.  Instead, use the
		 * instance property to utilize this singleton class.
		 */
		public function EventBus(){
			super();
		}
		
		/**
		 * The instance property provides access to the EventProxy singleton class.
		 */
		public static function get instance():EventBus{
			if(_instance == null) _instance = new EventBus();
			return _instance;
		}
		
		/**
		 * For now, no additional functionality is added when components dispatch events
		 */
		override public function dispatchEvent(event:Event):Boolean{
			return super.dispatchEvent(event);
		}
		
		/**
		 * For now, no additional functionality is added when components subscribe to system events
		 */
		override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
			super.addEventListener(type, listener, useCapture, priority, useWeakReference); 
		}
		
	}
}