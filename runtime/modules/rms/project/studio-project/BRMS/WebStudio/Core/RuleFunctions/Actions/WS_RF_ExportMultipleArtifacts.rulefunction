/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.WS_C_TemporaryReturnData rulefunction WebStudio.Core.RuleFunctions.Actions.WS_RF_ExportMultipleArtifacts {
	attribute {
		validity = ACTION;
	}
	scope {
		Object servletRequest;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String projectName;
		String contentType;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.WS_RF_ExportMultipleArtifacts");

		WS_C_ResponseData responseData = null;
		int responseStatus = 0;
		int recordCount = 0;
		String errorCode = null;
		String responseMessage = null;

		String downloadResponseContentType = "application/zip";

		WS_C_TemporaryReturnData tempReturnData = null;

		if (!WS_RF_CheckHTTPMethod(servletRequest, "POST")) {
			responseStatus = -1;
			recordCount = 0;
			errorCode = "ERR_5101";
			responseMessage = "Invalid HTTP Method, expect method is [POST].";
		} else {
			
			String requestPostParam = System.getGlobalVariableAsString("WebStudio/requestPostParameter", "data");
			String requestData = HTTP.Servlet.Request.getRequestParameter(servletRequest, requestPostParam);
			
			Log.log(LOGGER, "Debug", "Request Post Data Received %s", requestData);
			  
			if (requestData == null) {
				Object requestDataBytes = HTTP.Servlet.Request.getRequestContent(servletRequest);
				requestData = String.convertByteArrayToString(requestDataBytes, "UTF-8");
				requestData = WS.Common.cleanupRequestData(requestData);
			}
			
			//Convert to concept model
			WS_C_multiExportRequest multiExportRequest = null;
			if (String.equals(contentType, System.getGlobalVariableAsString("WebStudio/CONTENT_TYPE/XML", "application/xml"))) {
				multiExportRequest = Instance.createTransientInstanceFromXML("/WebStudio/Core/Concepts/Request/Usecases/multiExport/WS_C_multiExportRequest", requestData);
			} else {
				multiExportRequest = Instance.createTransientInstanceFromJSON("/WebStudio/Core/Concepts/Request/Usecases/multiExport/WS_C_multiExportRequest", requestData);
			}
			
			Log.log(LOGGER, "Debug", "Request concept deserialized %s", multiExportRequest);
			
			WS_C_multiExportRequestData requestContainedData = multiExportRequest.data;

			String artifactPathStringDT = requestContainedData.artifactPathDT;
			
			Log.log(LOGGER, "Debug", "Decision tables to export: %s", artifactPathStringDT);
			
			String artifactPathStringRTI = requestContainedData.artifactPathRTI;
			
			Log.log(LOGGER, "Debug", "Rule template instances to export: %s", artifactPathStringRTI);
			
			WS.Common.initStreams();

			if(artifactPathStringRTI != null){
				String[] artifactPathsRTI = String.split(artifactPathStringRTI, ",");
				WS_RF_ArtifactExportHelper(projectName, "ruletemplateinstance", artifactPathsRTI, loggedInUser);
			}

			if(artifactPathStringDT != null){
				String[] artifactPathsDT = String.split(artifactPathStringDT, ",");
				WS_RF_ArtifactExportHelper(projectName, "rulefunctionimpl", artifactPathsDT, loggedInUser);
			}

		}
		Object responseContentsFinal =  WS.Common.getExportedContentZip();
		int responseContentSizeFinal =  WS.Common.byteArrayLength(responseContentsFinal);
		tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, null, null);
		tempReturnData.contentType = downloadResponseContentType;
		tempReturnData.contentSize = responseContentSizeFinal;
		tempReturnData.contentDisposition = "attachment;filename*=utf-8''" + HTTP.encodeURL(projectName+".zip", "utf-8");
		tempReturnData.serializedData = RMS.Util.encodeBase64(responseContentsFinal);

		if (responseStatus == -1) {
			tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, responseData);
		}

		return tempReturnData;
	}
}