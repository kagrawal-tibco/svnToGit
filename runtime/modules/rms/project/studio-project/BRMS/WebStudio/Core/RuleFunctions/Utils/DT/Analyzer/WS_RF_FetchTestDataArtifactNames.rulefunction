/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.Records.WS_C_ProjectArtifactNamesDataSourceRecord[] rulefunction WebStudio.Core.RuleFunctions.Utils.DT.Analyzer.WS_RF_FetchTestDataArtifactNames {
	attribute {
		validity = ACTION;
	}
	scope {
		String scsRootURL;
		String scsIntegrationType;
		String[] scsCredentials;
		String projectName;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.DT.Analyzer.WS_RF_FetchTestDataArtifactNames");

		String username = loggedInUser.username;
		String[] roles = Instance.PropertyArray.toArrayString(loggedInUser.roles);

		Log.log(LOGGER, "Info", "Get TestData resources");
		String output = WS.SCS.listManagedProjectArtifacts(scsIntegrationType, scsRootURL, projectName, null, scsCredentials[0], scsCredentials[1], "com.tibco.be.ws.scs.impl.filter.TestDataArtifactFilter", null);
		Log.log(LOGGER, "Debug", "XML output %s", output);
		String artifactType, artifactPath, artifactFileExtn, artifactImageSrc;
		
		String stackID = username + "@TESTDATA_ARTIFACT_NAMES_" + System.nanoTime();
		Object testDataArtifactNamesStack = WS.Common.Stack.create(stackID);
		WS.Common.Stack.clear(testDataArtifactNamesStack);
		// make sure output is not empty
		if (output != null && !String.equals(output, "")) {
			//Convert to concept model
			WS_C_SCSProjectContents scsProjectContents = Instance.createTransientInstanceFromXML("/WebStudio/Core/Concepts/Common/WS_C_SCSProjectContents", output);
			WS_C_ProjectArtifacts projectArtifacts = scsProjectContents.projectArtifacts;
			if(projectArtifacts != null) {
				WS_C_Artifact[] artifacts = Instance.PropertyArray.toArrayContainedConcept(projectArtifacts.artifact);
				Log.log(LOGGER, "Debug", "Project Artifact Size - %s", artifacts@length);

				if (roles != null) {
					for (int i = 0; i < artifacts@length; i++) {
						artifactType = artifacts[i].artifactType;
						artifactPath = artifacts[i].artifactPath;
						artifactFileExtn = artifactType;
						artifactImageSrc = Util.HashMap.get("ARTIFACT_TYPE_IMAGES", artifactType);
						if (artifactImageSrc == null) artifactImageSrc = "file.png";

						WS_C_ProjectArtifactNamesDataSourceRecord projectArtifactDataSourceRecord = 
								Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/Records/WS_C_ProjectArtifactNamesDataSourceRecord");
						projectArtifactDataSourceRecord.artifactPath = artifactPath;
						projectArtifactDataSourceRecord.artifactType = artifactType;
						projectArtifactDataSourceRecord.fileExtension = artifactFileExtn;
						String testDataFile = artifactPath + "." + artifactFileExtn;
						projectArtifactDataSourceRecord.baseArtifactPath = WS.Decision.TableAnalyzer.getTestDataEntity(scsRootURL, projectName, testDataFile);
						projectArtifactDataSourceRecord.imageSrc = artifactImageSrc;
						projectArtifactDataSourceRecord.no = (i+1) + "";
						WS.Common.Stack.push(testDataArtifactNamesStack, projectArtifactDataSourceRecord);

						Log.log(LOGGER, "Debug", "Artifact Details -> [Path:%s] [Type:%s] [Extension:%s] [ImageSrc:%s]", artifactPath, artifactType, artifactFileExtn, artifactImageSrc);
					}
				}
			}
		}
		
		WS_C_ProjectArtifactNamesDataSourceRecord[] projectArtifactDataSourceRecords = 
			WS.Common.Stack.toArray(testDataArtifactNamesStack, "be.gen.WebStudio.Core.Concepts.DataSources.Records.WS_C_ProjectArtifactNamesDataSourceRecord", "com.tibco.cep.runtime.service.loader.BEClassLoader");
		WS.Common.Stack.delete(stackID);
		return projectArtifactDataSourceRecords; 										
	}
}