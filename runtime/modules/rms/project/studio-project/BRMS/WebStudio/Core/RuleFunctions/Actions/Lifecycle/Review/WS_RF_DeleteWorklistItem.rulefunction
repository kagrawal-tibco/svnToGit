/**
 * @description
 * @author moshaikh
 */
WebStudio.Core.Concepts.DataSources.WS_C_TemporaryReturnData rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.Review.WS_RF_DeleteWorklistItem {
	attribute {
		validity = ACTION;
	}
	scope {
		Object asyncContextObject;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String contentType;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Review.WS_RF_DeleteWorklistItem");
		
		Object servletRequest = HTTP.Servlet.getServletRequest(asyncContextObject);
		
		int responseStatus = 0;
		int recordCount = 0;
		String errorCode = null;
		String responseMessage = null;
		
		WS_C_TemporaryReturnData tempReturnData = null;
		
		if (!WS_RF_CheckHTTPMethod(servletRequest, "DELETE")) {
			responseStatus = -1;
			recordCount = 0;
			errorCode = "ERR_5101";
			responseMessage = "Invalid HTTP Method, expect method is [DELETE].";
			
			tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, null);
		} else {
			Object requestDataBytes = HTTP.Servlet.Request.getRequestContent(servletRequest);
			String requestData = String.convertByteArrayToString(requestDataBytes, "UTF-8");
			Log.log(LOGGER, "Debug", "Request Post Data Received %s", requestData);
			
			//Convert to concept model
			WS_C_WorklistDeleteRequest worklistDeleteBaseRequest = null;
			if (String.equals(contentType, System.getGlobalVariableAsString("WebStudio/CONTENT_TYPE/XML", "application/xml"))) {
				worklistDeleteBaseRequest = Instance.createTransientInstanceFromXML("/WebStudio/Core/Concepts/Request/Usecases/Lifecycle/Review/Deletion/WS_C_WorklistDeleteRequest", requestData);
			} else {
				worklistDeleteBaseRequest = Instance.createTransientInstanceFromJSON("/WebStudio/Core/Concepts/Request/Usecases/Lifecycle/Review/Deletion/WS_C_WorklistDeleteRequest", requestData);
			}
		
			Log.log(LOGGER, "Debug", "Request concept deserialized %s", worklistDeleteBaseRequest);
			
			String[] roles = Instance.PropertyArray.toArrayString(loggedInUser.roles);
			String currentUserRole = WS.Common.joinStringArray(roles, "");
			Log.log(LOGGER, "Debug", "Current User role %s", currentUserRole);
			
			WS_C_WorklistDeleteItem worklistDeleteItem = worklistDeleteBaseRequest.data.worklist;
			
			WS_C_WorklistDeleteRevisionIds worklistDeleteRevisionId = worklistDeleteItem.revisions;
			String worklistRevisions = WS.Common.joinStringArray(Instance.PropertyArray.toArrayString(worklistDeleteRevisionId.revisionId), ",");
			Log.log(LOGGER, "Debug", "Revisions to delete - %s", worklistRevisions);
			
			String asyncContextId = WS.Common.generateUUID();
			String mapLockKey = "WORKLIST_DELETE_ASYNC_CONTEXT_MAP_" + System.nanoTime();
			//Concurrent Rete case. Lock locally
			boolean mapLocked = Cluster.DataGrid.Lock(mapLockKey, -1, true);
			if (mapLocked) {
				Util.HashMap.createMap(mapLockKey);
				Util.HashMap.putObject(mapLockKey, asyncContextId, asyncContextObject);
			}
			
			WS_E_WorklistDeletionEvent worklistDeleteEvent = Event.createEvent("xslt://{{/WebStudio/Core/Events/Lifecycle/WS_E_WorklistDeletionEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\" exclude-result-prefixes=\"xsl xsd\"><xsl:output method=\"xml\"/><xsl:param name=\"asyncContextId\"/><xsl:param name=\"mapLockKey\"/><xsl:param name=\"loggedInUser\"/><xsl:param name=\"contentType\"/><xsl:param name=\"currentUserRole\"/><xsl:param name=\"worklistRevisions\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><revisionIds><xsl:value-of select=\"$worklistRevisions\"/></revisionIds><userRole><xsl:value-of select=\"$currentUserRole\"/></userRole><asyncContextId><xsl:value-of select=\"$asyncContextId\"/></asyncContextId><mapLockKey><xsl:value-of select=\"$mapLockKey\"/></mapLockKey><contentType><xsl:value-of select=\"$contentType\"/></contentType><xsl:if test=\"$loggedInUser/username\"><userName><xsl:value-of select=\"$loggedInUser/username\"/></userName></xsl:if></event></createEvent></xsl:template></xsl:stylesheet>");
			Event.assertEvent(worklistDeleteEvent);
		}
		return tempReturnData;
	}
}