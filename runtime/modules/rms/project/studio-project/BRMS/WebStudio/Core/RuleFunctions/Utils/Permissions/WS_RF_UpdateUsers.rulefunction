/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.WS_C_TemporaryReturnData rulefunction WebStudio.Core.RuleFunctions.Utils.Permissions.WS_RF_UpdateUsers {
	attribute {
		validity = ACTION;
	}
	scope {
		Object asyncContextObject;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String contentType;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.Permissions.WS_RF_UpdateUsers");
		
		Object servletRequest = HTTP.Servlet.getServletRequest(asyncContextObject);
		
		int responseStatus = 0;
		int recordCount = 0;
		String errorCode = null;
		String responseMessage = null;
		
		boolean isAdmin = WS_RF_IsAdminRole(loggedInUser);
		
		WS_C_TemporaryReturnData tempReturnData = null;
		
		if (!WS_RF_CheckHTTPMethod(servletRequest, "PUT")) {
			responseStatus = -1;
			recordCount = 0;
			errorCode = "ERR_5101";
			responseMessage = "Invalid HTTP Method, expect method is [PUT].";
			
			tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, null);
			
		} else if (isAdmin) {
			String requestPostParam = System.getGlobalVariableAsString("WebStudio/requestPostParameter", "data");
			String requestData = HTTP.Servlet.Request.getRequestParameter(servletRequest, requestPostParam);
			  
			if (requestData == null) {
				Object requestDataBytes = HTTP.Servlet.Request.getRequestContent(servletRequest);
				requestData = String.convertByteArrayToString(requestDataBytes, "UTF-8");
				requestData = WS.Common.cleanupRequestData(requestData);
			}
			
			WebStudio.Core.Concepts.Request.Usecases.ACLSettings.User.WS_C_ACLSetting_User_BaseRequest aclSettingBaseRequest = null;
			if (String.equals(contentType, System.getGlobalVariableAsString("WebStudio/CONTENT_TYPE/XML", "application/xml"))) {
			    aclSettingBaseRequest = Instance.createTransientInstanceFromXML("/WebStudio/Core/Concepts/Request/Usecases/ACLSettings/User/WS_C_ACLSetting_User_BaseRequest", requestData);
			} else {
				aclSettingBaseRequest = Instance.createTransientInstanceFromJSON("/WebStudio/Core/Concepts/Request/Usecases/ACLSettings/User/WS_C_ACLSetting_User_BaseRequest", requestData);
			}
			
			WebStudio.Core.Concepts.Request.Usecases.ACLSettings.User.WS_C_ACLSetting_User_RequestData requestContainedData1 = aclSettingBaseRequest.data;
			WebStudio.Core.Concepts.Request.Usecases.ACLSettings.User.WS_C_UsersDataItem userDataItem = requestContainedData1.aclSettings.aclSettingsItem;
			String authType = System.getSystemPropertyAsString("be.auth.type", "file");
			
			if (authType == "file") {		
				WS_C_UserData userData = userDataItem.authEntries;
				WebStudio.Core.RuleFunctions.Utils.Permissions.WS_RF_SaveUserData(loggedInUser.username, userData);
				responseMessage = "Users updated successfully";
				tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, null);
			} else {
				responseStatus = -1;
				recordCount = 0;
				responseMessage = "Updating users is not valid action for ldap based authentication";
				
				tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, null);
			}
		} else {
			responseStatus = -1;
			responseMessage = "User do not have this permission";
			
			tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, null);
		}
		
		return tempReturnData;
	}
}