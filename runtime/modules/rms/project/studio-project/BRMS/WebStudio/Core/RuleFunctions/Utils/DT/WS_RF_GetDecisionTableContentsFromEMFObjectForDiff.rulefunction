/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.Artifacts.Decision.WS_C_DecisionTablePageDetails rulefunction WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_GetDecisionTableContentsFromEMFObjectForDiff {
	attribute {
		validity = ACTION;
	}
	scope {
		String projectName;
		String artifactPath;
		Object decisionTableObject;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_GetDecisionTableDiffVersionContentsFromEMFObject");
		
		WebStudio.Core.Concepts.DataSources.Artifacts.Decision.WS_C_DecisionTablePageDetails decisionTableArtifactDetails = 
													Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/Artifacts/Decision/WS_C_DecisionTablePageDetails");
		decisionTableArtifactDetails.projectName = projectName;
		decisionTableArtifactDetails.artifactPath = artifactPath;
		decisionTableArtifactDetails.tableName = WS.Decision.TableModel.getName(decisionTableObject);
		decisionTableArtifactDetails.folderPath = WS.Decision.TableModel.getFolder(decisionTableObject);
		decisionTableArtifactDetails.implementsPath = WS.Decision.TableModel.getImplementsPath(decisionTableObject);
		
		//Metadata
		WS_C_TableMetadata metadata = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TableMetadata"); 
		Object[] metadataPropsObject = WS.Decision.TableModel.MetaData.getProperties(decisionTableObject);
		for (int i = 0; i < metadataPropsObject@length; i++) {
			WS_C_MetadataProperty property = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_MetadataProperty");
			property.name = WS.Decision.TableModel.MetaData.getPropertyName(metadataPropsObject[i]);
			property.type = WS.Decision.TableModel.MetaData.getPropertyType(metadataPropsObject[i]);
			property.value = WS.Decision.TableModel.MetaData.getPropertyValue(metadataPropsObject[i]);
	 		Instance.PropertyArray.appendContainedConcept(metadata.property, property, 1L);
		}
		Instance.PropertyAtom.setConceptReference(decisionTableArtifactDetails.metadata, metadata, 1L);

		//Arguments
		WS_C_DecisionTableArguments arguments = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_DecisionTableArguments");
		Object[] argumentObjects = WS.Decision.TableModel.getArguments(decisionTableObject);
		for (int i = 0; i < argumentObjects@length; i++) {
			WS_C_DecisionTableArgument argument = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_DecisionTableArgument");
			argument.argumentAlias = WS.Decision.TableModel.Arguments.getAlias(argumentObjects[i]);
			argument.direction = WS.Decision.TableModel.Arguments.getDirection(argumentObjects[i]);
			argument.path = WS.Decision.TableModel.Arguments.getPath(argumentObjects[i]);
			argument.resourceType = WS.Decision.TableModel.Arguments.getResourceType(argumentObjects[i]);
			argument.isArray = WS.Decision.TableModel.Arguments.isArray(argumentObjects[i]);
	 		Instance.PropertyArray.appendContainedConcept(arguments.argument, argument, 1L);
		}
		Instance.PropertyAtom.setConceptReference(decisionTableArtifactDetails.arguments, arguments, 1L);

		//Decision table details
		decisionTableArtifactDetails.decisionTableSinglePageView = false;
		decisionTableArtifactDetails.decisionTableTotalPages = 1;
		//Table Columns
		Object[] decisionTableColumnObjects = WS.Decision.TableModel.getDecisionTableColumns(decisionTableObject);
		WS_C_TableColumns decisionTableColumns = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TableColumns");
		for (int i = 0; i < decisionTableColumnObjects@length; i++) {
			WS_C_TableColumn tableColumn = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TableColumn");
			tableColumn.columnId = 	WS.Decision.TableModel.Columns.getID(decisionTableColumnObjects[i]);
			tableColumn.name = WS.Decision.TableModel.Columns.getName(decisionTableColumnObjects[i]);
			tableColumn.columnAlias = WS.Decision.TableModel.Columns.getAlias(decisionTableColumnObjects[i]);
			tableColumn.columnType = WS.Decision.TableModel.Columns.getColumnType(decisionTableColumnObjects[i]);
			
			tableColumn.property = WS.Decision.TableModel.Columns.getPropertyPath(decisionTableColumnObjects[i]);
			tableColumn.propertyType = WS.Decision.TableModel.Columns.getPropertyType(decisionTableColumnObjects[i]);
			tableColumn.isArrayProperty = WS.Decision.TableModel.Columns.isArrayProperty(decisionTableColumnObjects[i]);
			tableColumn.isSubstitution = WS.Decision.TableModel.Columns.isSubstitution(decisionTableColumnObjects[i]);									
			Instance.PropertyArray.appendContainedConcept(decisionTableColumns.column, tableColumn, 1L);
		}		
		decisionTableArtifactDetails.decisionTableColumns = decisionTableColumns;		
		//Table Rules in single page						
		Object[] decisionTableRuleObjects = WS.Decision.TableModel.getDecisionTableRules(decisionTableObject);
		WS_C_TablePage singleDTTablePage = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TablePage");
		for (int index = 0; index < decisionTableRuleObjects@length; index++) {
			WebStudio.Core.Concepts.Decision.Pagination.WS_C_TableRule tableRule = WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_CreateTableRuleInstanceFromEMFObject(decisionTableRuleObjects[index], true);
			Instance.PropertyArray.appendContainedConcept(singleDTTablePage.tableRule, tableRule, 1L);							
		} 								
		decisionTableArtifactDetails.decisionTablePage = singleDTTablePage;

		//Exception table details
		decisionTableArtifactDetails.exceptionTableTotalPages = 1;		
		//Table Columns
		Object[] exceptionTableColumnObjects = WS.Decision.TableModel.getExceptionTableColumns(decisionTableObject);
		WS_C_TableColumns exceptionTableColumns = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TableColumns");
		for (int i = 0; i < exceptionTableColumnObjects@length; i++) {
			WS_C_TableColumn tableColumn = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TableColumn");
			tableColumn.columnId = 	WS.Decision.TableModel.Columns.getID(exceptionTableColumnObjects[i]);
			tableColumn.name = WS.Decision.TableModel.Columns.getName(exceptionTableColumnObjects[i]);
			tableColumn.columnAlias = WS.Decision.TableModel.Columns.getAlias(exceptionTableColumnObjects[i]);
			tableColumn.columnType = WS.Decision.TableModel.Columns.getColumnType(exceptionTableColumnObjects[i]);
			
			tableColumn.property = WS.Decision.TableModel.Columns.getPropertyPath(exceptionTableColumnObjects[i]);
			tableColumn.propertyType = WS.Decision.TableModel.Columns.getPropertyType(exceptionTableColumnObjects[i]);
			tableColumn.isArrayProperty = WS.Decision.TableModel.Columns.isArrayProperty(exceptionTableColumnObjects[i]);
			tableColumn.isSubstitution = WS.Decision.TableModel.Columns.isSubstitution(exceptionTableColumnObjects[i]);									
			Instance.PropertyArray.appendContainedConcept(exceptionTableColumns.column, tableColumn, 1L);
		}		
		decisionTableArtifactDetails.exceptionTableColumns = exceptionTableColumns;		
		//Table Rules in a single page
		Object[] exceptionTableRuleObjects = WS.Decision.TableModel.getExceptionTableRules(decisionTableObject);
		WS_C_TablePage singleETTablePage = Instance.newTransientInstance("/WebStudio/Core/Concepts/Decision/Pagination/WS_C_TablePage");
		for (int index = 0; index < exceptionTableRuleObjects@length; index++) {
			WebStudio.Core.Concepts.Decision.Pagination.WS_C_TableRule tableRule = WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_CreateTableRuleInstance(exceptionTableRuleObjects[index]);
			Instance.PropertyArray.appendContainedConcept(singleETTablePage.tableRule, tableRule, 1L);	
		}
		decisionTableArtifactDetails.exceptionTablePage = singleETTablePage;
		
		return decisionTableArtifactDetails;		
	}
}