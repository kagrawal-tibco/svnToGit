/**
 * @description Export Decision Table (from user's local workspace) to Excel 
 */
Object rulefunction WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_ExportDecisionTableToExcel {
	attribute {
		validity = ACTION;
	}
	scope {
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String scsRootURL;
		String projectName;
		String artifactPath;
		String artifactExtn;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_ExportDecisionTableToExcel");
		
		String pathSeparator = "/";		
		Object responseContent = null;
		//Username and roles
		String username = loggedInUser.username;
		String[] roles = Instance.PropertyArray.toArrayString(loggedInUser.roles);
		
		String subscriptionId = null;
		if (loggedInUser.jwtToken != null) subscriptionId = loggedInUser.jwtToken.sbsc;
		
		//Get DT contents										
		WS_C_ResponseTransferObjectData fetchedResponseData = WS_RF_GetArtifactContentsFromStore(username, roles, projectName, artifactPath, artifactExtn);			
		WS_C_DecisionTable dtContents = fetchedResponseData.artifactContents;
		Instance.PropertyAtom.setConceptReference(fetchedResponseData.artifactContents, null, 1L);

		if (fetchedResponseData.errorCode == null) {
			Object reusableBuffer = String.createBuffer(0);
			String sharedLocation = System.getSystemPropertyAsString("ws.artifact.deploy.location", null);					
			String.createBuffer(0);
			String.append(reusableBuffer, sharedLocation);
			String.append(reusableBuffer, pathSeparator);
			if (subscriptionId != null && !String.equals(subscriptionId, "")) {
				String.append(reusableBuffer, subscriptionId);
				String.append(reusableBuffer, pathSeparator);
			}
			String.append(reusableBuffer, projectName);
			String.append(reusableBuffer, pathSeparator);
			String.append(reusableBuffer, projectName);
			String.append(reusableBuffer, ".ear");						
			String earPath = String.convertBufferToString(reusableBuffer);
			String.clearBuffer(reusableBuffer);				
			try {
				Object tableEModel = WS_RF_CreateEMFObjectForDecisionTable(dtContents);
				responseContent = WS.Decision.exportDecisionTableToExcel(scsRootURL, projectName, earPath, tableEModel);
			} catch (Exception e) {
				Log.logException(LOGGER, "Error", "Error exporting decision table [%s] to excel", e, artifactPath);
			}						
		}
		
		return responseContent;			
	}
}