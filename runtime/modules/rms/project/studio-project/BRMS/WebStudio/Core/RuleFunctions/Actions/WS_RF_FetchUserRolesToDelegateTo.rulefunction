/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.WS_C_TemporaryReturnData rulefunction WebStudio.Core.RuleFunctions.Actions.WS_RF_FetchUserRolesToDelegateTo {
	attribute {
		validity = ACTION;
	}
	scope {
		Object servletRequest;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.WS_RF_FetchUserRolesToDelegateTo");
		
		WS_C_ResponseData responseData = null;
		int responseStatus = 0;
		int recordCount = 0;
		String errorCode = null;
		String responseMessage = null;
		
		if (!WS_RF_CheckHTTPMethod(servletRequest, "GET")) {
			responseStatus = -1;
			recordCount = 0;
			errorCode = "ERR_5101";
			responseMessage = "Invalid HTTP Method, expect method is [GET].";
			
		} else {
			String subscriptionId = null;
			if (loggedInUser.jwtToken != null) subscriptionId = loggedInUser.jwtToken.sbsc;
			String[] userRoles = RMS.Authorization.getAllRoles(subscriptionId);
			
			responseData = Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/WS_C_ResponseData");
			
			WS_C_AbstractDataSourceRecord delegatableUserRoleDataSourceRecord = null;
			WS_C_DelegatableUserRoleDataSourceRecord delegatableUserRoleDSRecord = null;
			for (int i=0; i < userRoles@length; i++) {
				if (Instance.PropertyArray.indexOfString(loggedInUser.roles, userRoles[i]) == -1) {
					delegatableUserRoleDataSourceRecord = Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/Records/WS_C_DelegatableUserRoleDataSourceRecord");
					
					delegatableUserRoleDSRecord = delegatableUserRoleDataSourceRecord;
					delegatableUserRoleDSRecord.role = userRoles[i];
					Instance.PropertyArray.appendContainedConcept(responseData.record, delegatableUserRoleDataSourceRecord, 1L);
					
					Log.log(LOGGER, "Debug", "Adding role [%s] to the delegation list", userRoles[i]);
					
					recordCount++;
				}
			}
		}
		
		return WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, responseData);
	}
}