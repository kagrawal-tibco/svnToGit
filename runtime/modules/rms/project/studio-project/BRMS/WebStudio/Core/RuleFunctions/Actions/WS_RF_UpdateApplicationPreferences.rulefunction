/**
 * @description 
 */
WebStudio.Core.Concepts.DataSources.WS_C_TemporaryReturnData rulefunction WebStudio.Core.RuleFunctions.Actions.WS_RF_UpdateApplicationPreferences {
	attribute {
		validity = ACTION;
	}
	scope {
		Object asyncContextObject;
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String contentType;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.WS_RF_UpadateApplicationPreferences");
		
		Object servletRequest = HTTP.Servlet.getServletRequest(asyncContextObject);
		
		WS_C_ResponseData responseData = null;
		int responseStatus = 0;
		int recordCount = 0;
		String errorCode = null;
		String responseMessage = null;
		
		WS_C_TemporaryReturnData tempReturnData = null;
		
		if (!WS_RF_CheckHTTPMethod(servletRequest, "PUT")) {
			responseStatus = -1;
			recordCount = 0;
			errorCode = "ERR_5101";
			responseMessage = "Invalid HTTP Method, expect method is [PUT].";
			
			tempReturnData = WS_RF_CreateTemporaryReturnData(responseStatus, recordCount, errorCode, responseMessage, responseData);
		} else {
			Object requestDataBytes = HTTP.Servlet.Request.getRequestContent(servletRequest);
			String requestData = String.convertByteArrayToString(requestDataBytes, "UTF-8");
			Log.log(LOGGER, "Debug", "Request Post Data Received %s", requestData);
			
			//Convert to concept model
			WS_C_AppPreferenceBaseRequest appPreferenceBaseRequest = null;
			if (String.equals(contentType, System.getGlobalVariableAsString("WebStudio/CONTENT_TYPE/XML", "application/xml"))) {
				appPreferenceBaseRequest = Instance.createTransientInstanceFromXML("/WebStudio/Core/Concepts/Request/Usecases/UpdatePreferences/WS_C_AppPreferenceBaseRequest", requestData);
			} else {
				appPreferenceBaseRequest = Instance.createTransientInstanceFromJSON("/WebStudio/Core/Concepts/Request/Usecases/UpdatePreferences/WS_C_AppPreferenceBaseRequest", requestData);
			}
		
			Log.log(LOGGER, "Debug", "Request concept deserialized %s", appPreferenceBaseRequest);
			
			WS_C_AppPreferenceRequestData requestContainedData = appPreferenceBaseRequest.data;
			WS_C_AppPreferenceDataItem appPreferenceDataItem = requestContainedData.applicationPreference.applicationPreferenceItem;
			
			String appPreferenceItem = Instance.serialize(appPreferenceDataItem, false, "","applicationPreferenceItem");
			Log.log(LOGGER, "Debug", "Serialized data format - %s", appPreferenceItem);
			
			String asyncContextId = WS.Common.generateUUID();
			String mapLockKey = "APP_PREFERENCE_UPDATE_ASYNC_CONTEXT_MAP_" + System.nanoTime();
			//	Concurrent Rete case. Lock locally
			boolean mapLocked = Cluster.DataGrid.Lock(mapLockKey, -1, true);
			if (mapLocked) { 
				Util.HashMap.createMap(mapLockKey);
				Util.HashMap.putObject(mapLockKey, asyncContextId, asyncContextObject);
			}
		
			WS_E_UpdateApplicationPreferenceEvent updateAppPreferenceEvent =
				 WebStudio.Core.Events.WS_E_UpdateApplicationPreferenceEvent.WS_E_UpdateApplicationPreferenceEvent(null, appPreferenceItem, asyncContextId, mapLockKey, contentType, loggedInUser.username); 
			
			Event.assertEvent(updateAppPreferenceEvent);
			
		} 
		return tempReturnData;
	}
}