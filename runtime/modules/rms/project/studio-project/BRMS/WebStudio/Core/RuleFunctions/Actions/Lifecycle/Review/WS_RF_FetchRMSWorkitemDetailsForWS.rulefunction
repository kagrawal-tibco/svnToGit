/**
 * @description Fetch workitems details of RMS workitem in WS.
 */
void rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.Review.WS_RF_FetchRMSWorkitemDetailsForWS {
	attribute {
		validity = ACTION;
	}
	scope {
		String requiredUserRevisionId;
		Approval.Concepts.ArtifactsConcepts.AMS_C_Checkin referencedCheckin;
		WebStudio.Core.Concepts.DataSources.WS_C_ResponseData responseData;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Review.WS_RF_FetchRMSWorkitemDetailsForWS");
		
		if (referencedCheckin != null) {
			String[] artifactPaths = Instance.PropertyArray.toArrayString(referencedCheckin.artifactPaths);
			String patternId = referencedCheckin.patternId;
			Log.log(LOGGER, "Debug", "Using pattern id %s for checkin %s", patternId, referencedCheckin);
			
			WS_C_AbstractDataSourceRecord abstractDataSourceRecord = 
					Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/Records/WS_C_ReviewTaskDetailEntryDataSourceRecord");
			WS_C_ReviewTaskDetailEntryDataSourceRecord taskDetailEntryDataSourceRecord = abstractDataSourceRecord;	
			taskDetailEntryDataSourceRecord.revisionId = requiredUserRevisionId;
			
			for (int loop = 0, length = artifactPaths@length; loop < length; loop++) {
				String artifactPath = artifactPaths[loop];
				String committedArtifactExtId = String.concat(String.concat(patternId, "@"), artifactPath);
				
		    		//Load concept with this extid after locking
		    		if (Cluster.DataGrid.Lock(committedArtifactExtId, -1, false)) {
		        		AMS_C_ArtifactCommited committed = Instance.getByExtIdByUri(committedArtifactExtId, "/Approval/Concepts/ArtifactsConcepts/AMS_C_ArtifactCommited");
		        		
		        		if (committed != null) {
		        			String commitOperation = committed.operation;
		        			Log.log(LOGGER, "Debug", "Commit Operation for artifact [%s] is [%s]", artifactPath, commitOperation);
		        			taskDetailEntryDataSourceRecord.commitOperation = commitOperation;
		        			taskDetailEntryDataSourceRecord.reviewComments = referencedCheckin.checkinComments;
		        			
	        				//Get applicable stages
						AMS_C_ApplicableStages allApplicableStages = Instance.getByExtIdByUri(committed.applicableStagesConceptId, "/Approval/Concepts/ArtifactsConcepts/AMS_C_ApplicableStages");
						Object stagesCumulativeBuffer = String.createBuffer(0);
						
						if (allApplicableStages != null) {
							AMS_C_WorkflowStage[] workflowStages = Instance.PropertyArray.toArrayConcept(allApplicableStages.stages);
							for (int stageLoop = 0; stageLoop < workflowStages@length; stageLoop++) {
								AMS_C_WorkflowStage workflowStage = workflowStages[stageLoop];
								String stageName = workflowStage.name;
								Log.log(LOGGER, "Debug", "Workflow stage applicable [%s]", stageName);
								String.append(stagesCumulativeBuffer, stageName);
								if (stageLoop != workflowStages@length - 1) {
									String.append(stagesCumulativeBuffer, ",");
								}
							}
						}
						taskDetailEntryDataSourceRecord.applicableStages = String.convertBufferToString(stagesCumulativeBuffer);
						String.clearBuffer(stagesCumulativeBuffer);
						
						// fetch the applicable deploy environments
						String applicableEnviroments = System.getSystemPropertyAsString(referencedCheckin.projectName +".ws.deployEnviroments", null);
						Log.log(LOGGER, "Debug", "Applicable Environments[%s] to deploy for project[%s]", applicableEnviroments, referencedCheckin.projectName);
						if (applicableEnviroments != null) {
							taskDetailEntryDataSourceRecord.applicableEnvironments = applicableEnviroments;
						}
						
						String currentCommitStatus = committed.status;
						Log.log(LOGGER, "Current Commit status for artifact [%s] is [%s]", artifactPath, currentCommitStatus);
						taskDetailEntryDataSourceRecord.reviewStatus = currentCommitStatus;
						
						taskDetailEntryDataSourceRecord.artifactPath = artifactPath;
						taskDetailEntryDataSourceRecord.artifactType = committed.artifactType;
						String artifactImageSrc = Util.HashMap.get("ARTIFACT_TYPE_IMAGES", committed.artifactType);
						taskDetailEntryDataSourceRecord.artifactImageName = artifactImageSrc;
						taskDetailEntryDataSourceRecord.artifactFileExtn = committed.artifactFileExtension;
						
						Instance.PropertyArray.appendContainedConcept(responseData.record, abstractDataSourceRecord, 1L);
		        		}
		    		}
			}
		}
	}
}