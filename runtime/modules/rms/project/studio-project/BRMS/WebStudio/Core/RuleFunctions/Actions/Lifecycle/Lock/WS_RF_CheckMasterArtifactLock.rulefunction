/**
 * @description Check if an artifact is Locked
 */
WebStudio.Core.Concepts.Lifecycle.Lock.WS_C_CheckArtifactLockResponse rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.Lock.WS_RF_CheckMasterArtifactLock {
	attribute {
		validity = ACTION;
	}
	scope {
		String projectName;
		String artifactPath;
		String username;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Lock.WS_RF_CheckMasterArtifactLock");
		
		Log.log(LOGGER, "Debug", "Request to check lock on artifact %s for user %s in project %s.", artifactPath, username, projectName);
		
		WS_C_CheckArtifactLockResponse checkArtifactLockResponse  = Instance.newTransientInstance("/WebStudio/Core/Concepts/Lifecycle/Lock/WS_C_CheckArtifactLockResponse");
		
		checkArtifactLockResponse.projectName = projectName;		
		checkArtifactLockResponse.artifactPath = artifactPath;
		checkArtifactLockResponse.requestor = username;
		
		boolean lockingEnabled = System.getSystemPropertyAsBoolean("ws.scs.locking.enable", false);
		checkArtifactLockResponse.lockingEnabled = lockingEnabled;
		
		String subscriptionId = WS_RF_GetSubscriptionId(username);
		
		if (checkArtifactLockResponse.lockingEnabled) {
			String masterArtifactExtId = WS_RF_CreateUserArtifactExtId(null, artifactPath, projectName, null, subscriptionId, null);
			String masterArtifactLockExtId = WS_RF_CreateUserArtifactExtId("LOCK", null, null, null, null, masterArtifactExtId);
			Log.log(LOGGER, "Debug", "Artifact Lock concept extId %s.", masterArtifactLockExtId); 
			WS_C_MasterArtifactLock artifactLock = null;
			boolean locked = Cluster.DataGrid.Lock(masterArtifactLockExtId, -1, false);
			if (locked) {						
				artifactLock = Cluster.DataGrid.CacheLoadConceptByExtIdByUri(masterArtifactLockExtId, false, "/WebStudio/Core/Concepts/Lifecycle/WS_C_MasterArtifactLock");
				if (artifactLock != null) {
					if (artifactLock.locked) {
						if (WS_RF_IsArtifactLockTimedout(artifactLock)) { //Lock has timedout, so release
							checkArtifactLockResponse.holdsLock = false;
							checkArtifactLockResponse.lockOwner = null;
							//update lock event to release lock
							WS_E_UpdateMasterArtrifactLockEvent updateLockEvent = Event.createEvent("xslt://{{/WebStudio/Core/Events/Lifecycle/WS_E_UpdateMasterArtrifactLockEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"2.0\" exclude-result-prefixes=\"xsl xsd\"><xsl:output method=\"xml\"/><xsl:param name=\"masterArtifactLockExtId\"/><xsl:param name=\"artifactLock\"/><xsl:param name=\"projectName\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><masterArtifactLockExtId><xsl:value-of select=\"$masterArtifactLockExtId\"/></masterArtifactLockExtId><acquireLock><xsl:value-of select=\"false()\"/></acquireLock><xsl:if test=\"$artifactLock/lockedBy\"><lockRequestForUser><xsl:value-of select=\"$artifactLock/lockedBy\"/></lockRequestForUser></xsl:if><managedProjectName><xsl:value-of select=\"$projectName\"/></managedProjectName></event></createEvent></xsl:template></xsl:stylesheet>");
							Event.assertEvent(updateLockEvent);
							Log.log(LOGGER, "Info", "The lock held on artifact %s by user %s has timedout, releasing the lock.", artifactPath, artifactLock.lockedBy);												
						} 
						else if (String.equals(username, artifactLock.lockedBy)) { //Lock has not timed-out & current user holds the lock
							checkArtifactLockResponse.holdsLock = true;
							checkArtifactLockResponse.lockOwner = artifactLock.lockedBy;
							Log.log(LOGGER, "Debug", "The user %s holds a lock on artifact %s.", username, artifactPath);
						} else { //Lock has not timed-out but current user DOESNOT hold the lock
							checkArtifactLockResponse.holdsLock = false;
							checkArtifactLockResponse.lockOwner = artifactLock.lockedBy;
							Log.log(LOGGER, "Debug", "User %s doesn't hold a lock on the artifact %s, lock is held by user %s.", username, artifactPath, artifactLock.lockedBy);					
						}			
					} else { //No lock by any user
						checkArtifactLockResponse.holdsLock = false;
						checkArtifactLockResponse.lockOwner = null;
						Log.log(LOGGER, "Debug", "No lock on Artifact %s", artifactPath);					
					}	
				} else { //No lock by any user				
					checkArtifactLockResponse.holdsLock = false;
					checkArtifactLockResponse.lockOwner = null;
					Log.log(LOGGER, "Debug", "No lock on Artifact %s", artifactPath);
				}									
			}
		} else { //Locking is disabled
			checkArtifactLockResponse.holdsLock = false;
			checkArtifactLockResponse.lockOwner = null;
			Log.log(LOGGER, "Debug", "Locking is not enabled. No lock on Artifact %s.", artifactPath);			
		}			
		return checkArtifactLockResponse;				
	}
}