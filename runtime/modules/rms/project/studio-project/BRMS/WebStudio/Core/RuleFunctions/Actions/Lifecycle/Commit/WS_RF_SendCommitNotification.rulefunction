/**
 * @description Send State change Notification
 */
void rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.Commit.WS_RF_SendCommitNotification {
	attribute {
		validity = ACTION;
	}
	scope {
		WebStudio.Security.Authn.Concepts.WS_C_LoggedInUser loggedInUser;
		String committedRevisionMapId;
		Object servletRequest;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Commit.WS_RF_SendCommitNotification");

		//Is notification enabled
		boolean notifyEnabled = System.getSystemPropertyAsBoolean("ws.notify.enabled", false);
		if (!notifyEnabled) {
			Log.log(LOGGER, "Debug", "Email Notification is Disabled.");
			return;	
		}	
				
		String username = loggedInUser.username;		
		String[] revisionIds = Util.HashMap.getMapKeys(committedRevisionMapId);
		Object currDatetime = DateTime.now();
		String currTimeStamp = DateTime.format(currDatetime, "HH:mm:ss:SSS");
		Log.log(LOGGER, "Debug", "Email Notification for Revisions %s", revisionIds);
		//For each revision
		for (int loop = 0; loop < revisionIds@length; loop++) {
			WS_C_CommittableDeltaEntry[] applicableCommitables = Util.HashMap.getObject(committedRevisionMapId, revisionIds[loop]); 						
			if (applicableCommitables@length > 0) {				
				WS_C_UserCheckin userCheckin = Instance.getByExtIdByUri(applicableCommitables[0].parentCheckinId, "/WebStudio/Core/Concepts/Lifecycle/WS_C_UserCheckin");
				
				//check for project level and if commit allow for project
				String subscriptionId = WS_RF_GetSubscriptionId(loggedInUser.username);
				String notficationPreferencesExtId = WS_RF_CreateUserArtifactExtId("NOTIFY_PREFERENCES", null, null, null, subscriptionId, null);
		        WS_C_NotificationPreferences notificationPreferences = Cluster.DataGrid.CacheLoadConceptByExtIdByUri(notficationPreferencesExtId, false, "/WebStudio/Core/Concepts/WS_C_NotificationPreferences");
		        boolean hasEntry = true;
		        if (notificationPreferences!=null) {
			        String actionList;
			        for(int count = 0; count < notificationPreferences.emailPreference@length; count++) {
					WS_C_AbstractEmailPreference emailpreference = notificationPreferences.emailPreference[count];
					if (emailpreference.project == userCheckin.managedProjectName) {
						actionList = emailpreference.actions;
						if (!String.contains(actionList,"commit")) {
							hasEntry = false;
						}
						break;
					   }
			        }
		        }
		        if (hasEntry) {								
					//Create the context properties map
					Object reusableBuffer = String.createBuffer(0);		
					String.append(reusableBuffer, "NOTIFY_CONTEXT_PROPS@");	
					String.append(reusableBuffer, username);
					String.append(reusableBuffer, "@");
					String.append(reusableBuffer, revisionIds[loop]);
					String.append(reusableBuffer, "@");
					String.append(reusableBuffer, currTimeStamp);
					String notifyContextPropsMapId =  String.convertBufferToString(reusableBuffer);		
					String.clearBuffer(reusableBuffer);		
					Util.HashMap.createMap(notifyContextPropsMapId);						
					//Set the receivers in the notify context
					String userId = WebStudio.Core.RuleFunctions.Utils.Lifecycle.WS_RF_GetUserNotificationId(username);
					Util.HashMap.put(notifyContextPropsMapId, "RECEIVER_EMAIL", userId);
					String receiverCCEmails = WebStudio.Core.RuleFunctions.Utils.Lifecycle.WS_RF_GetNotificationCCEmails(username,userCheckin.managedProjectName);
					Util.HashMap.put(notifyContextPropsMapId, "RECEIVER_CC_EMAILS", receiverCCEmails);				
					//Create a stack to hold list of created Maps Ids	
					String.append(reusableBuffer, "CREATED_MAP_IDS@");	
					String.append(reusableBuffer, username);
					String.append(reusableBuffer, "@");
					String.append(reusableBuffer, revisionIds[loop]);
					String.append(reusableBuffer, "@");
					String.append(reusableBuffer, currTimeStamp);
					String createdMapIdsMap_Id =  String.convertBufferToString(reusableBuffer);		
					String.clearBuffer(reusableBuffer);		
					Util.HashMap.createMap(createdMapIdsMap_Id);
					//Bind the variables
					String messageDataMapId = WS_RF_BindStateChangeNotificationMessageVariables(username, revisionIds[loop], currTimeStamp, userCheckin, applicableCommitables, servletRequest, createdMapIdsMap_Id);				
					Log.log(LOGGER, "Debug", "Email Notification for Revision [%s] - Committer [%s]", revisionIds[loop], username);
				
					//Generate the Notification	event		
					WS_E_SendNotificationEvent sendNotificationEvent = Event.createEvent("xslt://{{/WebStudio/Core/Events/Lifecycle/WS_E_SendNotificationEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\" exclude-result-prefixes=\"xsl xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"notifyContextPropsMapId\"/>\n    <xsl:param name=\"messageDataMapId\"/>\n    <xsl:param name=\"createdMapIdsMap_Id\"/>\n    <xsl:template match=\"/\">\n        <createEvent>\n            <event>\n                <notifyType>\n                    <xsl:value-of select=\"&quot;commit&quot;\"/>\n                </notifyType>\n                <notifyContextPropsMapId>\n                    <xsl:value-of select=\"$notifyContextPropsMapId\"/>\n                </notifyContextPropsMapId>\n                <notifyMessageDataMapId>\n                    <xsl:value-of select=\"$messageDataMapId\"/>\n                </notifyMessageDataMapId>\n                <createdMapIdsMapId>\n                    <xsl:value-of select=\"$createdMapIdsMap_Id\"/>\n                </createdMapIdsMapId>\n            </event>\n        </createEvent>\n    </xsl:template>\n</xsl:stylesheet>");
					Event.assertEvent(sendNotificationEvent);
					Log.log(LOGGER, "Debug", "Send Notification Event for Revision [%s] asserted", revisionIds[loop]);							 								
				}
			}												
		}
	}
}