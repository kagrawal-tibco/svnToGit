/**
 * @description Show difference between Base Copy and user's Working Copy of the artifact.
 */
WebStudio.Core.Concepts.DataSources.Records.WS_C_ArtifactVersionDiffContentDataSourceRecord rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.History.WS_RF_GetUserArtifactDiff {
	attribute {
		validity = ACTION;
	}
	scope {
		String artifactPath;
		String artifactExtn;
		String projectName;
		String username;
		boolean returnUnchangedContents;//When true: Returns the 2 versions even if they have same contents (i.e same contentId)
										//false: Returns only if contents differ.
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Review.WS_RF_GetUserArtifactDiff");
		
		WS_C_UserArtifactRevision currentArtifactRevision = null;
		WS_C_UserArtifact parentArtifact = WS_RF_IsUserArtifact(WS_RF_CreateUserArtifactExtId(null, artifactPath, projectName, username, null, null), artifactExtn);
		if (parentArtifact != null && parentArtifact.artifactRevisionIds@length > 0) {
			currentArtifactRevision = Instance.getByExtIdByUri(parentArtifact.artifactRevisionIds[parentArtifact.artifactRevisionIds@length-1], "/WebStudio/Core/Concepts/WS_C_UserArtifactRevision");
		}
		WS_C_UserArtifactRevision previousArtifactRevision = null;
		
		if (parentArtifact != null && parentArtifact.artifactRevisionIds@length > 0) {
			for (int i = parentArtifact.artifactRevisionIds@length - 1; i >= 0; i--) {
				WS_C_UserArtifactRevision userArtifact = Instance.getByExtIdByUri(parentArtifact.artifactRevisionIds[i], "/WebStudio/Core/Concepts/WS_C_UserArtifactRevision");
				if (userArtifact != null && (String.equals("Approve", userArtifact.lifecycleMetadata.currentState.stateName) || i == 0)) {
					previousArtifactRevision = userArtifact;
					break;
				}
			}
		}
		
		if (currentArtifactRevision != null && previousArtifactRevision != null && (returnUnchangedContents || currentArtifactRevision.artifactContentsId != previousArtifactRevision.artifactContentsId)) {
			Log.log(LOGGER, "Info", "Previous Revision found id[%s] & extId[%s]", previousArtifactRevision@id, previousArtifactRevision@extId);
			
			WS_C_AnyArtifactDetails currentArtifactContentsConcept = WS_RF_GetArtifactContentInstance(currentArtifactRevision.artifactContentsId, currentArtifactRevision.parentArtifactType);
			WS_C_AnyArtifactDetails previousArtifactContentsConcept = WS_RF_GetArtifactContentInstance(previousArtifactRevision.artifactContentsId, previousArtifactRevision.parentArtifactType);
						
			WS_C_ArtifactVersionDiffContentDataSourceRecord artifactVersionDiffContentDSR = Instance.newTransientInstance("/WebStudio/Core/Concepts/DataSources/Records/WS_C_ArtifactVersionDiffContentDataSourceRecord");
			artifactVersionDiffContentDSR.artifactPath = artifactPath;
			artifactVersionDiffContentDSR.artifactType = artifactExtn;
			
			String currentVersionContents, previousVersionContents;
			if (String.equals(artifactExtn, "ruletemplate") || String.equals(artifactExtn, "ruletemplateinstance")) {
				Log.log(LOGGER, "Info", "Artifact Type Rule Template Instance, Extn[%s]", artifactExtn); 
				
				artifactVersionDiffContentDSR.currentVersionContents = currentArtifactContentsConcept;
				artifactVersionDiffContentDSR.previousVersionContents = previousArtifactContentsConcept;
								
			} else if (String.equals(artifactExtn, "rulefunction") || String.equals(artifactExtn, "rulefunctionimpl")) {
				Log.log(LOGGER, "Info", "Artifact Type Decision Table, Extn[%s]", artifactExtn); 
				
				currentArtifactContentsConcept = WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_GetDecisionTableContentsForDiff(projectName, artifactPath, currentArtifactContentsConcept);
				artifactVersionDiffContentDSR.currentVersionContents = currentArtifactContentsConcept;
				
				previousArtifactContentsConcept = WebStudio.Core.RuleFunctions.Utils.DT.WS_RF_GetDecisionTableContentsForDiff(projectName, artifactPath, previousArtifactContentsConcept);
				artifactVersionDiffContentDSR.previousVersionContents = previousArtifactContentsConcept;
			}
						
			return artifactVersionDiffContentDSR;
		}
		return null;
	}
}