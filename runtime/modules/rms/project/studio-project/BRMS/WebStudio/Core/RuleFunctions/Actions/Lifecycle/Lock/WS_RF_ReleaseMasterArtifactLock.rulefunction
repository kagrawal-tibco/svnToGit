/**
 * @description Release lock if any on a artifact
 */
WebStudio.Core.Concepts.Lifecycle.Lock.WS_C_ReleaseArtifactLockResponse rulefunction WebStudio.Core.RuleFunctions.Actions.Lifecycle.Lock.WS_RF_ReleaseMasterArtifactLock {
	attribute {
		validity = ACTION;
	}
	scope {
		String projectName;
		String artifactPath;
		String artifactType;
		String fileExtension;
		boolean isAutoUnlock;
		String unlockRequestor;
		boolean unlockForcibly;		
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Actions.Lifecycle.Lock.WS_RF_ReleaseMasterArtifactLock");
		
		if (isAutoUnlock)
			Log.log(LOGGER, "Debug", "Request to auto release lock on artifact %s in project %s.", artifactPath, projectName);
		else if (unlockForcibly)
			Log.log(LOGGER, "Debug", "Request by User %s to forcibly release lock on artifact %s in project %s.", unlockRequestor, artifactPath, projectName);
		else 
			Log.log(LOGGER, "Debug", "Request by User %s to release lock on artifact %s in project %s.", unlockRequestor, artifactPath, projectName);
					
		WS_C_ReleaseArtifactLockResponse artifactLockResponse  = Instance.newTransientInstance("/WebStudio/Core/Concepts/Lifecycle/Lock/WS_C_ReleaseArtifactLockResponse");
		artifactLockResponse.projectName = projectName;
		artifactLockResponse.artifactPath = artifactPath;
		artifactLockResponse.requestor = unlockRequestor;
		artifactLockResponse.fileExtension = fileExtension;
		artifactLockResponse.artifactType = artifactType;

		boolean lockingEnabled = System.getSystemPropertyAsBoolean("ws.scs.locking.enable", false);
		artifactLockResponse.lockingEnabled = lockingEnabled;
		
		String subscriptionId = WS_RF_GetSubscriptionId(unlockRequestor);
		
		if (artifactLockResponse.lockingEnabled) {		
			String masterArtifactExtId = WS_RF_CreateUserArtifactExtId(null, artifactPath, projectName, null, subscriptionId, null);
			String masterArtifactLockExtId = WS_RF_CreateUserArtifactExtId("LOCK", null, null, null, null, masterArtifactExtId);
			WS_C_MasterArtifactLock artifactLock = null;
			boolean locked = Cluster.DataGrid.Lock(masterArtifactLockExtId, -1, false);
			if (locked) {						
				artifactLock = Cluster.DataGrid.CacheLoadConceptByExtIdByUri(masterArtifactLockExtId, false, "/WebStudio/Core/Concepts/Lifecycle/WS_C_MasterArtifactLock");
				if (artifactLock != null) {
					if (artifactLock.locked) {
						if (isAutoUnlock || unlockForcibly || String.equals(unlockRequestor, artifactLock.lockedBy)) {
							artifactLockResponse.lockReleased = true;
							artifactLockResponse.lockOwner = artifactLock.lockedBy;
							WS_E_UpdateMasterArtrifactLockEvent updateLockEvent = Event.createEvent("xslt://{{/WebStudio/Core/Events/Lifecycle/WS_E_UpdateMasterArtrifactLockEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"2.0\" exclude-result-prefixes=\"xsl xsd\"><xsl:output method=\"xml\"/><xsl:param name=\"masterArtifactLockExtId\"/><xsl:param name=\"unlockRequestor\"/><xsl:param name=\"projectName\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><masterArtifactLockExtId><xsl:value-of select=\"$masterArtifactLockExtId\"/></masterArtifactLockExtId><acquireLock><xsl:value-of select=\"false()\"/></acquireLock><lockRequestForUser><xsl:value-of select=\"$unlockRequestor\"/></lockRequestForUser><managedProjectName><xsl:value-of select=\"$projectName\"/></managedProjectName></event></createEvent></xsl:template></xsl:stylesheet>");
							Event.assertEvent(updateLockEvent);
							Log.log(LOGGER, "Debug", "The artifact %s unlocked successfully.", artifactPath);
						} else {
							artifactLockResponse.lockReleased = false;
							artifactLockResponse.lockOwner = artifactLock.lockedBy;
							Log.log(LOGGER, "Debug", "User %s doesn't hold a lock on the artifact %s.", unlockRequestor, artifactPath);					
						}			
					} else {
						artifactLockResponse.lockReleased = false;
						artifactLockResponse.lockOwner = null;
						Log.log(LOGGER, "Debug", "No lock on Artifact %s", artifactPath);					
					}	
				} else { 				
					artifactLockResponse.lockReleased = false;
					artifactLockResponse.lockOwner = null;
					Log.log(LOGGER, "Error", "No lock on Artifact %s", artifactPath);
				}
			} 
		} else {
			artifactLockResponse.lockReleased = false;
			artifactLockResponse.lockOwner = null;
			Log.log(LOGGER, "Debug", "Locking is not enabled. No lock on Artifact %s.", artifactPath);							
		}						
		
		return artifactLockResponse;		
	}
}