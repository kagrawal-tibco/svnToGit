/**
 * @description Create a builder concept with all sub concepts and such.
 */
WebStudio.Core.Concepts.RuleTemplateInstance.Builder.WS_C_RuleTemplateInstanceBuilder rulefunction WebStudio.Core.RuleFunctions.Utils.RT.Builder.Ops.Fetch.WS_RF_CreateRuleTemplateBuilderConceptFromSCSFactory {
	attribute {
		validity = ACTION;
	}
	scope {
		String projectName;
		String username;
		String scsIntegrationType;
		String scsRootURL;
		String artifactPath;
		//To distinguish between RT and RTI impls.
		String artifactExtn;
		Object ruleTemplateObject;
		String[] roles;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.RT.Builder.Ops.Fetch.WS_RF_CreateRuleTemplateBuilderConceptFromSCSFactory");
		
		if (String.equals(artifactExtn, "ruletemplate")) {
			Log.log(LOGGER, "Info", "Requested fetch for ruletemplate builder");
			return WS_RF_CreateRuleTemplateBuilderConceptFromSCS(projectName, username, scsIntegrationType, scsRootURL, artifactPath, ruleTemplateObject, roles);
		} else if (String.equals(artifactExtn, "ruletemplateinstance")) {
			Log.log(LOGGER, "Info", "Requested fetch for ruletemplateinstance builder");
			return WS_RF_CreateRuleTemplateInstanceBuilderConceptFromSCS(projectName, username, scsIntegrationType, scsRootURL, artifactPath, ruleTemplateObject, roles);
		}
		return null;
	}
}