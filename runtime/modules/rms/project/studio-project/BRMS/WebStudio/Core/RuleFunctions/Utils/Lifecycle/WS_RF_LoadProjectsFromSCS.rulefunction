/**
 * @description 
 */
WebStudio.Core.Concepts.WS_C_ManagedProjects rulefunction WebStudio.Core.RuleFunctions.Utils.Lifecycle.WS_RF_LoadProjectsFromSCS {
	attribute {
		validity = ACTION;
	}
	scope {
		String loggedInUser;
		boolean addNewProjects;
		String subscriptionId;
	}
	body {
		Object LOGGER = Log.getLogger("WebStudio.Core.RuleFunctions.Utils.Lifecycle.WS_RF_LoadProjectsFromSCS");
		
		String managedProjectsExtId = WS_RF_CreateUserArtifactExtId("MANAGED_PROJECTS", null, null, null, subscriptionId, null);
			
		boolean firstCreation = false;
		WS_C_ManagedProjects managedProjects = Instance.getByExtIdByUri(managedProjectsExtId, "/WebStudio/Core/Concepts/WS_C_ManagedProjects");
		if (managedProjects == null) {
			Log.log(LOGGER, "Debug", "No instance for served projects present...Creating one");
			//This should be one across all WS-Server instances.
			//Create it so it will be cached.
			boolean locked = Cluster.DataGrid.Lock(managedProjectsExtId, -1, false);
			if (locked) {
				managedProjects = WebStudio.
									Core.
										Concepts.
											WS_C_ManagedProjects.
												WS_C_ManagedProjects(managedProjectsExtId, null);
				firstCreation = true;
			}
		}
		
		// Add new projects only during first creation or when trying to checkout, else return existing projects only
		if (firstCreation || addNewProjects) {
			String aclFileLocation = System.getSystemPropertyAsString("ws.projects.acl.location", null);
			
			Object outputMap = WS_RF_GetProjectListPayload(loggedInUser, subscriptionId);
			
			if (outputMap != null) {
				Object iterator = Collections.iterator(Collections.Map.entrySet(outputMap));
				while (Collections.Iterator.hasNext(iterator)) {
					Object entry = Collections.Iterator.next(iterator);
					String output = Collections.Map.Entry.getValue(entry);
					String scsUrl = Collections.Map.Entry.getKey(entry);
					
					String pathsXpath = "count($var//entry[@kind='dir'])";
					double numberOfProjects = Number.doubleValue(XPath.execute(pathsXpath, output, ""));
					Log.log(LOGGER, "Debug", "Number of managed projects %s", numberOfProjects);
		
				    for (int i = 0; i < numberOfProjects; i = i + 1) {
					    	int loop = i + 1;
					    	String projectName = XPath.execute("$var//entry[@kind='dir'][" + loop + "]/path/text()", output, "");
					    	
					    	boolean projectExists = false;
					    	WS_C_ProjectEntry[] projects = Instance.PropertyArray.toArrayContainedConcept(managedProjects.managedProjectNames);
					    	for (int j=0; j<projects@length; j++) {
					    		if (String.equals(projectName, projects[j].name)) {
					    			projectExists = true;
					    			break;
					    		}
					    	}
					    
					    Log.log(LOGGER, "Debug", "Project [%s] exists in the managed project list [%s]", projectName, projectExists);
					    
					    	if (!projectExists) {
					    		String aclFilePath = aclFileLocation;
					    		if (subscriptionId != null) aclFilePath += ("/" + subscriptionId);
					    		aclFilePath +=  ("/" + projectName + ".ac");
					    		Log.log(LOGGER, "Debug", "ACL file path[%s] for project [%s]", aclFilePath, projectName);
					    		if (File.fileExists(aclFilePath)) {
								try {
									RMS.Authorization.validateACLConfig(projectName, aclFilePath, subscriptionId);
									String projectEntryExtId = WS_RF_CreateUserArtifactExtId("PROJECT_ENTRY", null, projectName, null, subscriptionId, null);
									boolean locked = Cluster.DataGrid.Lock(projectEntryExtId, -1, false);
									if (locked) {
										WS_C_ProjectEntry newProject = Instance.createInstance("xslt://{{/WebStudio/Core/Concepts/WS_C_ProjectEntry}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\"><xsl:param name=\"projectName\"/><xsl:param name=\"scsUrl\"/><xsl:param name=\"projectEntryExtId\"/><xsl:template name=\"Function\" match=\"/\"><createObject><object><xsl:attribute name=\"extId\"><xsl:value-of select=\"$projectEntryExtId\"/></xsl:attribute><name><xsl:value-of select=\"$projectName\"/></name><scsUrl><xsl:value-of select=\"$scsUrl\"/></scsUrl></object></createObject></xsl:template></xsl:stylesheet>");
										Instance.PropertyArray.appendContainedConcept(managedProjects.managedProjectNames, newProject, 1);
					    					Log.log(LOGGER, "Debug", "Added Project [%s] from Url[%s]", projectName, scsUrl);
									}
								} catch (Exception exception) {
									Log.logException(LOGGER, "ERROR", "Error validating Access Control Config file - %s", exception, aclFilePath);
								}									
							} else {
								Log.log(LOGGER, "Warn", "Couldn't find the Access Control Config file for Project[%s] at location[%s]", projectName, aclFilePath);
							}
					    	}
				    }
				}
				// finally clear the map
				Collections.Map.deleteMap("ProjectListOutputMap");
			}
		}
	    
		return managedProjects;
	}
}