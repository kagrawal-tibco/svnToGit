/**
 * @description Read config file containing role and its allowable artifact types.
 */
void rulefunction Approval.Rules.RuleFunctions.ArtifactRuleFunctions.Startup.AMS_RF_ReadRoleArtifactTypesConfig {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
		Object LOGGER = Log.getLogger("Approval.Rules.RuleFunctions.ArtifactRuleFunctions.Startup.AMS_RF_ReadRoleArtifactTypesConfig");
		Object encoding = "UTF-8";
		String pathSeparator = "/";
		String baseProjectDir = System.getSystemPropertyAsString("rms.projects.baselocation", null);
		//Read the RoleApplicableArtifactTypesConfig.xml file
		String filePath = 
			System.getSystemPropertyAsString("rms.roleArtifactTypes.config.file", 
			                                  baseProjectDir + pathSeparator + "RoleApplicableArtifactTypesConfig.xml");
		Log.log(LOGGER, "Info", "Reading Role Artifacts Type Config File From - %s ", filePath);
		
		if (File.fileExists(filePath)) {
			
			String fileContents = File.readFileAsString(filePath, encoding);
			
			String prefixes = "tns=www.tibco.com/be/rms/RoleApplicableArtifactTypes";	
			
			//Check for all roles
			String allRolesCountXPath = "count($var//tns:Role)";
			//Get number of role entries
			String roleEntriesString = 
				XPath.execute(allRolesCountXPath, fileContents, prefixes);
			
			double countRoles = Number.doubleValue(roleEntriesString);
			
			//XPath indexes start from 1
			for (int loop = 1; loop <= countRoles; loop++) {
				//Get each role chunk xml
				String roleXPath = "$var//tns:Role[" + loop + "]";
				
				String roleXML = XPath.execute(roleXPath, fileContents, prefixes);
				
				if (roleXML != null) {
					//Get name
					String roleNameXPath = "string($var//attribute::tns:name)";
					//Execute on chunked XML
					String roleName = XPath.execute(roleNameXPath, roleXML, prefixes);
					Log.log(LOGGER, "Debug", "Role name obtained in AMS_RF_ReadRoleArtifactTypesConfig - %s", roleName);
					//Check if it already exists
					//This is cache-only. Lock and load it first.
					boolean roleLock = Cluster.DataGrid.Lock(roleName, -1, false);
					if (roleLock) {
						AMS_C_Role role = Instance.getByExtIdByUri(roleName, "/AAA/Concepts/AMS_C_Role");
						
						if (role == null) {
							role = Instance.createInstance("xslt://{{/AAA/Concepts/AMS_C_Role}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\" exclude-result-prefixes=\"xsd\">\n    <xsl:output method=\"xml\"/>\n    <xsl:param name=\"roleName\"/>\n    <xsl:template match=\"/\">\n        <createObject>\n            <object>\n                <xsl:attribute name=\"extId\">\n                    <xsl:value-of select=\"$roleName\"/>\n                </xsl:attribute>\n                <name>\n                    <xsl:value-of select=\"$roleName\"/>\n                </name>\n            </object>\n        </createObject>\n    </xsl:template>\n</xsl:stylesheet>");
						}
						//Clear any previous information for allowedArtifacts
						Instance.PropertyArray.clear(role.allowedArtifactTypes);
						
						//Read <ArtifactType> elements
						String artifactTypesCountXPath = "count($var//tns:ArtifactType)";
						String artifactTypesCountString = 
							XPath.execute(artifactTypesCountXPath, roleXML, prefixes);
				
						double countArtifactTypes = Number.doubleValue(artifactTypesCountString);
						
						for (int innerLoop = 1; innerLoop <= countArtifactTypes; innerLoop++) {
							String artifactTypesXpath = "$var//tns:ArtifactType[" + innerLoop + "]/text()";
							String artifactType = XPath.execute(artifactTypesXpath, roleXML, prefixes);
							Log.log(LOGGER, "Debug", "Artifact Type Obtained %s", artifactType);
							if (artifactType != null) {
								Instance.PropertyArray.appendString(role.allowedArtifactTypes, artifactType, 1L);
							}
						}
						//Release role lock
						Cluster.DataGrid.UnLock(roleName, false);
					}
				}
			}
		} else {
			Exception fileNotFoundException = 
				Exception.newException("FILE_MISSING", "Configuration file for role and its allowable artifact types not found", null);
			throw fileNotFoundException;
		}		                                  
	}
}