/**
 * @description Retrieve contents of a particular revision from the scratch area.
 */
void rulefunction Approval.Rules.RuleFunctions.ArtifactRuleFunctions.AMS_RF_RetrieveRevisionCopyContents {
	attribute {
		validity = ACTION;
	}
	scope {
		//Transient instance only
		Approval.Concepts.ArtifactsConcepts.AMS_C_ArtifactCommited committedArtifact;
	}
	body {
//		String projectName = committedArtifact.projectName;
//		String pathSeparator = 
//			Approval.Scorecards.AMS_SC_BasePathsScoreCard.pathSeparator;
//		
//		String baseProjectDir = 
//			Approval.Scorecards.AMS_SC_BasePathsScoreCard.baseProjectDir;
//		
//		String workspaceDir = 
//			Approval.Scorecards.AMS_SC_BasePathsScoreCard.workspaceDirName;	
//		
//		Object workspaceDirBuffer = String.createBuffer(0);
//		
//		long revisionId = committedArtifact.revisionId;
//		
//		String[] joinStrings = {baseProjectDir,
//		                        pathSeparator,
//		                        projectName,
//		                        pathSeparator,
//		                        workspaceDir,
//		                        pathSeparator,
//		                        "" + revisionId};
//		
//		workspaceDirBuffer = Approval.CommonServices.AMS_RF_JoinStringsToBuffer(joinStrings, workspaceDirBuffer);
//					                        
//		String revisionIdAbsolutePath = String.convertBufferToString(workspaceDirBuffer);
//		//Check if it exists	
//		boolean dirExists = File.fileExists(revisionIdAbsolutePath);
//		//Call the read function
//		String revisionCopyContents = 
//			Approval.
//				Rules.
//					RuleFunctions.
//						ArtifactRuleFunctions.
//							AMS_RF_ReadArtifactContents(projectName, 
//							                            revisionIdAbsolutePath, 
//							                            committedArtifact.artifactPath, 
//							                            committedArtifact.artifactFileExtension);
//		committedArtifact.artifactContent = revisionCopyContents;						                            		
	}
}