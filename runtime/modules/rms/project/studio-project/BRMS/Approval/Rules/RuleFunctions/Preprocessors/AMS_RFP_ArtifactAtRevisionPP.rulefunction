/**
 * Execute this preprocessor when artifact at certain revision should be retrieved.
 * @description 
 */
void rulefunction Approval.Rules.RuleFunctions.Preprocessors.AMS_RFP_ArtifactAtRevisionPP {
	attribute {
		validity = ACTION;
	}
	scope {
		Approval.Events.ArtifactEvents.History.AMS_E_ArtifactContentsAtRevisionRequestEvent ams_e_artifactcontentsatrevisionrequestevent;
	}
	body {
		boolean isUserLoggedIn = 
			Approval.CommonServices.AMS_RF_ValidateUsername(ams_e_artifactcontentsatrevisionrequestevent) != null;
		
		if (!isUserLoggedIn) {
			AMS_E_ErrorEvent errorEvent = 
				Approval.CommonServices.AMS_RF_CreateErrorEvent("HISTORY_FETCH_ERROR", "The user " + ams_e_artifactcontentsatrevisionrequestevent.loggedInUserName + " is not logged in", null);
			Event.replyEvent(ams_e_artifactcontentsatrevisionrequestevent, errorEvent);
			//Consume the event so that RTC is not triggered
			Event.consumeEvent(ams_e_artifactcontentsatrevisionrequestevent);
			throw Exception.newException("ARTIFACT_REVISION_FETCH_ERROR", 
										 "The user " + ams_e_artifactcontentsatrevisionrequestevent.loggedInUserName + " is not logged in", null);	
		}
	}
}