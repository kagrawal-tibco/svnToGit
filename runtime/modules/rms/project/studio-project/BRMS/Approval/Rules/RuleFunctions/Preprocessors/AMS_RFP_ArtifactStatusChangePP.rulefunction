/**
 * @description Preprocessor for status change request.
 */
void rulefunction Approval.Rules.RuleFunctions.Preprocessors.AMS_RFP_ArtifactStatusChangePP {
	attribute {
		validity = ACTION;
	}
	scope {
		Approval.Events.ArtifactEvents.StatusChange.AMS_E_ArtifactStatusChangeRequestEvent ams_e_artifactstatuschangerequestevent;
	}
	body {
		boolean isUserLoggedIn = 
			Approval.CommonServices.AMS_RF_ValidateUsername(ams_e_artifactstatuschangerequestevent) != null;
		
		if (!isUserLoggedIn) {
			AMS_E_ErrorEvent errorEvent = 
				Approval.CommonServices.AMS_RF_CreateErrorEvent("STATUS_CHANGE_ERROR", "The user " + ams_e_artifactstatuschangerequestevent.loggedInUserName + " is not logged in", null);
			Event.replyEvent(ams_e_artifactstatuschangerequestevent, errorEvent);
			//Consume the event so that RTC is not triggered
			Event.consumeEvent(ams_e_artifactstatuschangerequestevent);
			throw Exception.newException("STATUS_CHANGE_ERROR", 
										 "The user " + ams_e_artifactstatuschangerequestevent.loggedInUserName + " is not logged in", null);	
		}
		
		String payload = ams_e_artifactstatuschangerequestevent@payload;
		if (payload == null) {
			AMS_E_ErrorEvent errorEvent = 
				Approval.CommonServices.AMS_RF_CreateErrorEvent("STATUS_CHANGE_ERROR", "Null payload", null);
			Event.replyEvent(ams_e_artifactstatuschangerequestevent, errorEvent);
			//Consume the event so that RTC is not triggered
			Event.consumeEvent(ams_e_artifactstatuschangerequestevent);
			throw Exception.newException("STATUS_CHANGE_ERROR", 
										 "Null payload", null);
		}
	}
}