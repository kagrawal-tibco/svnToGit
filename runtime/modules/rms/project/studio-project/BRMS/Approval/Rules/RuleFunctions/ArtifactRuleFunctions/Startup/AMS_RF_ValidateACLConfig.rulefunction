/**
 * @description Validate ACL config file for each managed project
 */
void rulefunction Approval.Rules.RuleFunctions.ArtifactRuleFunctions.Startup.AMS_RF_ValidateACLConfig {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
		Object LOGGER = Log.getLogger("Approval.Rules.RuleFunctions.ArtifactRuleFunctions.Startup.AMS_RF_ValidateACLConfig");
		
		String scsIntegrationType = System.getSystemPropertyAsString("ws.scs.impl.type", null);
		
		// Load non file SCS command path
		if (!String.equals(scsIntegrationType, "file")) {
			String scsCommandPath = System.getSystemPropertyAsString("ws.scs.command.path", null);
			if (scsCommandPath != null && !String.equals(scsCommandPath, "")) {
				WS.SCS.setSCSCommandPath(scsIntegrationType, null, scsCommandPath);
			}
		}
	    
	    String aclFileLocation = System.getSystemPropertyAsString("ws.projects.acl.location", null);
		
		Object outputMap = WS_RF_GetProjectListPayload(null, null);
	    
		if (outputMap != null) {
		    Object iterator = Collections.iterator(Collections.Map.entrySet(outputMap));
			while (Collections.Iterator.hasNext(iterator)) {
				Object entry = Collections.Iterator.next(iterator);
				String output = Collections.Map.Entry.getValue(entry);
				
				String pathsXpath = "count($var//entry[@kind='dir'])";
				double numberOfProjects = Number.doubleValue(XPath.execute(pathsXpath, output, ""));
				Log.log(LOGGER, "Debug", "Number of managed projects for url[%s] - %s", Collections.Map.Entry.getKey(entry), numberOfProjects);
				
			    for (int i = 0; i < numberOfProjects; i = i + 1) {
					int loop = i + 1;
					String project = XPath.execute("$var//entry[@kind='dir'][" + loop + "]/path/text()", output, "");									
					String aclFilePath = aclFileLocation + "/" + project + ".ac";
					Log.log(LOGGER, "Debug", "ACL config file for project %s - %s", project, aclFilePath);
					
					if (File.fileExists(aclFilePath)) {
						try {
							RMS.Authorization.validateACLConfig(project, aclFilePath, null);
						} catch (Exception exception) {
							Log.logException(LOGGER, "ERROR", "Error validating Access Control Config file - %s", exception, aclFilePath);
						}									
					} else {
						Log.log(LOGGER, "Warn", "Couldn't find the Access Control Config file for Project - %s", project);
					}					
			    }
			}
			
			// finally clear the map
			Collections.Map.deleteMap("ProjectListOutputMap");
		} else {
			Log.log(LOGGER, "Warn", "Output Map for project list is null !!");
		}
	}
}