package com.tibco.cep.query.model.impl;


import java.util.Iterator;

import org.antlr.runtime.tree.CommonTree;

import com.tibco.cep.kernel.service.logging.Level;
import com.tibco.cep.query.exception.DuplicateAliasException;
import com.tibco.cep.query.model.AliasedIdentifier;
import com.tibco.cep.query.model.ModelContext;
import com.tibco.cep.query.model.QueryModel;
import com.tibco.cep.query.model.Stream;
import com.tibco.cep.query.model.resolution.ResolutionHelper;
import com.tibco.cep.query.model.visitor.HierarchicalContextVisitor;
import com.tibco.cep.query.model.visitor.impl.ContextResolutionVisitor;

/**
 * Created by IntelliJ IDEA. User: nprade Date: Oct 24, 2007 Time: 2:56:50 PM To
 * change this template use File | Settings | File Templates.
 */
public class AliasedIdentifierImpl extends IdentifierImpl implements AliasedIdentifier {
    private String alias;

    private boolean isPseudoAliased;

    private Stream stream;

    public AliasedIdentifierImpl(ModelContext parentContext, CommonTree tree, String name,
                                 String alias, boolean isPseudoAlias) throws Exception {
        super(parentContext, tree, name);
        this.setAlias(alias, isPseudoAlias);
    }


    /**
     * visitor pattern accept Resolve the left expression
     *
     * @param v
     * @return boolean
     */
    public boolean accept(HierarchicalContextVisitor v) throws Exception {
        if (v instanceof ContextResolutionVisitor) {
            Stream stream = null;

            // Resolves all children except the stream def.
            for (Iterator it = this.getChildrenIterator(); it.hasNext(); ) {
                final ModelContext childCtx = (ModelContext) it.next();
                if (childCtx instanceof Stream) {
                    stream = (Stream) childCtx;
                } else {
                    childCtx.accept(v);
                }
            }

            // Resolves this.
            v.visit(this);

            // Finally, resolves the streamDef since it can use the AliasedIdentifier itself.
            if (null != stream) {
                stream.accept(v);
            }

            return false;
        }
        else {
            return super.accept(v);
        }
    }


    /**
     * @return the Alias
     */
    public String getAlias() {
        return this.alias;
    }

    /**
     * @return if the alias is a pseudo alias
     */
    public boolean isPseudoAliased() {
        return this.isPseudoAliased;
    }

    public boolean resolveContext() throws Exception {
        setIdentifiedContext(ResolutionHelper.resolveIdentifier(this));
        this.logger.log(Level.DEBUG, "%s AliasIdentifier: %s = %s",
                (this.isResolved() ? "Resolved" : "Did NOT resolve"), this.getAlias(), this.getName());
        return super.isResolved();
    }

    /**
     * sets the alias and if it is generated by the system
     * 
     * @param alias
     */
    public void setAlias(String alias, boolean isPseudoAliased) throws DuplicateAliasException {
        final Object previousModelContext = ((QueryModel) this.getRootContext())
                .getModelContextByAlias(alias);
        if ((null != previousModelContext) && (this != previousModelContext)) {
            throw new DuplicateAliasException(this);
        }

        if (null != this.alias) {
            this.getContextMap().remove(this.alias); // old alias
        }
        if (null != alias) {
            this.getContextMap().put(alias, this); // new alias
        }
        this.alias = alias;
        this.isPseudoAliased = isPseudoAliased;
    }

    public String toString() {
        return "{" + this.alias + "=" + this.getName() + "}";
    }

    public Stream getStream() {
        return stream;
    }

    public void setStream(Stream stream) {
        this.stream = stream;
    }


    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AliasedIdentifier)) {
            return false;
        }
        if (this.getClass().isAssignableFrom(o.getClass()) && !this.getClass().equals(o.getClass())) {
            return o.equals(this); // Delegates to most specific class.
        }

        final AliasedIdentifier that = (AliasedIdentifier) o;
        try {
            final ModelContext thisIdentifiedCtx = this.getIdentifiedContext();
            final ModelContext thatIdentifiedCtx = that.getIdentifiedContext();
            return  this.getAlias().equals(that.getAlias())
                    && ( ((null == thisIdentifiedCtx) && (null == thatIdentifiedCtx))
                        || ((null != thisIdentifiedCtx) && thisIdentifiedCtx.equals(thatIdentifiedCtx)) );
        } catch (Exception e) {
            return false;
        }
    }


    public int hashCode() {
        long longHash = this.getAlias().hashCode();
        longHash = 29*longHash + super.hashCode();
        longHash ^= (longHash >>> 32);
        return (int) longHash;
    }

}
