/**
 * 
 */
package com.tibco.cep.query.service;

import com.tibco.cep.query.api.QueryException;
import com.tibco.cep.query.exec.QueryExecutionPlan;


/**
 *  The object used for executing an ActiveQuery statement and returning the results it produces.
 *
 * @author pdhar
 */
public interface QueryStatement  {

    //public static final int NO_GENERATED_KEYS = 0;
    //public static final int RETURN_GENERATED_KEYS = 1;
    /**
     * The constant indicating that all QueryResultSet objects that have previously been kept open should be closed when calling getMoreResults.
     */
    public static final int CLOSE_ALL_RESULTS = 2;
    /**
     *  The constant indicating that the current QueryResultSet object should be closed when calling getMoreResults.
     */
    public static final int CLOSE_CURRENT_RESULT = 3;
    /**
     *  The constant indicating that the current QueryResultSet object should not be closed when calling getMoreResults.
     */
    public static final int KEEP_CURRENT_RESULT = 4;


    public static final int QUERYSTATEMENT_STATE_CLOSED = 0;
    public static final int QUERYSTATEMENT_STATE_OPEN = 1;



    /**
     * Releases this QueryStatement object's resources.
     */
    void close() throws QueryException;

    /**
     * Cancels this statement if the engine allows it.
     */
    void cancel() throws QueryException;


    QueryExecutionPlan getExecutionPlan();


    /**
     * Retrieves the Query object associated with the QueryStatement
     * @return Query
     */
    public Query getQuery() throws QueryException;


    /**
     * Retrieves the QuerySession under which this statement is executing
     * @return QuerySession
     */
    public QuerySession getQuerySession();

    /**
     * Retrieves the direction for fetching rows that is the default for result sets generated from this QueryStatement object.
     * @return  int the default fetch direction for result sets generated from this QueryStatement object
     */
    public int getFetchDirection() throws QueryException;

    /**
     * Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this
     * QueryStatement object. If this QueryStatement object has not set a fetch size by calling the method setFetchSize,
     * the return value is implementation-specific.
     * @return int the default fetch size for result sets generated from this Statement object
     */
    public int getFetchSize() throws QueryException;

    /**
     * Retrieves the maximum number of rows that a QueryResultSet object produced by this QueryStatement object can contain.
     * If this limit is exceeded, the excess rows are silently dropped.
     * @return int the current maximum number of rows for a ResultSet  object produced by this QueryStatement object; zero means there is no limit
     */
    public int getMaxRows() throws QueryException;

    /**
     * Moves to this QueryStatement object's next result, returns true if it is a QueryResultSet object,
     * and implicitly closes any current QueryResultSet  object(s) obtained with the method getQueryResultSet.
     * There are no more results when the following is true:
     *  // stmt is a QueryStatement object
     *  (stmt.getMoreResults() == false)
     * @return boolean true if the next result is a QueryResultSet  object; false if there are no more results
     */
    boolean getMoreResults() throws QueryException;

    /**
     * Moves to this QueryStatement object's next result, returns true if it is a QueryResultSet object,
     * and implicitly closes any current QueryResultSet  object(s) obtained with the method getQueryResultSet.
     * There are no more results when the following is true:
     *  // stmt is a QueryStatement object
     *  (stmt.getMoreResults() == false)
     * @param current one of the following Statement  constants indicating what should happen to current ResultSet objects
     * obtained using the method getResultSet: Statement.CLOSE_CURRENT_RESULT, Statement.KEEP_CURRENT_RESULT,
     * or Statement.CLOSE_ALL_RESULTS
     * @return boolean true if the next result is a QueryResultSet  object; false if there are no more results
     */
    boolean getMoreResults(int current) throws QueryException;

    /**
     * Retrieves the current result as a QueryResultSet object. This method should be called only once per result.
     * @return the current result as a QueryResultSet object or null if the result is an update count or there are no more results
     */
    QueryResultSet getResultSet() throws QueryException;

    /**
     * Retrieves the result set concurrency for ResultSet objects generated by this Statement object.
     * @return either QueryResultSet.CONCUR_READ_ONLY or QueryResultSet.CONCUR_UPDATABLE
     */
    int getQueryResultSetConcurrency() throws QueryException;


    /**
     * Retrieves the result set holdability for ResultSet objects generated by this Statement object.
     * @return either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
     */
    int getQueryResultSetHoldability() throws QueryException;


    /**
     * Returns the ID of this object. 
     * @return String
     */
    String getId();

    public interface StateChangeEvent {

        int getState();

        QueryStatement getQueryStatement();

        boolean isOpen();

        boolean isClosed();
    }

    public interface StateChangeListener {

        void notify(QueryStatement.StateChangeEvent e);
    }


}
