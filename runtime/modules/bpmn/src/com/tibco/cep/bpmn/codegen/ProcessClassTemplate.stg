group process;

propAtomSetterNames::= [
        "0":"setString",
        "1":"setInt",
        "2":"setLong",
        "3":"setDouble",
        "4":"setBoolean",
        "5":"setDateTime",
        "6":"setContainedConcept",
        "7":"setConcept",
        default:"null"]

propertyTypeInterfaceFSClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.Property.PropertyString",
        "1":"com.tibco.cep.runtime.model.element.Property.PropertyInt",
        "2":"com.tibco.cep.runtime.model.element.Property.PropertyLong",
        "3":"com.tibco.cep.runtime.model.element.Property.PropertyDouble",
        "4":"com.tibco.cep.runtime.model.element.Property.PropertyBoolean",
        "5":"com.tibco.cep.runtime.model.element.Property.PropertyDateTime",
        "6":"com.tibco.cep.runtime.model.element.Property.PropertyContainedConcept",
        "7":"com.tibco.cep.runtime.model.element.Property.PropertyConceptReference",
        default:"null"]

propertyArrayInterfaceFSClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.PropertyArrayString",
        "1":"com.tibco.cep.runtime.model.element.PropertyArrayInt",
        "2":"com.tibco.cep.runtime.model.element.PropertyArrayLong",
        "3":"com.tibco.cep.runtime.model.element.PropertyArrayDouble",
        "4":"com.tibco.cep.runtime.model.element.PropertyArrayBoolean",
        "5":"com.tibco.cep.runtime.model.element.PropertyArrayDateTime",
        "6":"com.tibco.cep.runtime.model.element.PropertyArrayContainedConcept",
        "7":"com.tibco.cep.runtime.model.element.PropertyArrayConceptReference",
        default:"null"]


propertyArrayImplFSClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayStringImpl",
        "1":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayIntImpl",
        "2":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayLongImpl",
        "3":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayDoubleImpl",
        "4":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayBooleanImpl",
        "5":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayDateTimeImpl",
        "6":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayContainedConceptImpl",
        "7":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyArrayConceptReferenceImpl",
        default:"null"]

propertyArrayImplSimpleClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayStringSimple",
        "1":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayIntSimple",
        "2":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayLongSimple",
        "3":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayDoubleSimple",
        "4":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayBooleanSimple",
        "5":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayDateTimeSimple",
        "6":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayContainedConceptSimple",
        "7":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyArrayConceptReferenceSimple",
        default:"null"]

propertyAtomInterfaceFSClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.PropertyAtomString",
        "1":"com.tibco.cep.runtime.model.element.PropertyAtomInt",
        "2":"com.tibco.cep.runtime.model.element.PropertyAtomLong",
        "3":"com.tibco.cep.runtime.model.element.PropertyAtomDouble",
        "4":"com.tibco.cep.runtime.model.element.PropertyAtomBoolean",
        "5":"com.tibco.cep.runtime.model.element.PropertyAtomDateTime",
        "6":"com.tibco.cep.runtime.model.element.PropertyAtomContainedConcept",
        "7":"com.tibco.cep.runtime.model.element.PropertyAtomConceptReference",
        default:"null"]

propertyAtomImplFSClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomStringImpl",
        "1":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomIntImpl",
        "2":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomLongImpl",
        "3":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomDoubleImpl",
        "4":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomBooleanImpl",
        "5":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomDateTimeImpl",
        "6":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomContainedConceptImpl",
        "7":"com.tibco.cep.runtime.model.element.impl.property.history.PropertyAtomConceptReferenceImpl",
        default:"null"]

propertyAtomImplSimpleClassNames::=[
        "0":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomStringSimple",
        "1":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomIntSimple",
        "2":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomLongSimple",
        "3":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomDoubleSimple",
        "4":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomBooleanSimple",
        "5":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomDateTimeSimple",
        "6":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomContainedConceptSimple",
        "7":"com.tibco.cep.runtime.model.element.impl.property.simple.PropertyAtomConceptReferenceSimple",
        default:"null"]

setArgumentTypes::=[
          "0":"java.lang.String",
          "1":"int",
          "2":"long",
          "3":"double",
          "4":"boolean",
          "5":"java.util.Calendar",
          "6":"com.tibco.cep.runtime.model.element.ContainedConcept",
          "7":"com.tibco.cep.runtime.model.element.Concept",
          default:"null"]

castArgumentTypes::=[
          "0":"java.lang.String",
          "1":"Integer",
          "2":"Long",
          "3":"Double",
          "4":"Boolean",
          "5":"java.util.Calendar",
          "6":"com.tibco.cep.runtime.model.element.ContainedConcept",
          "7":"com.tibco.cep.runtime.model.element.Concept",
          default:"null"]

Process_Class(processInfo)::=<<
package <processInfo.packageName>;


import com.tibco.cep.bpmn.runtime.agent.*;
import com.tibco.cep.bpmn.runtime.utils.*;
import com.tibco.cep.bpmn.runtime.model.*;
import com.tibco.cep.bpmn.runtime.templates.*;
import com.tibco.cep.bpmn.runtime.activity.mapper.*;
import com.tibco.cep.repo.GlobalVariables;
import com.tibco.cep.runtime.model.event.SimpleEvent;
import com.tibco.cep.runtime.model.element.*;
import com.tibco.cep.runtime.model.element.Property.PropertyContainedConcept;
import com.tibco.cep.runtime.model.element.Property.PropertyConceptReference;
import com.tibco.xml.data.primitive.ExpandedName;
import com.tibco.be.functions.xpath.JXPathHelper;

public class <processInfo.className> extends AbstractJobContext {


  public static com.tibco.cep.runtime.model.element.impl.property.metaprop.MetaProperty[] m_metaProps = <processInfo.metaProperties>;
  public static int[] m_conceptPropIdxs = makeConceptPropIdxs(m_metaProps);


  final static String processTemplateId = "<processInfo.packageName>.<processInfo.className>";

  public static java.lang.String[] propertyNames = {
    <processInfo.members :{ tn | "<tn.name>"};separator=",\n">
    <if(processInfo.members)>,<endif>
    "$1zprocessStatus",
    "$1zlastTaskExecuted",
    "$1zparentProcess",
    "$1zpendingEventMap"
  };
  
  public static java.lang.String designTimeType = "<processInfo.designTimeType>";
  public static int numTasks = <processInfo.numTasks>;

  public static java.lang.String type = "<processInfo.type>";
  
 
  public static com.tibco.xml.data.primitive.ExpandedName process_expandedName
    = com.tibco.xml.data.primitive.ExpandedName.makeName("<processInfo.nsURI>","<processInfo.className>");


  public static java.lang.String parentPropertyName = <if(!processInfo.parentProperty)>"<processInfo.parentProperty>"<else>"children"<endif>;
  
  public static java.lang.Class parentClass = <if(processInfo.parentClass)><processInfo.parentClass>.class<else>null<endif>;

  <!
  <processInfo.members:{ mi | <MemberProperty(memberInfo=mi)> };separator="\n\n">
  !>

  public  <processInfo.className>()  {
    super();
	}

	public  <processInfo.className>(long _id)  {
	  super(_id);
	}

	public  <processInfo.className>(long _id, java.lang.String _extId)  {
	  super(_id, _extId);
	}

  public com.tibco.cep.runtime.model.element.impl.GeneratedConceptImpl newInstance()  {
      return new <processInfo.className>();
  }

  @Override
  public ProcessTemplate getProcessTemplate() {
    return com.tibco.cep.bpmn.runtime.templates.ProcessTemplateRegistry.getInstance().getProcessTemplate(processTemplateId);
  }

  public short getProcessTemplateVersion() {
    return <processInfo.versionInfo.revision>;
  }
  
  @Override
  public String getDesignTimeProcessUri() {
    return designTimeType;  
  }
  
  @Override
  public int getNumTasks() {
    return numTasks;  
  }

  public com.tibco.cep.runtime.model.element.impl.property.metaprop.MetaProperty getMetaProperty(int propIndex)  {
      return getMetaProperty_static(propIndex);
  }
  
  protected int[] conceptPropIdxs() {
      return m_conceptPropIdxs;
  }

  static public com.tibco.cep.runtime.model.element.impl.property.metaprop.MetaProperty getMetaProperty_static(int propIndex)  {
     return m_metaProps[propIndex];
  }

  public java.lang.String getParentPropertyName()  {
    return parentPropertyName;
  }

  protected java.lang.Class getParentClass()  {
     return parentClass;
  }


  public java.lang.String indexToName(int index)  {
    return propertyNames[index];
  }


  static public int getPropertyIndex_static(String name) {
    switch(name.hashCode()) {
    <processInfo.members:{ mi |
      case <mi.hashCode> : return <mi.propertyId>;
         };separator="\n">
      default: return -1;
    }
  }

  public int getPropertyIndex(java.lang.String name)  {
    return getPropertyIndex_static(name);
  }


  @Override
  public Property[] getProperties() {
    return new com.tibco.cep.runtime.model.element.Property[]  {


    <processInfo.members:{ mi | <if(mi.attribute)><mi.varname><else>get<mi.varname><endif>() };separator=",\n">
    <if(processInfo.members)>,<endif>
    super.getProperty("$1zprocessStatus"),
    super.getProperty("$1zlastTaskExecuted"),
    super.getProperty("$1zparentProcess"),
    super.getProperty("$1zpendingEventMap")
    };

  }

  <!
  public Property[] getPropertiesNullOK() {
    return new com.tibco.cep.runtime.model.element.Property[]  {
    <processInfo.members:{ mi | <mi.varname> };separator=",\n">
    };
  }
  !>

  public com.tibco.cep.runtime.model.element.Property[] getLocalProperties()  {
     return new com.tibco.cep.runtime.model.element.Property[] {
        <processInfo.members:{ mi | <if(mi.attribute)><mi.varname><else>get<mi.varname><endif>() };separator=",\n">
     };
  }

  public boolean excludeNullProps()  {
    return <processInfo.excludeNullProps>;
  }
  
  public boolean includeNullProps()  {
    return <processInfo.includeNullProps>;
  }	
	
  public boolean expandPropertyRefs()  {
    return <processInfo.expandPropertyRefs>;
  }

  public boolean setNilAttribs()  {
    return <processInfo.setNilAttribs>;
  }

  public boolean treatNullValues()  {
    return <processInfo.treatNullValues>;
  }

  @Override
  public ExpandedName getExpandedName() {
    return process_expandedName;
  }

  protected int _getNumProperties_constructor_only()  {
    return <processInfo.numProperties>;
  }

  protected int _getNumDirtyBits_constructor_only()  {
    return 3;
  }


  @Override
  public PropertyContainedConcept[] getContainedConceptProperties() {
    return new com.tibco.cep.runtime.model.element.Property.PropertyContainedConcept[] {
        <processInfo.contained:{ mi | <if(mi.attribute)><mi.varname><else>get<mi.varname><endif>()};separator=",\n">
     };
  }

  public PropertyConceptReference [] getConceptReferenceProperties() {
    return new com.tibco.cep.runtime.model.element.Property.PropertyConceptReference[] {
        <processInfo.referenced:{ mi | <if(mi.attribute)><mi.varname><else>get<mi.varname><endif>()};separator=",\n">
    };
  }


  protected com.tibco.cep.runtime.model.element.Property.PropertyConceptReference getConceptReferenceProperty(String propertyName)  {
      <processInfo.referenced:{ mi |<GetPropertyByName(memberInfo=mi)>};separator="\n">
      return null;
  }


  protected com.tibco.cep.runtime.model.element.Property.PropertyContainedConcept getContainedConceptProperty(String propertyName)  {
      <processInfo.contained:{ mi |<GetPropertyByName(memberInfo=mi)>};separator="\n">
      return null;
  }

<!


!>

  <processInfo.members:{ mi |<GetReturnType(memberInfo=mi)> get<mi.varname>() {
     return (<if(mi.array)><propertyArrayInterfaceFSClassNames.(mi.typeId)><else><propertyAtomInterfaceFSClassNames.(mi.typeId)><endif>)getProperty(<mi.propertyId>);
  }

  <if (!mi.array)>
  public void set<mi.varname>(<setArgumentTypes.(mi.typeId)> value) {
       get<mi.varname>().<propAtomSetterNames.(mi.typeId)>(value);
  }
  <endif>
  };separator="\n">

<!
  public Property getPropertyNullOK(String name) {
  <processInfo.members:{ mi |
      if(name.equals("<mi.name>")) {
        return <mi.varname>;
      } };separator="\n">
      return null;
  }
!>


  @Override
  public String getType() {
    return type;
  }
  <! --------
  @Override
  public void setPropertyValue(String name, Object value) throws Exception {
  <processInfo.members:{ mi |
  <if(!mi.array)>
    if(name.equals("<mi.name>")){
       get<mi.varname>().<propAtomSetterNames.(mi.typeId)>((<castArgumentTypes.(mi.typeId)>) value);
       return;
    }
  <endif>
  };separator="\n">
  }


  @Override
  public Object getPropertyValue(String name) throws NoSuchFieldException {
  <processInfo.members:{ mi |
  <if(!mi.array)>
    if(name.equals("<mi.name>")){
       return get<mi.varname>();
    }
  <endif>
  };separator="\n">
    throw new NoSuchFieldException(name);
  }

-----!>


  <processInfo.inputMapperSnippets:{ s | <s> }; separator="\n\n">

  <processInfo.outputMapperSnippets:{ s | <s> }; separator="\n\n">

} // end class
>>




GetPropertyByName(memberInfo)::=<<
   if(propertyName.equals("<memberInfo.name>")) {
          return <if(memberInfo.attribute)><memberInfo.varname><else>get<memberInfo.varname><endif>();
   }
>>

GetReturnType(memberInfo)::=<<
public <if(memberInfo.array)><propertyArrayInterfaceFSClassNames.(memberInfo.typeId)>
<else>
<propertyAtomInterfaceFSClassNames.(memberInfo.typeId)>
<endif>
>>

MemberClass(memberInfo)::=<<
<if (memberInfo.historySize)>
    <if(memberInfo.array)>
     <propertyArrayImplSimpleClassNames.(memberInfo.typeId)>
    <else>
     <propertyAtomImplSimpleClassNames.(memberInfo.typeId)>
    <endif>
<else>
   <if(memberInfo.array)>
     <propertyArrayImplFSClassNames.(memberInfo.typeId)>
   <else>
     <propertyAtomImplFSClassNames.(memberInfo.typeId)>
   <endif>
  <endif>
>>

MemberProperty(memberInfo)::=<<
    protected <memberInfo.memberClass> <memberInfo.varname> = new <memberInfo.memberClass>(this) {
        public String getName() {  return "<memberInfo.name>";    }
        public int getPropertyIndex()  {  return <memberInfo.propertyIndex>;  }
        public int getPropertyLevel()  {  return <memberInfo.propertyLevel>;  }
        public int getPropertyId()  {  return <memberInfo.propertyId>;  }
        public int getIndex()  { return <memberInfo.propertyIndex>;  }
        public int getLevel()  { return <memberInfo.propertyLevel>;  }
        public int getHistoryPolicy()  { return <memberInfo.historyPolicy>; }
        <if(memberInfo.type)>
        public java.lang.Class getType() {  return <memberInfo.type>.class; }
        <if(memberInfo.maintainReverseRef)>
        public boolean maintainReverseRef() {  return <memberInfo.maintainReverseRef>;  }
        <endif>
        <if(memberInfo.genNullContainedConcept)>
        <if (memberInfo.containedConcept)>
        <if(memberInfo.array)>
        public  com.tibco.cep.runtime.model.element.NullContainedConcept getNullContainedConcept() { return  <memberInfo.type>.NullContainedConcept.INSTANCE;  }
        <else>
        public com.tibco.cep.runtime.model.element.ContainedConcept getContainedConcept(boolean calledFromCondition) {
          com.tibco.cep.runtime.model.element.ContainedConcept cc = getContainedConcept();
          if(calledFromCondition && cc == null)
              return <memberInfo.type>.NullContainedConcept.INSTANCE;
          else
            return cc;
        }
        <endif>
        <endif>
        <endif>
        <endif>
    };
>>



DuplicateThis_Copy(memberInfo)::=<<
if(<memberInfo.varname> != null) {
     <if(memberInfo.historySize)>
     ret.<memberInfo.varname> = new <memberInfo.memberClass>(<memberInfo.historySize>,ret);
     <else>
     ret.<memberInfo.varname> = new <memberInfo.memberClass>(ret);
     <endif>
     ret.<memberInfo.varname>.copy(<memberInfo.varname>);
}
>>


//      Mapper class template


Mapper_Class(mapperInfo) ::= <<
  public static class <mapperInfo.name>_Mapper  extends AbstractBaseMapper {
       public <mapperInfo.name>_Mapper() {

       }
       <if(mapperInfo.inputCode)>
       public void inputTransform(Job job, Variables $vars) throws Exception {
          GlobalVariables $globalVariables = job.getProcessAgent().getRuleServiceProvider().getGlobalVariables();
          com.tibco.cep.bpmn.runtime.model.JobContext $job = job.getJobContext();
          com.tibco.cep.bpmn.runtime.model.JobContext $3zjob = $job;
          <if(mapperInfo.isLoop)>
          final Object $loopCounter = $vars.getVariable("loopCounter");
          final Object $3zloopCounter = $loopCounter;
          final Object $loopMax  = $vars.getVariable("loopMax");
          final Object $3zloopMax = $loopMax;
          final Object $loopVar = $vars.getVariable("loopVar");
          final Object $3zloopVar = $loopVar;
          <endif>
          <mapperInfo.inputCode>
       }
       <endif>
       <if(mapperInfo.outputCode)>
       public void outputTransform(Job job, Variables $vars) throws Exception {
          GlobalVariables $globalVariables = job.getProcessAgent().getRuleServiceProvider().getGlobalVariables();
          com.tibco.cep.bpmn.runtime.model.JobContext $job = job.getJobContext();
          <mapperInfo.outputEntries:{ e | <Mapper_getVar(entry=e)> }; separator="\n">
          <mapperInfo.outputCode>
       }
       <endif>
  }

>>

Mapper_getVar(entry)::= <<
 <Mapper_GetType(val=entry.value)>  $3z<entry.key> = (<Mapper_GetType(val=entry.value)>) $vars.getVariable("<entry.key>");
>>

Mapper_setVar(entry)::= <<
 <Mapper_GetType(val=entry.value)>  $3z<entry.key> = (<Mapper_GetType(val=entry.value)>) $vars.getVariable("<entry.key>");
>>


Mapper_GetType(val)::=<<
<if(val.primitive)>
<if(val.typeRequiresBox)>
<val.boxedTypeName>
<else>
<val.typeName>
<endif>
<else>
<if(val.concept)>
com.tibco.cep.runtime.model.element.Concept
<else>
<if(val.timeEvent)>
com.tibco.cep.runtime.model.event.TimeEvent
<else>
<if(val.event)>
com.tibco.cep.runtime.model.event.SimpleEvent
<endif>
<endif>
<endif>
<endif>
<if(val.array)>[]<endif>
>>






