<!-- <?xml version = "1.0" encoding = "UTF-8"?> -->
<!--Generated by TNT. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
<xsd:schema
     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         targetNamespace = "http://www.tibco.com/com.tibco.be.functions#function_catalog.xsd"
         xmlns:tns = "http://www.tibco.com/com.tibco.be.functions#function_catalog.xsd"
         elementFormDefault = "qualified"
         attributeFormDefault = "unqualified"
>
    <xsd:annotation>
        <xsd:documentation>
            Describes a function in a registry. Functions are written in Java Language
            The functions have public static modifiers.
            The return type of the function are limited to
                a.> primitives of Java Language - char, short, int, float, double, boolean, byte
                b.> Entity Model Object - such as Concept, Event, or well defined entities in the Model of that type
                c.> Java Object. Any other type are widened to Java Object.
                d.> Arrays are treated as Java Object.

            An xml instance of this schema has to be present in the root folder of an Java Archive resource (jar).
            The document itself must be named "functions.catalog" with catalog as the root element.

            The jar file must be in the class path of engine, or workbench.

        </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType name="function">
        <xsd:sequence>

            <xsd:annotation>
                <xsd:documentation>
                    The name of the static function in the class.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    The java class that implements the static function.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="class" type="xsd:string" minOccurs="1" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    Any description associated to the static function. could be the accompanying Javadoc
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="desc"  type="xsd:string" minOccurs="0" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    The helpUrl if any
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="helpUrl"  type="xsd:string" minOccurs="0" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    mapper - Does it require a mapper to map its formal arguments to actual argument.?
                    For complex Object (such as Event)as parameter, it is better to have a mapper. The userinterface
                    can determine from this parameter and call the XSLT mapper to map the arguments.

                    The rule-compiler when it compiles, understands that the mapper is being used, and generates the
                    appropriate code for transformation of an xslt-template to the actual argument passed.

                    The runtime component load the XALAN runner, and evaluates the xslt with the mapping XiNodes
                    and creates the function argument XiNode. It then splits each element of XiNode as Java Object
                    required for the invoking the function.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="mapper"  type="xsd:boolean" minOccurs="0" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    async - Is this function doing any IO operation or purely number crunching. The developer provides
                    a hint to the Rule engine that the function does some IO bound operations such as Network, or lots of
                    disk access. The result of the operation are do not affect any of the model entities, and it is
                    feasible to do such operation in a seperate thread.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="async"  type="xsd:boolean" minOccurs="0" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    timesensitive - does this function require time (system clock) for its behavior.
                    The engine behave differently for functions that are time bound. Such as call this function if the
                    value has not changed since the last time it was invoked.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="timesensitive"  type="xsd:boolean" minOccurs="0" maxOccurs="1"/>

            <xsd:annotation>
                <xsd:documentation>
                    modify - The developer of the function specifies that it modifies facts in this function.
                    This is parameter is used in
                    a.> During rule compilation, the compiler check for any function, and its modify attribute.
                    If it is set, then the compiler raises an Error. If function changes the facts, and the modify attribute
                    is not set, then the behavior is not guaranteed.

                    b.> In action part, it generates the appropriates code for the object that are modified.
                    c.> This is an optimization attribute.

                </xsd:documentation>
            </xsd:annotation>
            <xsd:element name="modify"  type="xsd:boolean" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
    </xsd:complexType>


    <xsd:annotation>
                <xsd:documentation>
                    Category of function. It is a list of functions that are categorically organized
                </xsd:documentation>
            </xsd:annotation>
    <xsd:complexType name="category">
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="function" type="tns:function" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:annotation>
                <xsd:documentation>
                    A catalog of categories.
                </xsd:documentation>
            </xsd:annotation>
    <xsd:complexType name="catalog">
        <xsd:sequence>
            <xsd:element name="category" type="tns:category" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="catalog" type="tns:catalog"/>

    </xsd:schema>
