<?xml version="1.0"?>

<!--
Note: This XML document is an example Coherence Cache Configuration deployment
descriptor that should be customized (or replaced) for your particular caching
requirements. The cache mappings and schemes declared in this descriptor are
strictly for demonstration purposes and are not required.
-->

<!DOCTYPE cache-config SYSTEM "cache-config.dtd">

<cache-config>
 <!--
  The defaults element defines factory-wide default settings.
  -->
  <defaults>
    <!--
    Note: This element defines the default serializer for all services
    defined within this cache configuration descriptor.

    Valid values include full serializer definitions, as well as named
    references to serializers defined within the "serializers" element of the
    operational configuration.

    Example values include: java, pof. Default value is java.
    -->
    <serializer system-property="tangosol.coherence.serializer"/>

    <!--
    Note: This element defines the default socket-provider for all Coherence
    Extend services defined within this cache configuration descriptor.

    Valid values include full socket-provider defintions, as well as named
    references to providers defined within the "socket-providers" element of the
    operational configuration.

    This setting only specifies the default socket-provider for Coherence
    Extend services; TCMP's socket-provider is specified within the
    "unicast-listener" of the operational configuration.

    Example values include: system, ssl. Default value is system.
    -->
    <socket-provider system-property="tangosol.coherence.socketprovider"/>
  </defaults>

    <caching-scheme-mapping>

        <cache-mapping>
            <cache-name>deletedEntities*</cache-name>
            <scheme-name>deleted-entities</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>lockManager*</cache-name>
            <scheme-name>lock-manager</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>agentTxnLog*</cache-name>
            <scheme-name>agent-txnlog</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>sequence-bs*</cache-name>
            <scheme-name>default-distributed</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>sequence-nobs*</cache-name>
            <scheme-name>distributed-nobs</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>scheduler-bs*</cache-name>
            <scheme-name>scheduler-distributed-bs</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="be.engine.limited.cache.back.size.limit">1000</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>scheduler-bs-readOnly*</cache-name>
            <scheme-name>scheduler-distributed-bs-readOnly</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="be.engine.limited.cache.back.size.limit">1000</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>scheduler-nobs*</cache-name>
            <scheme-name>scheduler-distributed-nobs</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>objectTableCache-nobs*</cache-name>
            <scheme-name>distributed-nobs</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>objectTableCache-bs*</cache-name>
            <scheme-name>default-distributed-limited</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="objectTable.back.size.limit">100000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="objectTable.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <!-- ====== TIBCO BE internal metrics, monitoring and management related config ====== -->

        <cache-mapping>
            <cache-name>tibco-be-internal-domain-data*</cache-name>
            <scheme-name>tibco-be-internal-domain-data</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>tibco-be-internal-metric-def*</cache-name>
            <scheme-name>tibco-be-internal-metric-def</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>tibco-be-internal-metric-data*</cache-name>
            <scheme-name>tibco-be-internal-metric-data</scheme-name>
        </cache-mapping>

        <!-- ================================================================================= -->

        <cache-mapping>
            <cache-name>objectTableCache-bs-readOnly*</cache-name>
            <scheme-name>default-distributed-limited-readOnly</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="objectTable.back.size.limit">100000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="objectTable.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-unlimited-bs*</cache-name>
            <scheme-name>default-distributed</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-unlimited-bs-readOnly*</cache-name>
            <scheme-name>default-distributed-readOnly</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-limited-bs*</cache-name>
            <scheme-name>default-distributed-limited</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="be.engine.limited.cache.back.size.limit">10000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="be.engine.limited.cache.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-limited-bs-readOnly*</cache-name>
            <scheme-name>default-distributed-limited-readOnly</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="be.engine.limited.cache.back.size.limit">10000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="be.engine.limited.cache.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-unlimited-nobs*</cache-name>
            <scheme-name>distributed-nobs</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-limited-nobs*</cache-name>
            <scheme-name>distributed-limited-nobs</scheme-name>
            <init-params>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="be.engine.limited.cache.back.size.limit">10000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="be.engine.limited.cache.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>dist-limited-no-ot*</cache-name>
            <scheme-name>distributed-limited-no-ot</scheme-name>
            <init-params>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value system-property="extid-to-typemap.back.size.limit">10000</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value system-property="extid-to-typemap.cache.expiry.delay">0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>tl-repl-unlimited*</cache-name>
            <scheme-name>threadlease-replicated</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>repl-unlimited*</cache-name>
            <scheme-name>default-replicated</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>repl-limited*</cache-name>
            <scheme-name>default-replicated-limited</scheme-name>
        </cache-mapping>

        <!--
        * IMPORTANT - DO NOT CHANGE *
            This is a core BE distributed scheme and must be present at all times
        -->
        <cache-mapping>
            <cache-name>$FT*</cache-name>
            <scheme-name>ft-replicated</scheme-name>
        </cache-mapping>

        <cache-mapping>
          <cache-name>tx-*</cache-name>
          <scheme-name>example-transactional</scheme-name>
        </cache-mapping>

        <!--
        * IMPORTANT - DO NOT CHANGE *
            This is the default distributed scheme and must be present at all times
        -->
        <cache-mapping>
            <cache-name>*</cache-name>
            <scheme-name>default-distributed</scheme-name>
            <init-params>
                <init-param>
                    <param-name>storeClass</param-name>
                    <param-value system-property="be.engine.cache.store.class">com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore</param-value>
                </init-param>
                <init-param>
                    <param-name>writeDelay</param-name>
                    <param-value system-property="be.engine.cache.store.write.delay">1S</param-value>
                </init-param>
                <init-param>
                    <param-name>batchFactor</param-name>
                    <param-value system-property="be.engine.cache.store.batch.factor">0.75</param-value>
                </init-param>
                <init-param>
                    <param-name>requeueThreshold</param-name>
                    <param-value system-property="be.engine.cache.store.requeue.threshold">1000000</param-value>
                </init-param>
                <init-param>
                    <param-name>rollback</param-name>
                    <param-value system-property="be.engine.cache.store.failure.rollback">true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

    </caching-scheme-mapping>

    <caching-schemes>

        <!--
        Distributed caching scheme.
        -->
        <distributed-scheme>
            <scheme-name>versioned-distributed</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <versioned-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme></local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 10S}</write-delay>
                    <write-requeue-threshold>{requeueThreshold 10000}</write-requeue-threshold>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                </versioned-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>default-distributed</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme></local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>default-distributed-readOnly</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme></local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                                <init-param>
                                    <param-type>java.lang.Integer</param-type>
                                    <param-value>1</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <read-only>true</read-only>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>default-distributed-limited</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 0}</high-units>
                            <expiry-delay>{expiry-delay 0}</expiry-delay>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>default-distributed-limited-readOnly</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 0}</high-units>
                            <expiry-delay>{expiry-delay 0}</expiry-delay>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                                <init-param>
                                    <param-type>java.lang.Integer</param-type>
                                    <param-value>1</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <read-only>true</read-only>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>scheduler-distributed-bs</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 500}</high-units>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>scheduler-distributed-bs-readOnly</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 500}</high-units>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                                <init-param>
                                    <param-type>java.lang.Integer</param-type>
                                    <param-value>1</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <write-requeue-threshold>{requeueThreshold 1000000}</write-requeue-threshold>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
					<read-only>true</read-only>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
            <backup-count>{backup-count 0}</backup-count>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>DeletedEntities</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 0}</high-units>
                            <expiry-delay>{expiry-delay 0}</expiry-delay>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>example-distributed-limited</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <internal-cache-scheme>
                        <local-scheme>
                            <eviction-policy>HYBRID</eviction-policy>
                            <high-units>{back-size-limit 2}</high-units>
                            <expiry-delay>{expiry-delay 2S}</expiry-delay>
                        </local-scheme>
                    </internal-cache-scheme>
                    <cachestore-scheme>
                        <class-scheme>
                            <class-name>{storeClass com.tibco.cep.runtime.service.om.impl.coherence.cluster.backingstore.BECoherenceOracleStore}</class-name>
                            <init-params>
                                <init-param>
                                    <param-type>java.lang.String</param-type>
                                    <param-value>{cache-name}</param-value>
                                </init-param>
                            </init-params>
                        </class-scheme>
                    </cachestore-scheme>
                    <write-delay>{writeDelay 1S}</write-delay>
                    <rollback-cachestore-failures>{rollback true}</rollback-cachestore-failures>
                    <write-batch-factor>{batchFactor 0.75}</write-batch-factor>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>distributed-nobs</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>deleted-entities</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 10000}</high-units>
                    <expiry-delay>{expiry-delay 10S}</expiry-delay>
                    <flush-delay>{flush-delay 5S}</flush-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>scheduler-distributed-nobs</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>agent-txnlog</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 10000}</high-units>
                    <expiry-delay>{expiry-delay 10S}</expiry-delay>
                    <flush-delay>{flush-delay 5S}</flush-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>lock-manager</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 10000}</high-units>
                    <expiry-delay>{expiry-delay 2S}</expiry-delay>
                    <flush-delay>{flush-delay 3S}</flush-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            <lease-granularity>member</lease-granularity>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>distributed-limited-nobs</scheme-name>
            <service-name>DistributedCache</service-name>

            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 10000}</high-units>
                    <expiry-delay>{expiry-delay 0}</expiry-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>distributed-limited-no-ot</scheme-name>
            <service-name>DistributedCache1</service-name>

            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 10000}</high-units>
                    <expiry-delay>{expiry-delay 0}</expiry-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!-- ====== TIBCO BE internal metrics, monitoring and management related config ====== -->
        <distributed-scheme>
            <scheme-name>tibco-be-internal-domain-data</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>1000</high-units>
                    <expiry-delay>10M</expiry-delay>
                    <flush-delay>10M</flush-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>tibco-be-internal-metric-def</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>tibco-be-internal-metric-data</scheme-name>
            <service-name>DistributedCache</service-name>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>1000</high-units>
                    <expiry-delay>10M</expiry-delay>
                    <flush-delay>10M</flush-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!-- ================================================================================= -->

        <!--
        Near caching (two-tier) scheme with size limited local cache
        in the front-tier and a distributed cache in the back-tier.
        -->
        <near-scheme>
            <scheme-name>example-near</scheme-name>

            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 100}</high-units>
                    <expiry-delay>{expiry-delay 1m}</expiry-delay>
                </local-scheme>
            </front-scheme>

            <back-scheme>
                <distributed-scheme>
                    <scheme-ref>distributed-nobs</scheme-ref>
                </distributed-scheme>
            </back-scheme>

            <invalidation-strategy>present</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <!--
        FT Replicated caching scheme.
        -->
        <replicated-scheme>
            <scheme-name>ft-replicated</scheme-name>
            <service-name>FTReplicatedCache</service-name>

            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>

            <autostart>true</autostart>
        </replicated-scheme>

        <!--
        Replicated caching scheme.
        -->
        <replicated-scheme>
            <scheme-name>threadlease-replicated</scheme-name>
            <service-name>ReplicatedCache</service-name>
            <lease-granularity>thread</lease-granularity>
            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>

            <autostart>true</autostart>
        </replicated-scheme>

        <replicated-scheme>
            <scheme-name>default-replicated</scheme-name>
            <service-name>ReplicatedCache</service-name>
            <lease-granularity>member</lease-granularity>
            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>unlimited-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>

            <autostart>true</autostart>
        </replicated-scheme>

        <replicated-scheme>
            <scheme-name>default-replicated-limited</scheme-name>
            <service-name>ReplicatedCache</service-name>
            <lease-granularity>member</lease-granularity>
            <backing-map-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{back-size-limit 0}</high-units>
                    <expiry-delay>{expiry-delay 0}</expiry-delay>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </replicated-scheme>

        <!--
        Optimistic caching scheme.
        -->
        <optimistic-scheme>
            <scheme-name>example-optimistic</scheme-name>
            <service-name>OptimisticCache</service-name>

            <backing-map-scheme>
                <local-scheme>
                    <scheme-ref>example-backing-map</scheme-ref>
                </local-scheme>
            </backing-map-scheme>

            <autostart>true</autostart>
        </optimistic-scheme>

        <!--
        Backing map scheme definition used by all the caches that require
        size limitation and/or expiry eviction policies.
        -->
        <local-scheme>
            <scheme-name>example-backing-map</scheme-name>

            <eviction-policy>HYBRID</eviction-policy>
            <high-units>{back-size-limit 0}</high-units>
            <expiry-delay>{back-expiry 1h}</expiry-delay>
            <flush-delay>1m</flush-delay>
        </local-scheme>

        <!--
        Backing map scheme definition used by all the caches that do
        not require any eviction policies
        -->
        <class-scheme>
            <scheme-name>unlimited-backing-safehashmap</scheme-name>
            <class-name>com.tangosol.util.SafeHashMap</class-name>
            <init-params></init-params>
        </class-scheme>

        <local-scheme>
            <scheme-name>unlimited-backing-map</scheme-name>
        </local-scheme>

        <!--
        ReadWriteBackingMap caching scheme.
        -->
        <read-write-backing-map-scheme>
            <scheme-name>example-read-write</scheme-name>

            <internal-cache-scheme>
                <local-scheme>
                    <scheme-ref>example-backing-map</scheme-ref>
                </local-scheme>
            </internal-cache-scheme>


            <read-only>false</read-only>
            <write-delay>0s</write-delay>
        </read-write-backing-map-scheme>

        <!--
        Overflow caching scheme with example eviction local cache
        in the front-tier and the example LH-based cache in the back-tier.
        -->
        <overflow-scheme>
            <scheme-name>example-overflow</scheme-name>

            <front-scheme>
                <local-scheme>
                    <scheme-ref>example-backing-map</scheme-ref>
                </local-scheme>
            </front-scheme>

            <back-scheme>
                <external-scheme>
                    <scheme-ref>example-lh</scheme-ref>
                </external-scheme>
            </back-scheme>
        </overflow-scheme>

        <!--
        External caching scheme using LH.
        -->
        <external-scheme>
            <scheme-name>example-lh</scheme-name>

            <lh-file-manager>
                <directory></directory>
            </lh-file-manager>

            <high-units>0</high-units>
        </external-scheme>

        <!--
        External caching scheme using memory-mapped files.
        -->
        <external-scheme>
            <scheme-name>example-nio</scheme-name>

            <nio-file-manager>
                <initial-size>8MB</initial-size>
                <maximum-size>512MB</maximum-size>
                <directory></directory>
            </nio-file-manager>

            <high-units>0</high-units>
        </external-scheme>

        <!--
        Invocation Service scheme.
        -->
        <invocation-scheme>
            <scheme-name>example-invocation</scheme-name>
            <service-name>InvocationService</service-name>
            <autostart>true</autostart>
        </invocation-scheme>


        <!--<remote-cache-scheme>-->
        <!--<scheme-name>tcp-extend-clusterA</scheme-name>-->
        <!--<service-name>ExtendTcpCacheService</service-name>-->
        <!--<initiator-config>-->
        <!--<tcp-initiator>-->
        <!--<remote-addresses>-->
        <!--<socket-address>-->
        <!--<address>localhost</address>-->
        <!--<port>9091</port>-->
        <!--</socket-address>-->
        <!--</remote-addresses>-->
        <!--<connect-timeout>10s</connect-timeout>-->
        <!--</tcp-initiator>-->
        <!--<outgoing-message-handler>-->
        <!--<request-timeout>5s</request-timeout>-->
        <!--</outgoing-message-handler>-->
        <!--<serializer>-->
        <!--<class-name>com.tibco.cep.runtime.service.om.coherence.cluster.CacheSerializer</class-name>-->
        <!--</serializer>-->
        <!--</initiator-config>-->
        <!--</remote-cache-scheme>-->


        <!--<remote-invocation-scheme>-->
        <!--<scheme-name>tcp-extend-invocation</scheme-name>-->
        <!--<service-name>ExtendTcpInvocationService</service-name>-->
        <!--<initiator-config>-->
        <!--<tcp-initiator>-->
        <!--<remote-addresses>-->
        <!--<socket-address>-->
        <!--<address system-property="tcp.extend.invocation.clusterA.host">localhost</address>-->
        <!--<port system-property="tcp.extend.invocation.clusterA.port">9091</port>-->
        <!--</socket-address>-->
        <!--</remote-addresses>-->
        <!--<connect-timeout>10s</connect-timeout>-->
        <!--</tcp-initiator>-->
        <!--<serializer>-->
        <!--<class-name>com.tibco.cep.runtime.service.om.coherence.cluster.CacheSerializer</class-name>-->
        <!--</serializer>-->
        <!--</initiator-config>-->
        <!--</remote-invocation-scheme>-->


        <!--
        Proxy Service scheme that allows remote clients to connect to the
        cluster over TCP/IP.
        -->

        <!--<proxy-scheme>-->
        <!--<service-name>tcp-extend-cluster</service-name>-->
        <!--<thread-count system-property="be.engine.extend.proxy.thread.count">8</thread-count>-->
        <!--<acceptor-config>-->
        <!--<tcp-acceptor>-->
        <!--<local-address>-->
        <!--<address system-property="be.engine.extend.proxy.localhost">localhost</address>-->
        <!--<port system-property="be.engine.extend.proxy.localport">9099</port>-->
        <!--<reusable>true</reusable>-->
        <!--</local-address>-->
        <!--<receive-buffer-size >1M</receive-buffer-size>-->
        <!--<send-buffer-size >1M</send-buffer-size>-->
        <!--</tcp-acceptor>-->
        <!--<serializer>-->
        <!--<class-name>com.tibco.cep.runtime.service.om.coherence.cluster.CacheSerializer</class-name>-->
        <!--</serializer>-->
        <!--</acceptor-config>-->
        <!--<proxy-config>-->
        <!--<cache-service-proxy>-->
        <!--<lock-enabled >false</lock-enabled>-->
        <!--<read-only >false</read-only>-->
        <!--</cache-service-proxy>-->
        <!--</proxy-config>-->

        <!--<autostart system-property="be.engine.extend.proxy.enabled">true</autostart>-->
        <!--</proxy-scheme>-->

    <!--
    Transactional caching scheme.
    -->
    <transactional-scheme>
      <scheme-name>example-transactional</scheme-name>
      <service-name>TransactionalCache</service-name>
    </transactional-scheme>

    </caching-schemes>

</cache-config>
