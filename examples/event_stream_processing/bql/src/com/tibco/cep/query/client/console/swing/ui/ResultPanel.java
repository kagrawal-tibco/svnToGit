package com.tibco.cep.query.client.console.swing.ui;

import com.tibco.cep.query.client.console.swing.control.ProgressBarControl;
import com.tibco.cep.query.client.console.swing.control.query.Query;
import com.tibco.cep.query.client.console.swing.model.QueryResultModel;
import com.tibco.cep.query.client.console.swing.model.listener.QueryResultModelListener;
import com.tibco.cep.query.client.console.swing.util.SwingUtil;

import javax.swing.*;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

/**
 *
 * @author ksubrama
 */
public class ResultPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private QueryResultModel model;
    private final ProgressBarControl progressBarAction;
    private final byte[] lock = new byte[0];

    /** Creates new form ResultPanel */
    public ResultPanel() {
        initComponents();
        clearButton.setVisible(false);
        progressBar.setMinimum(0);
        progressBar.setMaximum(100);
        progressBarAction = new ProgressBarControl(progressBar);
        progressRelatedComponents.setVisible(false);
        resultTable.setVisible(false);
        resultTable.setFillsViewportHeight(true);
        resultTable.setShowVerticalLines(true);
    }

    public void setQuery(Query query) {
        this.model = query.getResultModel();
        model.addTableModelListener(new QueryResultModelListener(this));
        setModel(model);        
    }

    private void setModel(QueryResultModel result) {
        this.model = result;
        resultTable.setColumnModel(getColumnModel(result.getHeader()));
        resultTable.setModel(model);
        SwingUtil.runInEDT(new SwingUtil.FireAndForgetWork() {

            @Override
            public void doWork() {
                loadTable();
            }
        });
    }

    public QueryResultModel getModel() {
        return model;
    }

    private void loadTable() {
        synchronized(lock) {
            clearButton.setVisible(true);
            progressRelatedComponents.setVisible(true);
            if(resultTable.isVisible() == false) {
                resultTable.setVisible(true);
                if(model != null) {
                    model.removeAllRows();
                }
            }
            resultHolderPane.removeAll();
            resultHolderPane.setLayout(new BorderLayout());
            JScrollPane scrollPane = new JScrollPane(resultTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                    ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(resultTable.getPreferredSize());
            resultHolderPane.add(scrollPane, BorderLayout.CENTER);
            resultHolderPane.getParent().validate();
            progressRelatedComponents.getParent().validate();
            resultTable.validate();
        }
    }

    private DefaultTableColumnModel getColumnModel(String[] columns) {
        DefaultTableColumnModel columnModel = new DefaultTableColumnModel();
        for (int i = 0; i < columns.length; i++) {
            TableColumn tblColumn = new TableColumn();
            tblColumn.setHeaderValue(columns[i]);
            tblColumn.setModelIndex(i);
            if (i != 0) {
                tblColumn.setResizable(true);
                tblColumn.setPreferredWidth(50);
            } else {
                tblColumn.setPreferredWidth(10);
            }
            columnModel.addColumn(tblColumn);
        }
        return columnModel;
    }

    public JTable getTable() {
        return resultTable;
    }

    public void setProgressBarVisible(final boolean visible) {
        progressBarAction.setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressRelatedComponents = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        clearButton = new javax.swing.JButton();
        resultHolderPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();

        progressBar.setToolTipText("Query Execution Progress");
        progressBar.setIndeterminate(true);

        clearButton.setText("Clear Results");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout progressRelatedComponentsLayout = new javax.swing.GroupLayout(progressRelatedComponents);
        progressRelatedComponents.setLayout(progressRelatedComponentsLayout);
        progressRelatedComponentsLayout.setHorizontalGroup(
            progressRelatedComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressRelatedComponentsLayout.createSequentialGroup()
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
        );
        progressRelatedComponentsLayout.setVerticalGroup(
            progressRelatedComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressRelatedComponentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressRelatedComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(clearButton)))
        );

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        resultTable.setAutoscrolls(true);
        resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(resultTable);
        jScrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        javax.swing.GroupLayout resultHolderPaneLayout = new javax.swing.GroupLayout(resultHolderPane);
        resultHolderPane.setLayout(resultHolderPaneLayout);
        resultHolderPaneLayout.setHorizontalGroup(
            resultHolderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );
        resultHolderPaneLayout.setVerticalGroup(
            resultHolderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressRelatedComponents, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultHolderPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultHolderPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressRelatedComponents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        SwingUtil.runInEDT(new SwingUtil.FireAndForgetWork() {

            @Override
            public void doWork() {
                if(model != null) {
                    model.removeAllRows();
                }
                loadTable();
                progressRelatedComponents.getParent().validate();
            }
        });
    }//GEN-LAST:event_clearButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressRelatedComponents;
    private javax.swing.JPanel resultHolderPane;
    private javax.swing.JTable resultTable;
    // End of variables declaration//GEN-END:variables

    public void setProgress(final String text) {
        progressBarAction.setProgress(text);
    }

    public void reloadModel() {
        SwingUtil.runInEDT(new SwingUtil.FireAndForgetWork() {

            @Override
            public void doWork() {
                loadTable();
            }
        });
    }

    void clearResults() {
        // Clear the results.
        clearButtonActionPerformed(null);
    }

    public void setErrorMessage(final Exception ex) {
        SwingUtil.runInEDT(new SwingUtil.FireAndForgetWork() {

            @Override
            public void doWork() {
                synchronized(lock) {
                    resultTable.setVisible(false);
                    resultHolderPane.removeAll();
                    resultHolderPane.setLayout(new GridLayout());
                    JTextArea textArea = new JTextArea();
                    textArea.setText(getErrorMessage(ex));

                    JScrollPane scrollPane = new JScrollPane();
                    scrollPane.setHorizontalScrollBarPolicy(
                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                    scrollPane.setVerticalScrollBarPolicy(
                            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
                    scrollPane.setViewportView(resultTable);

                    resultHolderPane.add(scrollPane);
                    resultHolderPane.getParent().validate();
                }
            }
        });
    }

    private String getErrorMessage(Exception ex) {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        try {
            PrintStream printStream = new PrintStream(outStream, true, UiConstants.DEFAULT_ENCODING);
            ex.printStackTrace(printStream);
            printStream.flush();
            outStream.flush();
            return outStream.toString(UiConstants.DEFAULT_ENCODING);
        } catch (IOException ioEx) {
            // Unable to flush.
        } finally {
            try {
                if(outStream != null) {
                    outStream.close();
                }
            } catch (IOException ex1) {
                // Ignore
            }
        }
        return "Unknown Error";
    }
}
