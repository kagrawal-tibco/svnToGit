package com.tibco.cep.query.client.console.swing.ui;

import com.tibco.cep.query.client.console.swing.util.SwingUtil;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.plaf.basic.BasicButtonUI;

/**
 *
 * @author ksubrama
 */
public class TabHeader extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private RightPanel rightPanel;
    private JLabel titleLabel;
    private JButton closeButton;

    public TabHeader() {
    }

    /** Creates new form TabHeader
     * @param rightPanel 
     * @param title
     */
    public TabHeader(RightPanel rightPanel, String title) {
        initComponents();
        setLayout(new BorderLayout());
        this.rightPanel = rightPanel;
        this.titleLabel = new JLabel(title);
        add(titleLabel, BorderLayout.LINE_START);
        closeButton = new CloseButton();        
        add(closeButton, BorderLayout.LINE_END);
        this.setOpaque(false);
        setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private JTabbedPane getTabbedPane(Container component) {
        if(component.getParent() == null) {
            return null;
        }
        Container parent = component.getParent();
        if(parent instanceof JTabbedPane) {
            return (JTabbedPane)parent;
        } else {
            return getTabbedPane(parent);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /** 
     * Implementation copied from 
     * java swing ui examples.
     */
    private class CloseButton extends JButton implements ActionListener {
        private static final long serialVersionUID = 1L;
        public CloseButton() {
            int size = 17;
            setPreferredSize(new Dimension(size, size));
            setToolTipText("Close the tab");
            //Make the button looks the same for all Laf's
            setUI(new BasicButtonUI());
            //Make it transparent
            setContentAreaFilled(false);
            //No need to be focusable
            setFocusable(false);
            setBorder(BorderFactory.createEtchedBorder());
            setBorderPainted(false);
            //Making nice rollover effect
            //we use the same listener for all buttons
            addMouseListener(buttonMouseListener);
            setRolloverEnabled(true);
            //Close the proper tab by clicking the button
            addActionListener(this);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            SwingUtil.runInEDT(new SwingUtil.FireAndForgetWork() {

                @Override
                public void doWork() {
                    rightPanel.getResultPanel().setProgressBarVisible(false);
                    rightPanel.getResultPanel().clearResults();
                    rightPanel.stopQuery();
                    JTabbedPane tabbedPane = getTabbedPane(rightPanel);
                    int index = tabbedPane.indexOfComponent(rightPanel);
                    tabbedPane.removeTabAt(index);
                }
            });
        }

        //we don't want to update UI for this button
        @Override
        public void updateUI() {
        }

        //paint the cross
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g.create();
            //shift the image for pressed buttons
            if (getModel().isPressed()) {
                g2.translate(1, 1);
            }
            g2.setStroke(new BasicStroke(2));
            g2.setColor(Color.BLACK);
            if (getModel().isRollover()) {
                g2.setColor(Color.RED);
            }
            int delta = 6;
            g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
            g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
            g2.dispose();
        }
    }

    private final static MouseListener buttonMouseListener = new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractButton) {
                AbstractButton button = (AbstractButton) component;
                button.setBorderPainted(true);
            }
        }

        @Override
        public void mouseExited(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractButton) {
                AbstractButton button = (AbstractButton) component;
                button.setBorderPainted(false);
            }
        }
    };
}
