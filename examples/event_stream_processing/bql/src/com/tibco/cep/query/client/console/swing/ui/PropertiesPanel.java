package com.tibco.cep.query.client.console.swing.ui;

import com.tibco.cep.query.client.console.swing.util.SwingUtil;
import com.tibco.cep.query.client.console.swing.util.SwingUtil.FireAndForgetWork;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ksubrama
 */
public class PropertiesPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    /** Creates new form PropertiesPanel */
    public PropertiesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();

        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertiesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(propertiesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable propertiesTable;
    // End of variables declaration//GEN-END:variables

    public void clearModel() {
        SwingUtil.runInEDT(new FireAndForgetWork() {

            @Override
            public void doWork() {
                propertiesTable.setModel(new DefaultTableModel(
                        new Object[0][0], new String[]{"Property", "Value"}));
                initCellRenderer(propertiesTable);
                propertiesTable.getParent().validate();
            }
        });
    }

    public void reloadModel(final Object[][] properties) {
        SwingUtil.runInEDT(new FireAndForgetWork() {

            @Override
            public void doWork() {
                propertiesTable.setModel(new DefaultTableModel(properties,
                        new String[]{"Property", "Value"}));
                initCellRenderer(propertiesTable);
                propertiesTable.getParent().validate();
            }
        });
    }

    private void initCellRenderer(JTable table) {
        PropertiesTableCellRenderer renderer = new PropertiesTableCellRenderer();
        TableColumnModel columnModel = table.getColumnModel();
        for(int i = 0; i < columnModel.getColumnCount(); i++){
            TableColumn column = columnModel.getColumn(i);
            column.setCellRenderer(renderer);
            if(i == 0) {
                column.setPreferredWidth(15);
            }
        }
    }
}
