<?xml version="1.0" encoding="UTF-8"?>
<states:StateMachine xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:designtime="http:///com/tibco/cep/designtime/core/model/designtime_ontology.ecore" xmlns:states="http:///com/tibco/cep/designtime/core/model/states" namespace="/Concepts/" folder="/Concepts/" name="AccountStates" description="" GUID="DF18DA3E-C5F2-B008-1F67-BE87E98A321A" ownerProjectName="FraudDetectionDashboard" main="true" ownerConceptPath="/Concepts/Account">
  <extendedProperties>
    <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
      <value xsi:type="designtime:PropertyMap">
        <properties xsi:type="designtime:SimpleProperty" name="Table Name" value=""/>
        <properties xsi:type="designtime:SimpleProperty" name="Type Name" value=""/>
        <properties xsi:type="designtime:SimpleProperty" name="hasBackingStore" value="true"/>
      </value>
    </properties>
    <properties xsi:type="designtime:ObjectProperty" name="Cache">
      <value xsi:type="designtime:PropertyMap">
        <properties xsi:type="designtime:SimpleProperty" name="Constant [true | false]" value="false"/>
        <properties xsi:type="designtime:SimpleProperty" name="Check for Version [true | false]" value="true"/>
        <properties xsi:type="designtime:SimpleProperty" name="Is Cache Limited[true | false]" value="true"/>
        <properties xsi:type="designtime:SimpleProperty" name="Evict From Cache on Update [true | false]" value="true"/>
      </value>
    </properties>
  </extendedProperties>
  <entryAction folder="/Concepts" name="AccountStates_entryAction" actionText="" conditionText="">
    <symbols>
      <symbolList idName="account" type="/Concepts/Account"/>
    </symbols>
  </entryAction>
  <exitAction folder="/Concepts" name="AccountStates_exitAction" actionText="" conditionText="">
    <symbols>
      <symbolList idName="account" type="/Concepts/Account"/>
    </symbols>
  </exitAction>
  <timeoutAction name="AccountStates_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
    <symbols>
      <symbolList idName="account" type="/Concepts/Account"/>
    </symbols>
  </timeoutAction>
  <timeoutExpression name="AccountStates_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
    <symbols>
      <symbolList idName="account" type="/Concepts/Account"/>
    </symbols>
  </timeoutExpression>
  <stateEntities xsi:type="states:StateStart" name="Start" GUID="FD3A409E-8E06-B2FE-FF77-620A3057037C" ownerStateMachinePath="/Concepts/AccountStates" outgoingTransitions="//@stateTransitions.0">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction folder="/Concepts" name="AccountStates_Start_entryAction" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction name="AccountStates_Start_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction folder="/Concepts" name="AccountStates_Start_timeoutAction" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountStates_Start_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
  </stateEntities>
  <stateEntities xsi:type="states:StateEnd" name="End" GUID="655B35AA-C9B9-576C-35F9-588F5F3583E8" ownerStateMachinePath="/Concepts/AccountStates" incomingTransitions="//@stateTransitions.3">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction name="AccountStates_End_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction folder="/Concepts" name="AccountStates_End_exitAction" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction folder="/Concepts" name="AccountStates_End_timeoutAction" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountStates_End_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
  </stateEntities>
  <stateEntities xsi:type="states:StateSimple" name="Created" GUID="B9AF0A6F-C268-A75D-30FD-61C330532946" incomingTransitions="//@stateTransitions.0" outgoingTransitions="//@stateTransitions.1 //@stateTransitions.11">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction name="AccountStates_Created_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Created::Entering 'Created' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);&#xD;&#xA;//update the M_AccountStates metric &#xD;&#xA;DateTime now = DateTime.now();&#xD;&#xA;DateTime today = DateTime.createTime(DateTime.getYear(now),DateTime.getMonth(now),DateTime.getDate(now),0,0,0,null);&#xD;&#xA;Dashboards.M_AccountStates accountStates = Dashboards.M_AccountStates.compute(&quot;create&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Created::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction name="AccountStates_Created_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction name="AccountStates_Created_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountStates_Created_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
  </stateEntities>
  <stateEntities xsi:type="states:StateComposite" name="Transactions" GUID="B23A0622-73D1-68BE-57F9-3FF7CE7F29D3" incomingTransitions="//@stateTransitions.1" outgoingTransitions="//@stateTransitions.2">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction name="AccountStates_Transactions_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transactions::Entering 'Transactions' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction name="AccountStates_Transactions_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction name="AccountStates_Transactions_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountStates_Transactions_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
    <stateEntities xsi:type="states:StateStart" name="Start" GUID="6485305B-F65D-5A3D-A239-B910AEE51AB5" outgoingTransitions="//@stateTransitions.4 //@stateTransitions.6">
      <extendedProperties>
        <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
          <value xsi:type="designtime:PropertyMap">
            <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
          </value>
        </properties>
        <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
      </extendedProperties>
      <entryAction folder="/Concepts" name="AccountStates_Transactions_Start_entryAction" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </entryAction>
      <exitAction name="AccountStates_Start_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </exitAction>
      <timeoutAction folder="/Concepts" name="AccountStates_Transactions_Start_timeoutAction" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutAction>
      <timeoutExpression name="AccountStates_Start_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutExpression>
    </stateEntities>
    <stateEntities xsi:type="states:StateEnd" name="End" GUID="1AFAD939-063E-5CC7-3E14-27EB197063C5" incomingTransitions="//@stateTransitions.5 //@stateTransitions.7">
      <extendedProperties>
        <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
          <value xsi:type="designtime:PropertyMap">
            <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
          </value>
        </properties>
        <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
      </extendedProperties>
      <entryAction name="AccountStates_End_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </entryAction>
      <exitAction folder="/Concepts" name="AccountStates_Transactions_End_exitAction" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </exitAction>
      <timeoutAction folder="/Concepts" name="AccountStates_Transactions_End_timeoutAction" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutAction>
      <timeoutExpression name="AccountStates_End_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutExpression>
    </stateEntities>
    <stateEntities xsi:type="states:StateSimple" name="Credit" GUID="A25CB0FB-5BA2-78A3-59E1-45097EC90409" incomingTransitions="//@stateTransitions.4 //@stateTransitions.10" outgoingTransitions="//@stateTransitions.5 //@stateTransitions.9">
      <extendedProperties>
        <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
          <value xsi:type="designtime:PropertyMap">
            <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
          </value>
        </properties>
        <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
      </extendedProperties>
      <entryAction name="AccountStates_Credit_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Credit::Entering 'Credit' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);&#xD;&#xA;DateTime now = DateTime.now();&#xD;&#xA;DateTime today = DateTime.createTime(DateTime.getYear(now),DateTime.getMonth(now),DateTime.getDate(now),0,0,0,null);&#xD;&#xA;//update the M_AccountStates metric for transactions&#xD;&#xA;Dashboards.M_AccountStates accountStates = Dashboards.M_AccountStates.compute(&quot;transactions&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Credit::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);&#xD;&#xA;//update the M_AccountStates metric for credit&#xD;&#xA;accountStates = Dashboards.M_AccountStates.compute(&quot;credit&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Credit::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </entryAction>
      <exitAction name="AccountStates_Credit_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </exitAction>
      <timeoutAction name="AccountStates_Credit_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutAction>
      <timeoutExpression name="AccountStates_Credit_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutExpression>
    </stateEntities>
    <stateEntities xsi:type="states:StateSimple" name="Debit" GUID="67A8BCD2-69C3-4372-EABD-FB2C2FF1DB5A" incomingTransitions="//@stateTransitions.6 //@stateTransitions.9" outgoingTransitions="//@stateTransitions.7 //@stateTransitions.10">
      <extendedProperties>
        <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
          <value xsi:type="designtime:PropertyMap">
            <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
          </value>
        </properties>
        <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
      </extendedProperties>
      <entryAction name="AccountStates_Debit_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Debit::Entering 'Debit' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);&#xD;&#xA;DateTime now = DateTime.now();&#xD;&#xA;DateTime today = DateTime.createTime(DateTime.getYear(now),DateTime.getMonth(now),DateTime.getDate(now),0,0,0,null);&#xD;&#xA;//update the M_AccountStates metric for transactions&#xD;&#xA;Dashboards.M_AccountStates accountStates = Dashboards.M_AccountStates.compute(&quot;transactions&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Debit::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);&#xD;&#xA;//update the M_AccountStates metric for credit&#xD;&#xA;accountStates = Dashboards.M_AccountStates.compute(&quot;debit&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Debit::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </entryAction>
      <exitAction name="AccountStates_Debit_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </exitAction>
      <timeoutAction name="AccountStates_Debit_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutAction>
      <timeoutExpression name="AccountStates_Debit_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
        <symbols>
          <symbolList idName="account" type="/Concepts/Account"/>
        </symbols>
      </timeoutExpression>
    </stateEntities>
  </stateEntities>
  <stateEntities xsi:type="states:StateSimple" name="Suspended" GUID="A9FA8EBF-7DDE-4C3F-F7A3-BD9A54C8D03A" incomingTransitions="//@stateTransitions.8" outgoingTransitions="//@stateTransitions.3">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction name="AccountStates_Suspended_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Suspended::Entering 'Suspended' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);&#xD;&#xA;DateTime now = DateTime.now();&#xD;&#xA;DateTime today = DateTime.createTime(DateTime.getYear(now),DateTime.getMonth(now),DateTime.getDate(now),0,0,0,null);&#xD;&#xA;//update the M_AccountStates metric &#xD;&#xA;Dashboards.M_AccountStates accountStates = Dashboards.M_AccountStates.compute(&quot;suspended&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Suspended::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction name="AccountSuspendedtates_Suspended_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction name="AccountSuspendedtates_Suspended_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountSuspendedtates_Suspended_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
  </stateEntities>
  <stateEntities xsi:type="states:StateSimple" name="Fraud" GUID="A7FAC130-A7BA-5844-74A1-3E9F9B07DF7C" incomingTransitions="//@stateTransitions.11 //@stateTransitions.2" outgoingTransitions="//@stateTransitions.8">
    <extendedProperties>
      <properties xsi:type="designtime:ObjectProperty" name="Backing Store">
        <value xsi:type="designtime:PropertyMap">
          <properties xsi:type="designtime:SimpleProperty" name="Column Name" value=""/>
        </value>
      </properties>
      <properties xsi:type="designtime:SimpleProperty" name="index" value="false"/>
    </extendedProperties>
    <entryAction name="AccountStates_Fraud_entryAction" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Fraud::Entering 'Fraud' State For Account[id=&quot;+account.AccountId+&quot;,name=&quot;+account.AccountName+&quot;]&quot;);&#xD;&#xA;DateTime now = DateTime.now();&#xD;&#xA;DateTime today = DateTime.createTime(DateTime.getYear(now),DateTime.getMonth(now),DateTime.getDate(now),0,0,0,null);&#xD;&#xA;//update the M_AccountStates metric &#xD;&#xA;Dashboards.M_AccountStates accountStates = Dashboards.M_AccountStates.compute(&quot;fraud&quot;,1,today,account.AccountId,account.AccountName);&#xD;&#xA;System.debugOut(&quot;AccountStates::Fraud::Computed M_AccountStates[State=&quot;+accountStates.State+&quot;,Cnt=&quot;+accountStates.Cnt+&quot;]&quot;);" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </entryAction>
    <exitAction name="AccountStates_Fraud_exitAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </exitAction>
    <timeoutAction name="AccountStates_Fraud_timeoutAction" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutAction>
    <timeoutExpression name="AccountStates_Fraud_timeoutExpression" ownerProjectName="FraudDetectionDashboard" returnType="long" actionText="return 0;" conditionText="" validity="CONDITION">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </timeoutExpression>
  </stateEntities>
  <stateTransitions name="Transition_0" GUID="0CBDD16E-4EAF-6003-6FC2-C52572CA06FB" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.2" fromState="//@stateEntities.0" lambda="true" label="">
    <guardRule name="AccountStates_Transition_0_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_1" GUID="26601F64-1045-E136-23C4-3E3B321F8F5E" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3" fromState="//@stateEntities.2" label="">
    <guardRule name="AccountStates_Transition_1_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'created' to 'transactions'&quot;);" conditionText="account.AccountId == accounttxns.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="accounttxns" type="/Events/AccountTxns"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_2" GUID="6033D807-739F-955A-DE5C-EF152DBF9966" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.5" fromState="//@stateEntities.3" label="">
    <guardRule name="AccountStates_Transition_2_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'transactions' to 'fraud'&quot;);" conditionText="account.AccountId == fraud.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="fraud" type="/Events/Fraud"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_3" GUID="89F15FC9-32CF-9126-D02F-0A7E66EDF551" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.1" fromState="//@stateEntities.4" lambda="true" label="">
    <guardRule name="AccountStates_Transition_3_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="" conditionText="" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_4" GUID="A7F81BBD-563D-A8B2-1F34-C9B4E3F08266" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.2" fromState="//@stateEntities.3/@stateEntities.0" label="">
    <guardRule name="AccountStates_Transition_4_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'transactions' to 'credit'&quot;);" conditionText="account.AccountId == credit.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="credit" type="/Events/Credit"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_5" GUID="4ADE8CF7-08C3-BA8A-2611-5D0FA29E345C" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.1" fromState="//@stateEntities.3/@stateEntities.2" label="">
    <guardRule name="AccountStates_Transition_5_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'credit' to 'fraud'&quot;);" conditionText="account.AccountId == fraud.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="fraud" type="/Events/Fraud"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_6" GUID="2034F358-196A-CE42-EE83-619F64CFD268" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.3" fromState="//@stateEntities.3/@stateEntities.0" label="">
    <guardRule name="AccountStates_Transition_6_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'transactions' to 'debit'&quot;);" conditionText="account.AccountId == debit.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="debit" type="/Events/Debit"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_7" GUID="08E0C744-5AEA-AE75-A8A5-639B194AEA01" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.1" fromState="//@stateEntities.3/@stateEntities.3" label="">
    <guardRule name="AccountStates_Transition_7_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'debit' to 'fraud'&quot;);" conditionText="account.AccountId == fraud.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="fraud" type="/Events/Fraud"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_8" GUID="1E4FC48E-F8C8-C754-4892-D31A0F327BE5" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.4" fromState="//@stateEntities.5" label="">
    <guardRule name="AccountStates_Transition_8_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'fraud' to 'suspended'&quot;);" conditionText="account.AccountId == accountstatuschange.AccountId &amp;&amp; accountstatuschange.AccountStatus == &quot;Suspended&quot;;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="accountstatuschange" type="/Events/AccountStatusChange"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_9" GUID="C7D42BE0-1364-A131-D1BB-4AC1F8ADF716" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.3" fromState="//@stateEntities.3/@stateEntities.2" label="">
    <guardRule name="AccountStates_Transition_9_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'credit' to 'debit'&quot;);" conditionText="account.AccountId == debit.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="debit" type="/Events/Debit"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_10" GUID="B3760222-A680-1127-F4F8-7AE8AD5EEFFD" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.3/@stateEntities.2" fromState="//@stateEntities.3/@stateEntities.3" label="">
    <guardRule name="AccountStates_Transition_10_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'debit' to 'credit'&quot;);" conditionText="account.AccountId == credit.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="credit" type="/Events/Credit"/>
      </symbols>
    </guardRule>
  </stateTransitions>
  <stateTransitions name="Transition_11" GUID="05F7052C-402C-B1EF-EA02-AB438227F014" ownerProjectName="FraudDetectionDashboard" ownerStateMachinePath="/Concepts/AccountStates" toState="//@stateEntities.5" fromState="//@stateEntities.2" label="">
    <guardRule name="AccountStates_Transition_11_guardRule" ownerProjectName="FraudDetectionDashboard" actionText="System.debugOut(&quot;AccountStates::Transitioning from 'created' to 'fraud'&quot;);" conditionText="account.AccountId == fraud.AccountId;" priority="5">
      <symbols>
        <symbolList idName="account" type="/Concepts/Account"/>
        <symbolList idName="fraud" type="/Events/Fraud"/>
      </symbols>
    </guardRule>
  </stateTransitions>
</states:StateMachine>
